<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="854.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="837" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="837" > </text>
<g id="frames">
<g >
<title>webrtc::DelayManager::Update(unsigned short, unsigned int, int) (2 samples, 0.34%)</title><rect x="527.9" y="341" width="3.9" height="15.0" fill="rgb(225,46,19)" rx="2" ry="2" />
<text  x="530.86" y="351.5" ></text>
</g>
<g >
<title>tiny_free_list_remove_ptr (1 samples, 0.17%)</title><rect x="644.5" y="485" width="1.9" height="15.0" fill="rgb(207,1,7)" rx="2" ry="2" />
<text  x="647.47" y="495.5" ></text>
</g>
<g >
<title>non-virtual thunk to content::P2PSocketClientImpl::SendComplete(network::P2PSendPacketMetrics const&amp;) (21 samples, 3.52%)</title><rect x="806.5" y="373" width="41.6" height="15.0" fill="rgb(219,31,22)" rx="2" ry="2" />
<text  x="809.55" y="383.5" >non..</text>
</g>
<g >
<title>mojo::internal::UnmappedNativeStructSerializerImpl::SerializeMessageContents(IPC::Message*, mojo::internal::Buffer*, mojo::native::internal::NativeStruct_Data::BufferWriter*, mojo::internal::SerializationContext*) (1 samples, 0.17%)</title><rect x="187.9" y="357" width="2.0" height="15.0" fill="rgb(227,211,44)" rx="2" ry="2" />
<text  x="190.89" y="367.5" ></text>
</g>
<g >
<title>sha1_block_data_order_avx (1 samples, 0.17%)</title><rect x="761.1" y="181" width="2.0" height="15.0" fill="rgb(224,202,39)" rx="2" ry="2" />
<text  x="764.09" y="191.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="108.8" y="149" width="2.0" height="15.0" fill="rgb(243,17,49)" rx="2" ry="2" />
<text  x="111.83" y="159.5" ></text>
</g>
<g >
<title>base::debug::GlobalActivityTracker::ScopedThreadActivity::~ScopedThreadActivity() (1 samples, 0.17%)</title><rect x="883.6" y="389" width="2.0" height="15.0" fill="rgb(211,58,4)" rx="2" ry="2" />
<text  x="886.63" y="399.5" ></text>
</g>
<g >
<title>mojo::core::(anonymous namespace)::CreateOrExtendSerializedEventMessage(mojo::core::ports::UserMessageEvent*, unsigned long, unsigned long, mojo::core::Dispatcher::DispatcherInTransit const*, unsigned long, std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;*, void**, unsigned long*, void**) (2 samples, 0.34%)</title><rect x="308.5" y="277" width="3.9" height="15.0" fill="rgb(250,111,46)" rx="2" ry="2" />
<text  x="311.46" y="287.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.34%)</title><rect x="423.1" y="309" width="4.0" height="15.0" fill="rgb(249,173,24)" rx="2" ry="2" />
<text  x="426.10" y="319.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::WillQueueTask(base::sequence_manager::Task*, char const*) (1 samples, 0.17%)</title><rect x="830.3" y="165" width="1.9" height="15.0" fill="rgb(240,128,19)" rx="2" ry="2" />
<text  x="833.27" y="175.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() (1 samples, 0.17%)</title><rect x="638.5" y="421" width="2.0" height="15.0" fill="rgb(249,141,31)" rx="2" ry="2" />
<text  x="641.54" y="431.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (3 samples, 0.50%)</title><rect x="939.0" y="565" width="5.9" height="15.0" fill="rgb(240,132,1)" rx="2" ry="2" />
<text  x="941.98" y="575.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostTask(base::sequence_manager::internal::PostedTask) (2 samples, 0.34%)</title><rect x="102.9" y="165" width="4.0" height="15.0" fill="rgb(238,177,23)" rx="2" ry="2" />
<text  x="105.90" y="175.5" ></text>
</g>
<g >
<title>mojo::core::NodeController::ForwardEvent(mojo::core::ports::NodeName const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::Event, std::__Cr::default_delete&lt;mojo::core::ports::Event&gt; &gt;) (14 samples, 2.35%)</title><rect x="263.0" y="213" width="27.7" height="15.0" fill="rgb(242,75,37)" rx="2" ry="2" />
<text  x="266.00" y="223.5" >m..</text>
</g>
<g >
<title>webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician(unsigned int) (1 samples, 0.17%)</title><rect x="387.5" y="389" width="2.0" height="15.0" fill="rgb(213,127,38)" rx="2" ry="2" />
<text  x="390.52" y="399.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="353.9" y="309" width="2.0" height="15.0" fill="rgb(206,88,52)" rx="2" ry="2" />
<text  x="356.92" y="319.5" ></text>
</g>
<g >
<title>webrtc::video_coding::FrameBuffer::InsertFrame(std::__Cr::unique_ptr&lt;webrtc::video_coding::EncodedFrame, std::__Cr::default_delete&lt;webrtc::video_coding::EncodedFrame&gt; &gt;) (6 samples, 1.01%)</title><rect x="427.1" y="245" width="11.8" height="15.0" fill="rgb(247,220,15)" rx="2" ry="2" />
<text  x="430.05" y="255.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="697.8" y="485" width="2.0" height="15.0" fill="rgb(239,36,39)" rx="2" ry="2" />
<text  x="700.84" y="495.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (2 samples, 0.34%)</title><rect x="555.5" y="261" width="4.0" height="15.0" fill="rgb(221,149,51)" rx="2" ry="2" />
<text  x="558.53" y="271.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::FindOrCreateExtensionInfo(int) (1 samples, 0.17%)</title><rect x="415.2" y="325" width="2.0" height="15.0" fill="rgb(239,46,22)" rx="2" ry="2" />
<text  x="418.19" y="335.5" ></text>
</g>
<g >
<title>webrtc::RtpDemuxer::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (35 samples, 5.86%)</title><rect x="383.6" y="437" width="69.1" height="15.0" fill="rgb(205,68,11)" rx="2" ry="2" />
<text  x="386.57" y="447.5" >webrtc:..</text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::PostTaskInternal(rtc::Location const&amp;, int, rtc::MessageHandler*, unsigned int, rtc::MessageData*) (1 samples, 0.17%)</title><rect x="743.3" y="229" width="2.0" height="15.0" fill="rgb(249,56,43)" rx="2" ry="2" />
<text  x="746.30" y="239.5" ></text>
</g>
<g >
<title>std::__Cr::vector&lt;mojo::core::RequestContext::WatchNotifyFinalizer, base::StackAllocator&lt;mojo::core::RequestContext::WatchNotifyFinalizer, 8ul&gt; &gt;::reserve(unsigned long) (2 samples, 0.34%)</title><rect x="893.5" y="437" width="4.0" height="15.0" fill="rgb(229,44,48)" rx="2" ry="2" />
<text  x="896.52" y="447.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="438.9" y="293" width="2.0" height="15.0" fill="rgb(220,64,8)" rx="2" ry="2" />
<text  x="441.91" y="303.5" ></text>
</g>
<g >
<title>HMAC_Final (2 samples, 0.34%)</title><rect x="98.9" y="245" width="4.0" height="15.0" fill="rgb(244,52,19)" rx="2" ry="2" />
<text  x="101.94" y="255.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.34%)</title><rect x="1110.9" y="517" width="4.0" height="15.0" fill="rgb(210,49,38)" rx="2" ry="2" />
<text  x="1113.94" y="527.5" ></text>
</g>
<g >
<title>srtp_unprotect_mki (6 samples, 1.01%)</title><rect x="751.2" y="229" width="11.9" height="15.0" fill="rgb(253,223,19)" rx="2" ry="2" />
<text  x="754.21" y="239.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::SendPacket(bool, rtc::CopyOnWriteBuffer*, rtc::PacketOptions const&amp;, int) (8 samples, 1.34%)</title><rect x="174.1" y="485" width="15.8" height="15.0" fill="rgb(211,208,48)" rx="2" ry="2" />
<text  x="177.05" y="495.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.17%)</title><rect x="970.6" y="549" width="2.0" height="15.0" fill="rgb(246,97,24)" rx="2" ry="2" />
<text  x="973.60" y="559.5" ></text>
</g>
<g >
<title>mojo::native::internal::NativeStruct_Data::BufferWriter::data() (1 samples, 0.17%)</title><rect x="334.2" y="357" width="1.9" height="15.0" fill="rgb(252,74,16)" rx="2" ry="2" />
<text  x="337.15" y="367.5" ></text>
</g>
<g >
<title>mojo::core::ports::(anonymous namespace)::UpdateTLS(mojo::core::ports::PortLocker*, mojo::core::ports::PortLocker*) (1 samples, 0.17%)</title><rect x="877.7" y="421" width="2.0" height="15.0" fill="rgb(212,85,29)" rx="2" ry="2" />
<text  x="880.71" y="431.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="980.5" y="549" width="2.0" height="15.0" fill="rgb(232,13,43)" rx="2" ry="2" />
<text  x="983.49" y="559.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="962.7" y="517" width="2.0" height="15.0" fill="rgb(252,202,20)" rx="2" ry="2" />
<text  x="965.70" y="527.5" ></text>
</g>
<g >
<title>small_free_list_remove_ptr_no_clear (1 samples, 0.17%)</title><rect x="490.3" y="293" width="2.0" height="15.0" fill="rgb(246,87,9)" rx="2" ry="2" />
<text  x="493.30" y="303.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::DeliverRtcp(webrtc::MediaType, unsigned char const*, unsigned long) (7 samples, 1.17%)</title><rect x="561.5" y="485" width="13.8" height="15.0" fill="rgb(236,170,40)" rx="2" ry="2" />
<text  x="564.46" y="495.5" ></text>
</g>
<g >
<title>base::GetProgramCounter() (1 samples, 0.17%)</title><rect x="1000.3" y="549" width="1.9" height="15.0" fill="rgb(235,30,19)" rx="2" ry="2" />
<text  x="1003.25" y="559.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::OnSentPacket(rtc::PacketTransportInternal*, rtc::SentPacket const&amp;) (3 samples, 0.50%)</title><rect x="116.7" y="341" width="6.0" height="15.0" fill="rgb(216,23,25)" rx="2" ry="2" />
<text  x="119.73" y="351.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="508.1" y="309" width="2.0" height="15.0" fill="rgb(249,57,37)" rx="2" ry="2" />
<text  x="511.09" y="319.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::WeakReference(base::internal::WeakReference const&amp;) (1 samples, 0.17%)</title><rect x="709.7" y="485" width="2.0" height="15.0" fill="rgb(251,184,26)" rx="2" ry="2" />
<text  x="712.70" y="495.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.17%)</title><rect x="561.5" y="277" width="1.9" height="15.0" fill="rgb(245,117,52)" rx="2" ry="2" />
<text  x="564.46" y="287.5" ></text>
</g>
<g >
<title>small_malloc_should_clear (1 samples, 0.17%)</title><rect x="97.0" y="197" width="1.9" height="15.0" fill="rgb(234,15,37)" rx="2" ry="2" />
<text  x="99.97" y="207.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::FindOrCreateExtensionInfo(int) (1 samples, 0.17%)</title><rect x="377.6" y="421" width="2.0" height="15.0" fill="rgb(234,181,51)" rx="2" ry="2" />
<text  x="380.64" y="431.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="834.2" y="213" width="2.0" height="15.0" fill="rgb(205,72,49)" rx="2" ry="2" />
<text  x="837.22" y="223.5" ></text>
</g>
<g >
<title>rtc::SystemTimeNanos() (1 samples, 0.17%)</title><rect x="782.8" y="293" width="2.0" height="15.0" fill="rgb(232,29,29)" rx="2" ry="2" />
<text  x="785.83" y="303.5" ></text>
</g>
<g >
<title>rtc::SocketAddress::operator&lt;(rtc::SocketAddress const&amp;) const (1 samples, 0.17%)</title><rect x="786.8" y="293" width="2.0" height="15.0" fill="rgb(214,97,45)" rx="2" ry="2" />
<text  x="789.78" y="303.5" ></text>
</g>
<g >
<title>MojoDestroyMessage (2 samples, 0.34%)</title><rect x="854.0" y="421" width="3.9" height="15.0" fill="rgb(217,85,28)" rx="2" ry="2" />
<text  x="856.99" y="431.5" ></text>
</g>
<g >
<title>webrtc::PacketBuffer::InsertPacket(webrtc::Packet&amp;&amp;, webrtc::StatisticsCalculator*) (1 samples, 0.17%)</title><rect x="535.8" y="325" width="1.9" height="15.0" fill="rgb(250,174,1)" rx="2" ry="2" />
<text  x="538.76" y="335.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::Parse(rtc::CopyOnWriteBuffer) (3 samples, 0.50%)</title><rect x="774.9" y="229" width="6.0" height="15.0" fill="rgb(224,169,32)" rx="2" ry="2" />
<text  x="777.92" y="239.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.17%)</title><rect x="873.8" y="389" width="1.9" height="15.0" fill="rgb(212,161,23)" rx="2" ry="2" />
<text  x="876.75" y="399.5" ></text>
</g>
<g >
<title>rtc::CriticalSection::Enter() const (2 samples, 0.34%)</title><rect x="842.1" y="277" width="4.0" height="15.0" fill="rgb(225,6,19)" rx="2" ry="2" />
<text  x="845.13" y="287.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="741.3" y="229" width="2.0" height="15.0" fill="rgb(218,14,41)" rx="2" ry="2" />
<text  x="744.32" y="239.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (1 samples, 0.17%)</title><rect x="1045.7" y="517" width="2.0" height="15.0" fill="rgb(218,179,12)" rx="2" ry="2" />
<text  x="1048.71" y="527.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TakeImmediateIncomingQueueTasks(base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;*) (2 samples, 0.34%)</title><rect x="1024.0" y="501" width="3.9" height="15.0" fill="rgb(228,86,45)" rx="2" ry="2" />
<text  x="1026.97" y="511.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (3 samples, 0.50%)</title><rect x="476.5" y="277" width="5.9" height="15.0" fill="rgb(229,7,46)" rx="2" ry="2" />
<text  x="479.47" y="287.5" ></text>
</g>
<g >
<title>webrtc::SequenceCheckerImpl::IsCurrent() const (1 samples, 0.17%)</title><rect x="383.6" y="405" width="1.9" height="15.0" fill="rgb(242,4,12)" rx="2" ry="2" />
<text  x="386.57" y="415.5" ></text>
</g>
<g >
<title>small_free_list_remove_ptr (1 samples, 0.17%)</title><rect x="97.0" y="181" width="1.9" height="15.0" fill="rgb(205,158,20)" rx="2" ry="2" />
<text  x="99.97" y="191.5" ></text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="417.2" y="309" width="1.9" height="15.0" fill="rgb(230,213,52)" rx="2" ry="2" />
<text  x="420.17" y="319.5" ></text>
</g>
<g >
<title>small_malloc_should_clear (1 samples, 0.17%)</title><rect x="381.6" y="309" width="2.0" height="15.0" fill="rgb(245,146,12)" rx="2" ry="2" />
<text  x="384.59" y="319.5" ></text>
</g>
<g >
<title>webrtc::SrtpTransport::SendRtcpPacket(rtc::CopyOnWriteBuffer*, rtc::PacketOptions const&amp;, int) (9 samples, 1.51%)</title><rect x="172.1" y="501" width="17.8" height="15.0" fill="rgb(207,84,16)" rx="2" ry="2" />
<text  x="175.08" y="511.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.17%)</title><rect x="561.5" y="293" width="1.9" height="15.0" fill="rgb(230,40,7)" rx="2" ry="2" />
<text  x="564.46" y="303.5" ></text>
</g>
<g >
<title>mojo::core::ports::PortLocker::PortLocker(mojo::core::ports::PortRef const**, unsigned long) (1 samples, 0.17%)</title><rect x="257.1" y="229" width="1.9" height="15.0" fill="rgb(212,144,36)" rx="2" ry="2" />
<text  x="260.07" y="239.5" ></text>
</g>
<g >
<title>base::sequence_manager::TimeDomain::NextScheduledRunTime() const (2 samples, 0.34%)</title><rect x="927.1" y="549" width="4.0" height="15.0" fill="rgb(207,78,40)" rx="2" ry="2" />
<text  x="930.12" y="559.5" ></text>
</g>
<g >
<title>std::__Cr::basic_ostream&lt;char, std::__Cr::char_traits&lt;char&gt; &gt;&amp; std::__Cr::__put_character_sequence&lt;char, std::__Cr::char_traits&lt;char&gt; &gt;(std::__Cr::basic_ostream&lt;char, std::__Cr::char_traits&lt;char&gt; &gt;&amp;, char const*, unsigned long) (1 samples, 0.17%)</title><rect x="741.3" y="261" width="2.0" height="15.0" fill="rgb(237,88,8)" rx="2" ry="2" />
<text  x="744.32" y="271.5" ></text>
</g>
<g >
<title>webrtc::TransportFeedbackAdapter::ProcessTransportFeedback(webrtc::rtcp::TransportFeedback const&amp;, webrtc::Timestamp) (1 samples, 0.17%)</title><rect x="573.3" y="389" width="2.0" height="15.0" fill="rgb(248,185,21)" rx="2" ry="2" />
<text  x="576.32" y="399.5" ></text>
</g>
<g >
<title>__psynch_mutexwait (1 samples, 0.17%)</title><rect x="355.9" y="245" width="2.0" height="15.0" fill="rgb(234,128,0)" rx="2" ry="2" />
<text  x="358.90" y="255.5" ></text>
</g>
<g >
<title>mojo::InterfaceEndpointClient::InitControllerIfNecessary() (2 samples, 0.34%)</title><rect x="249.2" y="341" width="3.9" height="15.0" fill="rgb(252,216,39)" rx="2" ry="2" />
<text  x="252.16" y="351.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::Parse(rtc::CopyOnWriteBuffer) (1 samples, 0.17%)</title><rect x="377.6" y="453" width="2.0" height="15.0" fill="rgb(219,114,9)" rx="2" ry="2" />
<text  x="380.64" y="463.5" ></text>
</g>
<g >
<title>mojo::core::NodeChannel::SendChannelMessage(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (14 samples, 2.35%)</title><rect x="263.0" y="181" width="27.7" height="15.0" fill="rgb(236,150,45)" rx="2" ry="2" />
<text  x="266.00" y="191.5" >m..</text>
</g>
<g >
<title>rtc::FireAndForgetAsyncClosure&lt;rtc::MethodFunctor&lt;cricket::P2PTransportChannel, void (cricket::P2PTransportChannel::*)(), void&gt; &gt;::~FireAndForgetAsyncClosure() (2 samples, 0.34%)</title><rect x="670.2" y="517" width="3.9" height="15.0" fill="rgb(207,78,6)" rx="2" ry="2" />
<text  x="673.17" y="527.5" ></text>
</g>
<g >
<title>bool base::internal::QueryCancellationTraits&lt;base::internal::BindState&lt;void (mojo::SimpleWatcher::*)(int, unsigned int, mojo::HandleSignalsState const&amp;), base::WeakPtr&lt;mojo::SimpleWatcher&gt;, int, unsigned int, mojo::HandleSignalsState&gt; &gt;(base::internal::BindStateBase const*, base::internal::BindStateBase::CancellationQueryMode) (1 samples, 0.17%)</title><rect x="1126.8" y="517" width="1.9" height="15.0" fill="rgb(248,183,38)" rx="2" ry="2" />
<text  x="1129.75" y="527.5" ></text>
</g>
<g >
<title>all (597 samples, 100%)</title><rect x="10.0" y="805" width="1180.0" height="15.0" fill="rgb(214,105,39)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (4 samples, 0.67%)</title><rect x="363.8" y="325" width="7.9" height="15.0" fill="rgb(240,62,32)" rx="2" ry="2" />
<text  x="366.80" y="335.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.34%)</title><rect x="1093.1" y="501" width="4.0" height="15.0" fill="rgb(236,10,7)" rx="2" ry="2" />
<text  x="1096.15" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="1083.3" y="517" width="1.9" height="15.0" fill="rgb(220,170,14)" rx="2" ry="2" />
<text  x="1086.27" y="527.5" ></text>
</g>
<g >
<title>std::__Cr::pair&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, void*&gt;*, long&gt;, bool&gt; std::__Cr::__tree&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::__map_value_compare&lt;int, std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::less&lt;int&gt;, true&gt;, std::__Cr::allocator&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt; &gt; &gt;::__emplace_unique_key_args&lt;int, std::__Cr::pair&lt;int, rtc::Message&gt; &gt;(int const&amp;, std::__Cr::pair&lt;int, rtc::Message&gt;&amp;&amp;) (1 samples, 0.17%)</title><rect x="106.9" y="213" width="1.9" height="15.0" fill="rgb(244,180,32)" rx="2" ry="2" />
<text  x="109.85" y="223.5" ></text>
</g>
<g >
<title>mojo::internal::UnmappedNativeStructSerializerImpl::SerializeMessageContents(IPC::Message*, mojo::internal::Buffer*, mojo::native::internal::NativeStruct_Data::BufferWriter*, mojo::internal::SerializationContext*) (6 samples, 1.01%)</title><rect x="322.3" y="357" width="11.9" height="15.0" fill="rgb(212,206,15)" rx="2" ry="2" />
<text  x="325.29" y="367.5" ></text>
</g>
<g >
<title>rtc::PacketOptions::PacketOptions(rtc::PacketOptions const&amp;) (1 samples, 0.17%)</title><rect x="336.1" y="373" width="2.0" height="15.0" fill="rgb(218,170,48)" rx="2" ry="2" />
<text  x="339.13" y="383.5" ></text>
</g>
<g >
<title>webrtc::RtpDemuxer::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (4 samples, 0.67%)</title><rect x="102.9" y="277" width="7.9" height="15.0" fill="rgb(240,22,7)" rx="2" ry="2" />
<text  x="105.90" y="287.5" ></text>
</g>
<g >
<title>webrtc::TickTimer::Stopwatch::Stopwatch(webrtc::TickTimer const&amp;) (1 samples, 0.17%)</title><rect x="535.8" y="309" width="1.9" height="15.0" fill="rgb(217,65,5)" rx="2" ry="2" />
<text  x="538.76" y="319.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (2 samples, 0.34%)</title><rect x="431.0" y="85" width="4.0" height="15.0" fill="rgb(247,42,42)" rx="2" ry="2" />
<text  x="434.01" y="95.5" ></text>
</g>
<g >
<title>SHA1_Final (2 samples, 0.34%)</title><rect x="98.9" y="229" width="4.0" height="15.0" fill="rgb(229,127,37)" rx="2" ry="2" />
<text  x="101.94" y="239.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="808.5" y="341" width="2.0" height="15.0" fill="rgb(240,162,21)" rx="2" ry="2" />
<text  x="811.53" y="351.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1176.2" y="581" width="1.9" height="15.0" fill="rgb(214,212,45)" rx="2" ry="2" />
<text  x="1179.16" y="591.5" ></text>
</g>
<g >
<title>__psynch_mutexwait (2 samples, 0.34%)</title><rect x="470.5" y="229" width="4.0" height="15.0" fill="rgb(231,160,22)" rx="2" ry="2" />
<text  x="473.54" y="239.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostTask(base::sequence_manager::internal::PostedTask) (3 samples, 0.50%)</title><rect x="826.3" y="197" width="5.9" height="15.0" fill="rgb(208,35,16)" rx="2" ry="2" />
<text  x="829.31" y="207.5" ></text>
</g>
<g >
<title>std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;* logging::CheckNEImpl&lt;(anonymous namespace)::TlsVectorEntry*, void*&gt;((anonymous namespace)::TlsVectorEntry* const&amp;, void* const&amp;, char const*) (1 samples, 0.17%)</title><rect x="1091.2" y="469" width="1.9" height="15.0" fill="rgb(217,96,23)" rx="2" ry="2" />
<text  x="1094.17" y="479.5" ></text>
</g>
<g >
<title>srtp_hmac_compute (1 samples, 0.17%)</title><rect x="755.2" y="213" width="1.9" height="15.0" fill="rgb(250,113,28)" rx="2" ry="2" />
<text  x="758.16" y="223.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="583.2" y="485" width="2.0" height="15.0" fill="rgb(230,20,48)" rx="2" ry="2" />
<text  x="586.20" y="495.5" ></text>
</g>
<g >
<title>webrtc::NetEqImpl::InsertPacket(webrtc::RTPHeader const&amp;, rtc::ArrayView&lt;unsigned char const, -4711l&gt;, unsigned int) (7 samples, 1.17%)</title><rect x="523.9" y="373" width="13.8" height="15.0" fill="rgb(248,88,6)" rx="2" ry="2" />
<text  x="526.90" y="383.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_8::__invoke(_malloc_zone_t*, unsigned long, unsigned long) (1 samples, 0.17%)</title><rect x="324.3" y="181" width="1.9" height="15.0" fill="rgb(215,56,11)" rx="2" ry="2" />
<text  x="327.27" y="191.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1035.8" y="469" width="2.0" height="15.0" fill="rgb(234,221,24)" rx="2" ry="2" />
<text  x="1038.83" y="479.5" ></text>
</g>
<g >
<title>cricket::UDPPort::SendTo(void const*, unsigned long, rtc::SocketAddress const&amp;, rtc::PacketOptions const&amp;, bool) (62 samples, 10.39%)</title><rect x="215.6" y="437" width="122.5" height="15.0" fill="rgb(224,118,33)" rx="2" ry="2" />
<text  x="218.56" y="447.5" >cricket::UDPPor..</text>
</g>
<g >
<title>base::LazyInstance&lt;base::SequenceLocalStorageSlot&lt;mojo::internal::MessageDispatchContext*, std::__Cr::default_delete&lt;mojo::internal::MessageDispatchContext*&gt; &gt;, base::internal::LeakyLazyInstanceTraits&lt;base::SequenceLocalStorageSlot&lt;mojo::internal::MessageDispatchContext*, std::__Cr::default_delete&lt;mojo::internal::MessageDispatchContext*&gt; &gt; &gt; &gt;::Pointer() (1 samples, 0.17%)</title><rect x="794.7" y="341" width="2.0" height="15.0" fill="rgb(225,105,18)" rx="2" ry="2" />
<text  x="797.69" y="351.5" ></text>
</g>
<g >
<title>tiny_size (1 samples, 0.17%)</title><rect x="492.3" y="309" width="2.0" height="15.0" fill="rgb(244,110,49)" rx="2" ry="2" />
<text  x="495.28" y="319.5" ></text>
</g>
<g >
<title>mojo::core::(anonymous namespace)::ChannelMac::MachMessageSendLocked(mach_msg_header_t*) (1 samples, 0.17%)</title><rect x="183.9" y="117" width="2.0" height="15.0" fill="rgb(254,78,47)" rx="2" ry="2" />
<text  x="186.94" y="127.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="778.9" y="101" width="2.0" height="15.0" fill="rgb(239,183,12)" rx="2" ry="2" />
<text  x="781.88" y="111.5" ></text>
</g>
<g >
<title>_pthread_mutex_lock_init_slow (2 samples, 0.34%)</title><rect x="842.1" y="261" width="4.0" height="15.0" fill="rgb(238,123,44)" rx="2" ry="2" />
<text  x="845.13" y="271.5" ></text>
</g>
<g >
<title>base::subtle::TimeTicksNowIgnoringOverride() (1 samples, 0.17%)</title><rect x="1142.6" y="501" width="1.9" height="15.0" fill="rgb(240,16,24)" rx="2" ry="2" />
<text  x="1145.56" y="511.5" ></text>
</g>
<g >
<title>webrtc::video_coding::PacketBuffer::GetBitstream(webrtc::video_coding::RtpFrameObject const&amp;, unsigned char*) (1 samples, 0.17%)</title><rect x="442.9" y="277" width="1.9" height="15.0" fill="rgb(223,208,44)" rx="2" ry="2" />
<text  x="445.86" y="287.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkDeduplicator::DidCheckForMoreWork(base::sequence_manager::internal::WorkDeduplicator::NextTask) (1 samples, 0.17%)</title><rect x="1166.3" y="613" width="2.0" height="15.0" fill="rgb(234,156,0)" rx="2" ry="2" />
<text  x="1169.28" y="623.5" ></text>
</g>
<g >
<title>base::WorkIdProvider::IncrementWorkId() (2 samples, 0.34%)</title><rect x="909.3" y="597" width="4.0" height="15.0" fill="rgb(242,39,11)" rx="2" ry="2" />
<text  x="912.33" y="607.5" ></text>
</g>
<g >
<title>mojo::core::MessagePipeDispatcher::WriteMessage(std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (3 samples, 0.50%)</title><rect x="182.0" y="277" width="5.9" height="15.0" fill="rgb(214,223,20)" rx="2" ry="2" />
<text  x="184.96" y="287.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (4 samples, 0.67%)</title><rect x="964.7" y="581" width="7.9" height="15.0" fill="rgb(207,24,22)" rx="2" ry="2" />
<text  x="967.67" y="591.5" ></text>
</g>
<g >
<title>MojoAppendMessageData (1 samples, 0.17%)</title><rect x="187.9" y="325" width="2.0" height="15.0" fill="rgb(239,86,4)" rx="2" ry="2" />
<text  x="190.89" y="335.5" ></text>
</g>
<g >
<title>webrtc::video_coding::PacketBuffer::OnTimestampReceived(unsigned int) (2 samples, 0.34%)</title><rect x="444.8" y="309" width="4.0" height="15.0" fill="rgb(233,34,53)" rx="2" ry="2" />
<text  x="447.84" y="319.5" ></text>
</g>
<g >
<title>cricket::SrtpSession::ProtectRtcp(void*, int, int, int*) (1 samples, 0.17%)</title><rect x="172.1" y="485" width="2.0" height="15.0" fill="rgb(225,171,38)" rx="2" ry="2" />
<text  x="175.08" y="495.5" ></text>
</g>
<g >
<title>base::Pickle::Resize(unsigned long) (1 samples, 0.17%)</title><rect x="231.4" y="325" width="2.0" height="15.0" fill="rgb(216,99,34)" rx="2" ry="2" />
<text  x="234.37" y="335.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="1081.3" y="501" width="2.0" height="15.0" fill="rgb(239,88,54)" rx="2" ry="2" />
<text  x="1084.29" y="511.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostImmediateTaskImpl(base::sequence_manager::internal::PostedTask, base::sequence_manager::internal::TaskQueueImpl::CurrentThread) (1 samples, 0.17%)</title><rect x="767.0" y="101" width="2.0" height="15.0" fill="rgb(205,52,21)" rx="2" ry="2" />
<text  x="770.02" y="111.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (8 samples, 1.34%)</title><rect x="466.6" y="357" width="15.8" height="15.0" fill="rgb(219,17,20)" rx="2" ry="2" />
<text  x="469.58" y="367.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::RtpPacket() (2 samples, 0.34%)</title><rect x="373.7" y="437" width="3.9" height="15.0" fill="rgb(217,214,33)" rx="2" ry="2" />
<text  x="376.69" y="447.5" ></text>
</g>
<g >
<title>mojo::core::ports::MessageQueue::HasNextMessage() const (1 samples, 0.17%)</title><rect x="865.8" y="405" width="2.0" height="15.0" fill="rgb(226,49,33)" rx="2" ry="2" />
<text  x="868.85" y="415.5" ></text>
</g>
<g >
<title>mach_msg_trap (2 samples, 0.34%)</title><rect x="555.5" y="229" width="4.0" height="15.0" fill="rgb(209,156,26)" rx="2" ry="2" />
<text  x="558.53" y="239.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (6 samples, 1.01%)</title><rect x="1097.1" y="517" width="11.9" height="15.0" fill="rgb(207,70,16)" rx="2" ry="2" />
<text  x="1100.10" y="527.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="355.9" y="309" width="2.0" height="15.0" fill="rgb(217,132,21)" rx="2" ry="2" />
<text  x="358.90" y="319.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (2 samples, 0.34%)</title><rect x="102.9" y="197" width="4.0" height="15.0" fill="rgb(220,187,49)" rx="2" ry="2" />
<text  x="105.90" y="207.5" ></text>
</g>
<g >
<title>aes_ctr_cipher (1 samples, 0.17%)</title><rect x="753.2" y="181" width="2.0" height="15.0" fill="rgb(219,40,20)" rx="2" ry="2" />
<text  x="756.18" y="191.5" ></text>
</g>
<g >
<title>base::internal::Sequence::Transaction::PushTask(base::internal::Task) (1 samples, 0.17%)</title><rect x="589.1" y="389" width="2.0" height="15.0" fill="rgb(248,53,37)" rx="2" ry="2" />
<text  x="592.13" y="399.5" ></text>
</g>
<g >
<title>mojo::internal::Serializer&lt;mojo::ArrayDataView&lt;signed char&gt;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&gt;::Serialize(std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, mojo::internal::Buffer*, mojo::internal::Array_Data&lt;signed char&gt;::BufferWriter*, mojo::internal::ContainerValidateParams const*, mojo::internal::SerializationContext*) (3 samples, 0.50%)</title><rect x="316.4" y="357" width="5.9" height="15.0" fill="rgb(250,37,17)" rx="2" ry="2" />
<text  x="319.37" y="367.5" ></text>
</g>
<g >
<title>mach_msg_trap (2 samples, 0.34%)</title><rect x="427.1" y="197" width="3.9" height="15.0" fill="rgb(226,174,31)" rx="2" ry="2" />
<text  x="430.05" y="207.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="723.5" y="389" width="2.0" height="15.0" fill="rgb(210,220,32)" rx="2" ry="2" />
<text  x="726.53" y="399.5" ></text>
</g>
<g >
<title>base::internal::Task::Task(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (1 samples, 0.17%)</title><rect x="585.2" y="421" width="2.0" height="15.0" fill="rgb(210,36,7)" rx="2" ry="2" />
<text  x="588.18" y="431.5" ></text>
</g>
<g >
<title>content::WebRtcVideoTrackSource::DeliverFrame(scoped_refptr&lt;media::VideoFrame&gt;, gfx::Rect, long long) (4 samples, 0.67%)</title><rect x="678.1" y="533" width="7.9" height="15.0" fill="rgb(237,186,15)" rx="2" ry="2" />
<text  x="681.07" y="543.5" ></text>
</g>
<g >
<title>cricket::SrtpSession::ProtectRtp(void*, int, int, int*) (8 samples, 1.34%)</title><rect x="189.9" y="469" width="15.8" height="15.0" fill="rgb(249,2,49)" rx="2" ry="2" />
<text  x="192.87" y="479.5" ></text>
</g>
<g >
<title>webrtc::acm2::AcmReceiver::LastDecoder() const (1 samples, 0.17%)</title><rect x="543.7" y="373" width="1.9" height="15.0" fill="rgb(223,150,29)" rx="2" ry="2" />
<text  x="546.67" y="383.5" ></text>
</g>
<g >
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="330.2" y="325" width="2.0" height="15.0" fill="rgb(251,162,7)" rx="2" ry="2" />
<text  x="333.20" y="335.5" ></text>
</g>
<g >
<title>webrtc::ReceiveStatisticsProxy::OnCompleteFrame(bool, unsigned long, webrtc::VideoContentType) (1 samples, 0.17%)</title><rect x="435.0" y="229" width="1.9" height="15.0" fill="rgb(217,221,28)" rx="2" ry="2" />
<text  x="437.96" y="239.5" ></text>
</g>
<g >
<title>aes_hw_ctr32_encrypt_blocks (1 samples, 0.17%)</title><rect x="747.3" y="165" width="1.9" height="15.0" fill="rgb(208,48,2)" rx="2" ry="2" />
<text  x="750.25" y="175.5" ></text>
</g>
<g >
<title>_pthread_mutex_unlock_init_slow (1 samples, 0.17%)</title><rect x="203.7" y="421" width="2.0" height="15.0" fill="rgb(214,205,1)" rx="2" ry="2" />
<text  x="206.70" y="431.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::EndUnusedPeriod() (1 samples, 0.17%)</title><rect x="565.4" y="293" width="2.0" height="15.0" fill="rgb(245,99,3)" rx="2" ry="2" />
<text  x="568.41" y="303.5" ></text>
</g>
<g >
<title>srtp_aes_icm_openssl_encrypt (2 samples, 0.34%)</title><rect x="197.8" y="437" width="3.9" height="15.0" fill="rgb(245,27,13)" rx="2" ry="2" />
<text  x="200.77" y="447.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (2 samples, 0.34%)</title><rect x="555.5" y="309" width="4.0" height="15.0" fill="rgb(227,168,53)" rx="2" ry="2" />
<text  x="558.53" y="319.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (17 samples, 2.85%)</title><rect x="587.2" y="405" width="33.6" height="15.0" fill="rgb(253,77,24)" rx="2" ry="2" />
<text  x="590.15" y="415.5" >ba..</text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="83.1" y="597" width="2.0" height="15.0" fill="rgb(211,33,50)" rx="2" ry="2" />
<text  x="86.13" y="607.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="836.2" y="213" width="2.0" height="15.0" fill="rgb(207,170,1)" rx="2" ry="2" />
<text  x="839.20" y="223.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostTask(base::sequence_manager::internal::PostedTask) (1 samples, 0.17%)</title><rect x="767.0" y="117" width="2.0" height="15.0" fill="rgb(213,224,44)" rx="2" ry="2" />
<text  x="770.02" y="127.5" ></text>
</g>
<g >
<title>base::ScopedDeferTaskPosting::Set(base::ScopedDeferTaskPosting*) (1 samples, 0.17%)</title><rect x="822.4" y="181" width="1.9" height="15.0" fill="rgb(215,61,24)" rx="2" ry="2" />
<text  x="825.36" y="191.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="304.5" y="293" width="2.0" height="15.0" fill="rgb(250,89,39)" rx="2" ry="2" />
<text  x="307.51" y="303.5" ></text>
</g>
<g >
<title>base::sequence_manager::TimeDomain::MoveReadyDelayedTasksToWorkQueues(base::sequence_manager::LazyNow*) (4 samples, 0.67%)</title><rect x="1029.9" y="533" width="7.9" height="15.0" fill="rgb(249,63,8)" rx="2" ry="2" />
<text  x="1032.90" y="543.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::EnsureEnoughWorkersLockRequired(base::internal::ThreadGroup::BaseScopedWorkersExecutor*) (2 samples, 0.34%)</title><rect x="359.8" y="309" width="4.0" height="15.0" fill="rgb(224,139,15)" rx="2" ry="2" />
<text  x="362.85" y="319.5" ></text>
</g>
<g >
<title>EVP_EncryptUpdate (1 samples, 0.17%)</title><rect x="747.3" y="197" width="1.9" height="15.0" fill="rgb(238,224,47)" rx="2" ry="2" />
<text  x="750.25" y="207.5" ></text>
</g>
<g >
<title>webrtc::RemoteEstimatorProxy::OnPacketArrival(unsigned short, long long, absl::optional&lt;webrtc::FeedbackRequest&gt;) (2 samples, 0.34%)</title><rect x="547.6" y="421" width="4.0" height="15.0" fill="rgb(234,168,17)" rx="2" ry="2" />
<text  x="550.62" y="431.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::DeliverRtp(webrtc::MediaType, rtc::CopyOnWriteBuffer, long long) (28 samples, 4.69%)</title><rect x="504.1" y="469" width="55.4" height="15.0" fill="rgb(235,133,44)" rx="2" ry="2" />
<text  x="507.14" y="479.5" >webrt..</text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (8 samples, 1.34%)</title><rect x="466.6" y="405" width="15.8" height="15.0" fill="rgb(209,197,25)" rx="2" ry="2" />
<text  x="469.58" y="415.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::TakeTaskImpl() (78 samples, 13.07%)</title><rect x="1006.2" y="565" width="154.2" height="15.0" fill="rgb(237,40,26)" rx="2" ry="2" />
<text  x="1009.18" y="575.5" >base::sequence_mana..</text>
</g>
<g >
<title>mojo::internal::SerializationContext::SerializationContext() (1 samples, 0.17%)</title><rect x="725.5" y="373" width="2.0" height="15.0" fill="rgb(219,133,46)" rx="2" ry="2" />
<text  x="728.51" y="383.5" ></text>
</g>
<g >
<title>std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt; std::__Cr::list&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, std::__Cr::allocator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt; &gt; &gt;::__sort&lt;webrtc::ForwardErrorCorrection::SortablePacket::LessThan&gt;(std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt;, std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt;, unsigned long, webrtc::ForwardErrorCorrection::SortablePacket::LessThan&amp;) (2 samples, 0.34%)</title><rect x="409.3" y="309" width="3.9" height="15.0" fill="rgb(239,139,39)" rx="2" ry="2" />
<text  x="412.26" y="319.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="361.8" y="261" width="2.0" height="15.0" fill="rgb(231,58,54)" rx="2" ry="2" />
<text  x="364.83" y="271.5" ></text>
</g>
<g >
<title>base::ObserverList&lt;base::TaskObserver, false, true, base::internal::UncheckedObserverAdapter&gt;::Iter::operator!=(base::ObserverList&lt;base::TaskObserver, false, true, base::internal::UncheckedObserverAdapter&gt;::Iter const&amp;) const (1 samples, 0.17%)</title><rect x="944.9" y="565" width="2.0" height="15.0" fill="rgb(230,201,39)" rx="2" ry="2" />
<text  x="947.91" y="575.5" ></text>
</g>
<g >
<title>webrtc::AudioDecoderOpusImpl::ParsePayload(rtc::BufferT&lt;unsigned char, false&gt;&amp;&amp;, unsigned int) (1 samples, 0.17%)</title><rect x="523.9" y="341" width="2.0" height="15.0" fill="rgb(229,137,24)" rx="2" ry="2" />
<text  x="526.90" y="351.5" ></text>
</g>
<g >
<title>free (2 samples, 0.34%)</title><rect x="148.4" y="549" width="3.9" height="15.0" fill="rgb(228,157,1)" rx="2" ry="2" />
<text  x="151.36" y="559.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="436.9" y="165" width="2.0" height="15.0" fill="rgb(218,52,48)" rx="2" ry="2" />
<text  x="439.93" y="175.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::DeliverRtp(webrtc::MediaType, rtc::CopyOnWriteBuffer, long long) (69 samples, 11.56%)</title><rect x="346.0" y="469" width="136.4" height="15.0" fill="rgb(246,175,1)" rx="2" ry="2" />
<text  x="349.01" y="479.5" >webrtc::internal:..</text>
</g>
<g >
<title>base::Lock::CheckUnheldAndMark() (1 samples, 0.17%)</title><rect x="132.5" y="517" width="2.0" height="15.0" fill="rgb(235,3,5)" rx="2" ry="2" />
<text  x="135.55" y="527.5" ></text>
</g>
<g >
<title>mojo::FilterChain::Accept(mojo::Message*) (73 samples, 12.23%)</title><rect x="713.7" y="485" width="144.2" height="15.0" fill="rgb(206,3,40)" rx="2" ry="2" />
<text  x="716.65" y="495.5" >mojo::FilterChain:..</text>
</g>
<g >
<title>tiny_malloc_should_clear (2 samples, 0.34%)</title><rect x="699.8" y="389" width="4.0" height="15.0" fill="rgb(244,160,37)" rx="2" ry="2" />
<text  x="702.82" y="399.5" ></text>
</g>
<g >
<title>mojo::StructTraits&lt;network::mojom::IPEndPointDataView, net::IPEndPoint&gt;::Read(network::mojom::IPEndPointDataView, net::IPEndPoint*) (1 samples, 0.17%)</title><rect x="788.8" y="373" width="1.9" height="15.0" fill="rgb(209,53,5)" rx="2" ry="2" />
<text  x="791.76" y="383.5" ></text>
</g>
<g >
<title>mach_msg (2 samples, 0.34%)</title><rect x="512.0" y="261" width="4.0" height="15.0" fill="rgb(218,145,41)" rx="2" ry="2" />
<text  x="515.04" y="271.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;::MaybeShrinkQueue() (1 samples, 0.17%)</title><rect x="919.2" y="517" width="2.0" height="15.0" fill="rgb(246,72,11)" rx="2" ry="2" />
<text  x="922.21" y="527.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::GetQueuePriority() const (6 samples, 1.01%)</title><rect x="1085.2" y="549" width="11.9" height="15.0" fill="rgb(229,99,25)" rx="2" ry="2" />
<text  x="1088.24" y="559.5" ></text>
</g>
<g >
<title>base::debug::GlobalActivityTracker::ScopedThreadActivity::~ScopedThreadActivity() (1 samples, 0.17%)</title><rect x="691.9" y="485" width="2.0" height="15.0" fill="rgb(242,83,3)" rx="2" ry="2" />
<text  x="694.91" y="495.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (4 samples, 0.67%)</title><rect x="1057.6" y="501" width="7.9" height="15.0" fill="rgb(231,220,19)" rx="2" ry="2" />
<text  x="1060.57" y="511.5" ></text>
</g>
<g >
<title>srtp_aes_icm_openssl_encrypt (1 samples, 0.17%)</title><rect x="747.3" y="213" width="1.9" height="15.0" fill="rgb(212,39,12)" rx="2" ry="2" />
<text  x="750.25" y="223.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoStreamReceiver::OnAssembledFrame(std::__Cr::unique_ptr&lt;webrtc::video_coding::RtpFrameObject, std::__Cr::default_delete&lt;webrtc::video_coding::RtpFrameObject&gt; &gt;) (6 samples, 1.01%)</title><rect x="427.1" y="309" width="11.8" height="15.0" fill="rgb(220,123,24)" rx="2" ry="2" />
<text  x="430.05" y="319.5" ></text>
</g>
<g >
<title>mojo::Connector::ReadAllAvailableMessages() (106 samples, 17.76%)</title><rect x="699.8" y="517" width="209.5" height="15.0" fill="rgb(207,151,29)" rx="2" ry="2" />
<text  x="702.82" y="527.5" >mojo::Connector::ReadAllAva..</text>
</g>
<g >
<title>base::AlignedAlloc(unsigned long, unsigned long) (1 samples, 0.17%)</title><rect x="308.5" y="229" width="1.9" height="15.0" fill="rgb(239,229,1)" rx="2" ry="2" />
<text  x="311.46" y="239.5" ></text>
</g>
<g >
<title>webrtc::SrtpTransport::OnRtcpPacketReceived(rtc::CopyOnWriteBuffer, long long) (3 samples, 0.50%)</title><rect x="743.3" y="261" width="5.9" height="15.0" fill="rgb(220,123,37)" rx="2" ry="2" />
<text  x="746.30" y="271.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="381.6" y="373" width="2.0" height="15.0" fill="rgb(217,89,52)" rx="2" ry="2" />
<text  x="384.59" y="383.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="703.8" y="469" width="1.9" height="15.0" fill="rgb(246,205,38)" rx="2" ry="2" />
<text  x="706.77" y="479.5" ></text>
</g>
<g >
<title>mojo::core::RequestContext::RequestContext() (1 samples, 0.17%)</title><rect x="306.5" y="293" width="2.0" height="15.0" fill="rgb(221,161,25)" rx="2" ry="2" />
<text  x="309.48" y="303.5" ></text>
</g>
<g >
<title>EVP_EncryptUpdate (2 samples, 0.34%)</title><rect x="197.8" y="421" width="3.9" height="15.0" fill="rgb(216,31,24)" rx="2" ry="2" />
<text  x="200.77" y="431.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="219.5" y="405" width="2.0" height="15.0" fill="rgb(218,128,46)" rx="2" ry="2" />
<text  x="222.51" y="415.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (1 samples, 0.17%)</title><rect x="340.1" y="517" width="2.0" height="15.0" fill="rgb(232,215,49)" rx="2" ry="2" />
<text  x="343.08" y="527.5" ></text>
</g>
<g >
<title>malloc_zone_realloc (1 samples, 0.17%)</title><rect x="245.2" y="245" width="2.0" height="15.0" fill="rgb(209,127,35)" rx="2" ry="2" />
<text  x="248.21" y="255.5" ></text>
</g>
<g >
<title>webrtc::RtpDemuxer::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (14 samples, 2.35%)</title><rect x="519.9" y="437" width="27.7" height="15.0" fill="rgb(251,109,3)" rx="2" ry="2" />
<text  x="522.95" y="447.5" >w..</text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="381.6" y="341" width="2.0" height="15.0" fill="rgb(239,66,14)" rx="2" ry="2" />
<text  x="384.59" y="351.5" ></text>
</g>
<g >
<title>IPC::ParamTraits&lt;unsigned char&gt;::Write(base::Pickle*, unsigned char const&amp;) (1 samples, 0.17%)</title><rect x="239.3" y="309" width="2.0" height="15.0" fill="rgb(222,228,6)" rx="2" ry="2" />
<text  x="242.28" y="319.5" ></text>
</g>
<g >
<title>webrtc::RTPVideoHeader::RTPVideoHeader() (1 samples, 0.17%)</title><rect x="419.1" y="341" width="2.0" height="15.0" fill="rgb(221,37,33)" rx="2" ry="2" />
<text  x="422.15" y="351.5" ></text>
</g>
<g >
<title>content::WebRtcVideoTrackSource::OnFrameCaptured(scoped_refptr&lt;media::VideoFrame&gt;) (4 samples, 0.67%)</title><rect x="678.1" y="549" width="7.9" height="15.0" fill="rgb(214,154,32)" rx="2" ry="2" />
<text  x="681.07" y="559.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoStreamReceiver::OnRecoveredPacket(unsigned char const*, unsigned long) (17 samples, 2.85%)</title><rect x="415.2" y="373" width="33.6" height="15.0" fill="rgb(213,118,22)" rx="2" ry="2" />
<text  x="418.19" y="383.5" >we..</text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (2 samples, 0.34%)</title><rect x="431.0" y="229" width="4.0" height="15.0" fill="rgb(228,62,32)" rx="2" ry="2" />
<text  x="434.01" y="239.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::NotifyDidProcessTask(base::sequence_manager::internal::SequenceManagerImpl::ExecutingTask*, base::sequence_manager::LazyNow*) (7 samples, 1.17%)</title><rect x="950.8" y="581" width="13.9" height="15.0" fill="rgb(243,112,34)" rx="2" ry="2" />
<text  x="953.84" y="591.5" ></text>
</g>
<g >
<title>cricket::StunRequest::OnMessage(rtc::Message*) (1 samples, 0.17%)</title><rect x="634.6" y="437" width="2.0" height="15.0" fill="rgb(211,108,54)" rx="2" ry="2" />
<text  x="637.59" y="447.5" ></text>
</g>
<g >
<title>rtc::AsyncInvoker::DoInvoke(rtc::Location const&amp;, rtc::Thread*, std::__Cr::unique_ptr&lt;rtc::AsyncClosure, std::__Cr::default_delete&lt;rtc::AsyncClosure&gt; &gt;, unsigned int) (1 samples, 0.17%)</title><rect x="771.0" y="181" width="1.9" height="15.0" fill="rgb(238,111,24)" rx="2" ry="2" />
<text  x="773.97" y="191.5" ></text>
</g>
<g >
<title>rtc::CopyOnWriteBuffer::CopyOnWriteBuffer(unsigned long, unsigned long) (1 samples, 0.17%)</title><rect x="97.0" y="309" width="1.9" height="15.0" fill="rgb(239,180,17)" rx="2" ry="2" />
<text  x="99.97" y="319.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (1 samples, 0.17%)</title><rect x="776.9" y="165" width="2.0" height="15.0" fill="rgb(250,33,32)" rx="2" ry="2" />
<text  x="779.90" y="175.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (2 samples, 0.34%)</title><rect x="470.5" y="293" width="4.0" height="15.0" fill="rgb(241,223,35)" rx="2" ry="2" />
<text  x="473.54" y="303.5" ></text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (4 samples, 0.67%)</title><rect x="561.5" y="437" width="7.9" height="15.0" fill="rgb(250,101,48)" rx="2" ry="2" />
<text  x="564.46" y="447.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1166.3" y="597" width="2.0" height="15.0" fill="rgb(230,110,45)" rx="2" ry="2" />
<text  x="1169.28" y="607.5" ></text>
</g>
<g >
<title>mojo::core::ports::Node::GetStatus(mojo::core::ports::PortRef const&amp;, mojo::core::ports::PortStatus*) (1 samples, 0.17%)</title><rect x="257.1" y="245" width="1.9" height="15.0" fill="rgb(230,161,53)" rx="2" ry="2" />
<text  x="260.07" y="255.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (3 samples, 0.50%)</title><rect x="553.6" y="389" width="5.9" height="15.0" fill="rgb(235,9,45)" rx="2" ry="2" />
<text  x="556.55" y="399.5" ></text>
</g>
<g >
<title>mojo::core::NodeChannel::CreateEventMessage(unsigned long, unsigned long, void**, unsigned long) (1 samples, 0.17%)</title><rect x="308.5" y="261" width="1.9" height="15.0" fill="rgb(231,93,52)" rx="2" ry="2" />
<text  x="311.46" y="271.5" ></text>
</g>
<g >
<title>mojo::internal::MultiplexRouter::InterfaceEndpoint::SendMessage(mojo::Message*) (23 samples, 3.85%)</title><rect x="253.1" y="341" width="45.5" height="15.0" fill="rgb(223,33,31)" rx="2" ry="2" />
<text  x="256.12" y="351.5" >mojo..</text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="350.0" y="357" width="1.9" height="15.0" fill="rgb(213,174,32)" rx="2" ry="2" />
<text  x="352.97" y="367.5" ></text>
</g>
<g >
<title>mach_msg_trap (11 samples, 1.84%)</title><rect x="267.0" y="85" width="21.7" height="15.0" fill="rgb(212,80,18)" rx="2" ry="2" />
<text  x="269.95" y="95.5" >m..</text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (2 samples, 0.34%)</title><rect x="796.7" y="293" width="3.9" height="15.0" fill="rgb(248,178,23)" rx="2" ry="2" />
<text  x="799.67" y="303.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (17 samples, 2.85%)</title><rect x="587.2" y="421" width="33.6" height="15.0" fill="rgb(235,68,37)" rx="2" ry="2" />
<text  x="590.15" y="431.5" >ba..</text>
</g>
<g >
<title>DYLD-STUB$$pthread_getspecific (1 samples, 0.17%)</title><rect x="877.7" y="405" width="2.0" height="15.0" fill="rgb(212,182,40)" rx="2" ry="2" />
<text  x="880.71" y="415.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (2 samples, 0.34%)</title><rect x="555.5" y="325" width="4.0" height="15.0" fill="rgb(236,218,54)" rx="2" ry="2" />
<text  x="558.53" y="335.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::OnMessage(rtc::Message*) (93 samples, 15.58%)</title><rect x="156.3" y="533" width="183.8" height="15.0" fill="rgb(208,50,13)" rx="2" ry="2" />
<text  x="159.26" y="543.5" >cricket::BaseChannel::O..</text>
</g>
<g >
<title>base::internal::WorkerThreadStack::Pop() (1 samples, 0.17%)</title><rect x="361.8" y="293" width="2.0" height="15.0" fill="rgb(214,22,47)" rx="2" ry="2" />
<text  x="364.83" y="303.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::DeliverRtcp(webrtc::MediaType, unsigned char const*, unsigned long) (8 samples, 1.34%)</title><rect x="486.3" y="485" width="15.9" height="15.0" fill="rgb(228,147,53)" rx="2" ry="2" />
<text  x="489.35" y="495.5" ></text>
</g>
<g >
<title>cricket::WebRtcVoiceMediaChannel::OnRtcpReceived(rtc::CopyOnWriteBuffer, long long) (8 samples, 1.34%)</title><rect x="559.5" y="501" width="15.8" height="15.0" fill="rgb(228,183,8)" rx="2" ry="2" />
<text  x="562.48" y="511.5" ></text>
</g>
<g >
<title>void base::internal::Invoker&lt;base::internal::BindState&lt;void (mojo::SimpleWatcher::*)(int, unsigned int, mojo::HandleSignalsState const&amp;), base::WeakPtr&lt;mojo::SimpleWatcher&gt;, int, unsigned int, mojo::HandleSignalsState&gt;, void ()&gt;::RunImpl&lt;void (mojo::SimpleWatcher::*)(int, unsigned int, mojo::HandleSignalsState const&amp;), std::__Cr::tuple&lt;base::WeakPtr&lt;mojo::SimpleWatcher&gt;, int, unsigned int, mojo::HandleSignalsState&gt;, 0ul, 1ul, 2ul, 3ul&gt;(void (mojo::SimpleWatcher::*&amp;&amp;)(int, unsigned int, mojo::HandleSignalsState const&amp;), std::__Cr::tuple&lt;base::WeakPtr&lt;mojo::SimpleWatcher&gt;, int, unsigned int, mojo::HandleSignalsState&gt;&amp;&amp;, std::__Cr::integer_sequence&lt;unsigned long, 0ul, 1ul, 2ul, 3ul&gt;) (113 samples, 18.93%)</title><rect x="686.0" y="581" width="223.3" height="15.0" fill="rgb(222,209,37)" rx="2" ry="2" />
<text  x="688.98" y="591.5" >void base::internal::Invoker&lt;..</text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.34%)</title><rect x="470.5" y="261" width="4.0" height="15.0" fill="rgb(219,115,23)" rx="2" ry="2" />
<text  x="473.54" y="271.5" ></text>
</g>
<g >
<title>network::mojom::P2PSocketClientStubDispatch::Accept(network::mojom::P2PSocketClient*, mojo::Message*) (14 samples, 2.35%)</title><rect x="95.0" y="437" width="27.7" height="15.0" fill="rgb(239,170,49)" rx="2" ry="2" />
<text  x="97.99" y="447.5" >n..</text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="693.9" y="517" width="2.0" height="15.0" fill="rgb(247,79,42)" rx="2" ry="2" />
<text  x="696.89" y="527.5" ></text>
</g>
<g >
<title>mach_msg (2 samples, 0.34%)</title><rect x="555.5" y="245" width="4.0" height="15.0" fill="rgb(240,76,5)" rx="2" ry="2" />
<text  x="558.53" y="255.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (2 samples, 0.34%)</title><rect x="512.0" y="325" width="4.0" height="15.0" fill="rgb(214,126,30)" rx="2" ry="2" />
<text  x="515.04" y="335.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::AddRef() const (1 samples, 0.17%)</title><rect x="575.3" y="501" width="2.0" height="15.0" fill="rgb(241,109,37)" rx="2" ry="2" />
<text  x="578.29" y="511.5" ></text>
</g>
<g >
<title>webrtc::TransportFeedbackPacketLossTracker::OnPacketFeedbackVector(std::__Cr::vector&lt;webrtc::PacketFeedback, std::__Cr::allocator&lt;webrtc::PacketFeedback&gt; &gt; const&amp;) (1 samples, 0.17%)</title><rect x="496.2" y="373" width="2.0" height="15.0" fill="rgb(223,50,31)" rx="2" ry="2" />
<text  x="499.23" y="383.5" ></text>
</g>
<g >
<title>non-virtual thunk to webrtc::ReceiveStatisticsImpl::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (1 samples, 0.17%)</title><rect x="387.5" y="405" width="2.0" height="15.0" fill="rgb(220,50,29)" rx="2" ry="2" />
<text  x="390.52" y="415.5" ></text>
</g>
<g >
<title>opus_packet_parse (1 samples, 0.17%)</title><rect x="523.9" y="309" width="2.0" height="15.0" fill="rgb(253,172,15)" rx="2" ry="2" />
<text  x="526.90" y="319.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::RequiresTaskTiming() const (2 samples, 0.34%)</title><rect x="960.7" y="565" width="4.0" height="15.0" fill="rgb(238,14,24)" rx="2" ry="2" />
<text  x="963.72" y="575.5" ></text>
</g>
<g >
<title>mojo::core::ports::SinglePortLocker::~SinglePortLocker() (2 samples, 0.34%)</title><rect x="887.6" y="421" width="3.9" height="15.0" fill="rgb(225,29,25)" rx="2" ry="2" />
<text  x="890.59" y="431.5" ></text>
</g>
<g >
<title>base::internal::CallbackBase::~CallbackBase() (1 samples, 0.17%)</title><rect x="824.3" y="197" width="2.0" height="15.0" fill="rgb(230,93,8)" rx="2" ry="2" />
<text  x="827.34" y="207.5" ></text>
</g>
<g >
<title>base::subtle::TimeTicksNowIgnoringOverride() (1 samples, 0.17%)</title><rect x="1134.7" y="517" width="1.9" height="15.0" fill="rgb(232,153,39)" rx="2" ry="2" />
<text  x="1137.66" y="527.5" ></text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::internal::PriorityQueue::TaskSourceAndSortKey&gt;::FillHole(unsigned long, base::internal::PriorityQueue::TaskSourceAndSortKey&amp;&amp;) (1 samples, 0.17%)</title><rect x="510.1" y="277" width="1.9" height="15.0" fill="rgb(231,164,4)" rx="2" ry="2" />
<text  x="513.07" y="287.5" ></text>
</g>
<g >
<title>(anonymous namespace)::MachAbsoluteTimeToTicks(unsigned long long) (1 samples, 0.17%)</title><rect x="1142.6" y="485" width="1.9" height="15.0" fill="rgb(205,77,10)" rx="2" ry="2" />
<text  x="1145.56" y="495.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::MaintainAtLeastOneIdleWorkerLockRequired(base::internal::ThreadGroupImpl::ScopedWorkersExecutor*) (1 samples, 0.17%)</title><rect x="563.4" y="309" width="2.0" height="15.0" fill="rgb(230,180,3)" rx="2" ry="2" />
<text  x="566.43" y="319.5" ></text>
</g>
<g >
<title>mojo::StructTraits&lt;network::mojom::IPAddressDataView, net::IPAddress&gt;::Read(network::mojom::IPAddressDataView, net::IPAddress*) (1 samples, 0.17%)</title><rect x="788.8" y="357" width="1.9" height="15.0" fill="rgb(226,228,1)" rx="2" ry="2" />
<text  x="791.76" y="367.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (11 samples, 1.84%)</title><rect x="350.0" y="389" width="21.7" height="15.0" fill="rgb(215,150,34)" rx="2" ry="2" />
<text  x="352.97" y="399.5" >b..</text>
</g>
<g >
<title>webrtc::RtcEventLogImpl::Log(std::__Cr::unique_ptr&lt;webrtc::RtcEvent, std::__Cr::default_delete&lt;webrtc::RtcEvent&gt; &gt;) (7 samples, 1.17%)</title><rect x="504.1" y="453" width="13.9" height="15.0" fill="rgb(245,68,46)" rx="2" ry="2" />
<text  x="507.14" y="463.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::NotifyWillProcessTask(base::sequence_manager::internal::SequenceManagerImpl::ExecutingTask*, base::sequence_manager::LazyNow*) (17 samples, 2.85%)</title><rect x="1041.8" y="549" width="33.6" height="15.0" fill="rgb(247,154,44)" rx="2" ry="2" />
<text  x="1044.76" y="559.5" >ba..</text>
</g>
<g >
<title>cricket::BaseChannel::SendPacket(bool, rtc::CopyOnWriteBuffer*, rtc::PacketOptions const&amp;) (88 samples, 14.74%)</title><rect x="164.2" y="517" width="173.9" height="15.0" fill="rgb(224,56,42)" rx="2" ry="2" />
<text  x="167.17" y="527.5" >cricket::BaseChannel::..</text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (2 samples, 0.34%)</title><rect x="1020.0" y="501" width="4.0" height="15.0" fill="rgb(215,83,36)" rx="2" ry="2" />
<text  x="1023.02" y="511.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="652.4" y="485" width="2.0" height="15.0" fill="rgb(225,22,3)" rx="2" ry="2" />
<text  x="655.38" y="495.5" ></text>
</g>
<g >
<title>void base::Pickle::WriteBytesStatic&lt;8ul&gt;(void const*) (1 samples, 0.17%)</title><rect x="247.2" y="325" width="2.0" height="15.0" fill="rgb(211,41,44)" rx="2" ry="2" />
<text  x="250.19" y="335.5" ></text>
</g>
<g >
<title>std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;* logging::CheckNEImpl&lt;(anonymous namespace)::TlsVectorEntry*, void*&gt;((anonymous namespace)::TlsVectorEntry* const&amp;, void* const&amp;, char const*) (1 samples, 0.17%)</title><rect x="792.7" y="325" width="2.0" height="15.0" fill="rgb(228,0,42)" rx="2" ry="2" />
<text  x="795.71" y="335.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1160.4" y="549" width="1.9" height="15.0" fill="rgb(221,41,3)" rx="2" ry="2" />
<text  x="1163.35" y="559.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (2 samples, 0.34%)</title><rect x="134.5" y="517" width="4.0" height="15.0" fill="rgb(219,76,26)" rx="2" ry="2" />
<text  x="137.52" y="527.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::ParseBuffer(unsigned char const*, unsigned long) (1 samples, 0.17%)</title><rect x="377.6" y="437" width="2.0" height="15.0" fill="rgb(254,127,45)" rx="2" ry="2" />
<text  x="380.64" y="447.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.17%)</title><rect x="917.2" y="485" width="2.0" height="15.0" fill="rgb(239,213,35)" rx="2" ry="2" />
<text  x="920.24" y="495.5" ></text>
</g>
<g >
<title>base::internal::BindState&lt;base::internal::IgnoreResultHelper&lt;bool (mojo::Connector::*)()&gt;, base::WeakPtr&lt;mojo::Connector&gt; &gt;* base::internal::BindState&lt;base::internal::IgnoreResultHelper&lt;bool (mojo::Connector::*)()&gt;, base::WeakPtr&lt;mojo::Connector&gt; &gt;::Create&lt;base::internal::IgnoreResultHelper&lt;bool (mojo::Connector::*)()&gt;, base::WeakPtr&lt;mojo::Connector&gt;&amp;&gt;(void (*)(), base::internal::IgnoreResultHelper&lt;bool (mojo::Connector::*)()&gt;&amp;&amp;, base::WeakPtr&lt;mojo::Connector&gt;&amp;&amp;&amp;) (2 samples, 0.34%)</title><rect x="699.8" y="501" width="4.0" height="15.0" fill="rgb(222,67,36)" rx="2" ry="2" />
<text  x="702.82" y="511.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostImmediateTaskImpl(base::sequence_manager::internal::PostedTask, base::sequence_manager::internal::TaskQueueImpl::CurrentThread) (2 samples, 0.34%)</title><rect x="102.9" y="149" width="4.0" height="15.0" fill="rgb(227,146,19)" rx="2" ry="2" />
<text  x="105.90" y="159.5" ></text>
</g>
<g >
<title>std::__Cr::deque&lt;std::__Cr::__map_iterator&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;webrtc::video_coding::VideoLayerFrameId, webrtc::video_coding::FrameBuffer::FrameInfo&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;webrtc::video_coding::VideoLayerFrameId, webrtc::video_coding::FrameBuffer::FrameInfo&gt;, void*&gt;*, long&gt; &gt;, std::__Cr::allocator&lt;std::__Cr::__map_iterator&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;webrtc::video_coding::VideoLayerFrameId, webrtc::video_coding::FrameBuffer::FrameInfo&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;webrtc::video_coding::VideoLayerFrameId, webrtc::video_coding::FrameBuffer::FrameInfo&gt;, void*&gt;*, long&gt; &gt; &gt; &gt;::__add_back_capacity() (1 samples, 0.17%)</title><rect x="436.9" y="213" width="2.0" height="15.0" fill="rgb(237,91,12)" rx="2" ry="2" />
<text  x="439.93" y="223.5" ></text>
</g>
<g >
<title>base::PendingTask::~PendingTask() (1 samples, 0.17%)</title><rect x="85.1" y="597" width="2.0" height="15.0" fill="rgb(223,202,13)" rx="2" ry="2" />
<text  x="88.11" y="607.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (9 samples, 1.51%)</title><rect x="601.0" y="325" width="17.8" height="15.0" fill="rgb(223,170,34)" rx="2" ry="2" />
<text  x="603.99" y="335.5" ></text>
</g>
<g >
<title>base::internal::BindState&lt;void (jingle_glue::JingleThreadWrapper::*)(int), base::WeakPtr&lt;jingle_glue::JingleThreadWrapper&gt;, int&gt;::Destroy(base::internal::BindStateBase const*) (2 samples, 0.34%)</title><rect x="87.1" y="581" width="3.9" height="15.0" fill="rgb(227,223,22)" rx="2" ry="2" />
<text  x="90.09" y="591.5" ></text>
</g>
<g >
<title>base::Lock::CheckHeldAndUnmark() (1 samples, 0.17%)</title><rect x="263.0" y="149" width="2.0" height="15.0" fill="rgb(246,89,23)" rx="2" ry="2" />
<text  x="266.00" y="159.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="377.6" y="341" width="2.0" height="15.0" fill="rgb(231,147,44)" rx="2" ry="2" />
<text  x="380.64" y="351.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.17%)</title><rect x="102.9" y="101" width="2.0" height="15.0" fill="rgb(253,170,34)" rx="2" ry="2" />
<text  x="105.90" y="111.5" ></text>
</g>
<g >
<title>base::Lock::CheckHeldAndUnmark() (1 samples, 0.17%)</title><rect x="1152.4" y="485" width="2.0" height="15.0" fill="rgb(225,119,14)" rx="2" ry="2" />
<text  x="1155.45" y="495.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="834.2" y="133" width="2.0" height="15.0" fill="rgb(212,208,10)" rx="2" ry="2" />
<text  x="837.22" y="143.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() const (5 samples, 0.84%)</title><rect x="1065.5" y="517" width="9.9" height="15.0" fill="rgb(243,135,29)" rx="2" ry="2" />
<text  x="1068.48" y="527.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="120.7" y="261" width="2.0" height="15.0" fill="rgb(223,81,17)" rx="2" ry="2" />
<text  x="123.69" y="271.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (5 samples, 0.84%)</title><rect x="1047.7" y="533" width="9.9" height="15.0" fill="rgb(207,24,52)" rx="2" ry="2" />
<text  x="1050.69" y="543.5" ></text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::internal::PriorityQueue::TaskSourceAndSortKey&gt;::MoveHoleUpAndFillWithElement(unsigned long, base::internal::PriorityQueue::TaskSourceAndSortKey&amp;&amp;) (1 samples, 0.17%)</title><rect x="510.1" y="293" width="1.9" height="15.0" fill="rgb(226,10,28)" rx="2" ry="2" />
<text  x="513.07" y="303.5" ></text>
</g>
<g >
<title>rtc::RateTracker::AddSamples(unsigned long) (1 samples, 0.17%)</title><rect x="114.8" y="357" width="1.9" height="15.0" fill="rgb(229,123,16)" rx="2" ry="2" />
<text  x="117.76" y="367.5" ></text>
</g>
<g >
<title>base::Lock::CheckUnheldAndMark() (1 samples, 0.17%)</title><rect x="863.9" y="437" width="1.9" height="15.0" fill="rgb(215,91,13)" rx="2" ry="2" />
<text  x="866.87" y="447.5" ></text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="187.9" y="245" width="2.0" height="15.0" fill="rgb(252,37,47)" rx="2" ry="2" />
<text  x="190.89" y="255.5" ></text>
</g>
<g >
<title>base::ScopedDeferTaskPosting::~ScopedDeferTaskPosting() (1 samples, 0.17%)</title><rect x="820.4" y="197" width="2.0" height="15.0" fill="rgb(221,66,7)" rx="2" ry="2" />
<text  x="823.39" y="207.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (4 samples, 0.67%)</title><rect x="561.5" y="373" width="7.9" height="15.0" fill="rgb(221,63,19)" rx="2" ry="2" />
<text  x="564.46" y="383.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.34%)</title><rect x="1103.0" y="501" width="4.0" height="15.0" fill="rgb(215,136,17)" rx="2" ry="2" />
<text  x="1106.03" y="511.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueueSets::OnTaskPushedToEmptyQueue(base::sequence_manager::internal::WorkQueue*) (1 samples, 0.17%)</title><rect x="921.2" y="533" width="2.0" height="15.0" fill="rgb(209,182,49)" rx="2" ry="2" />
<text  x="924.19" y="543.5" ></text>
</g>
<g >
<title>base::sequence_manager::LazyNow::Now() (1 samples, 0.17%)</title><rect x="1031.9" y="517" width="2.0" height="15.0" fill="rgb(250,125,32)" rx="2" ry="2" />
<text  x="1034.88" y="527.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroup::PushTaskSourceAndWakeUpWorkersImpl(base::internal::ThreadGroup::BaseScopedWorkersExecutor*, base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (4 samples, 0.67%)</title><rect x="468.6" y="309" width="7.9" height="15.0" fill="rgb(222,177,29)" rx="2" ry="2" />
<text  x="471.56" y="319.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="1081.3" y="517" width="2.0" height="15.0" fill="rgb(252,201,40)" rx="2" ry="2" />
<text  x="1084.29" y="527.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="97.0" y="277" width="1.9" height="15.0" fill="rgb(228,5,46)" rx="2" ry="2" />
<text  x="99.97" y="287.5" ></text>
</g>
<g >
<title>webrtc::RemoteEstimatorProxy::OnPacketArrival(unsigned short, long long, absl::optional&lt;webrtc::FeedbackRequest&gt;) (5 samples, 0.84%)</title><rect x="454.7" y="421" width="9.9" height="15.0" fill="rgb(215,103,16)" rx="2" ry="2" />
<text  x="457.72" y="431.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="1024.0" y="453" width="1.9" height="15.0" fill="rgb(211,173,5)" rx="2" ry="2" />
<text  x="1026.97" y="463.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="778.9" y="165" width="2.0" height="15.0" fill="rgb(241,19,50)" rx="2" ry="2" />
<text  x="781.88" y="175.5" ></text>
</g>
<g >
<title>rtc::IPIsAny(rtc::IPAddress const&amp;) (1 samples, 0.17%)</title><rect x="786.8" y="277" width="2.0" height="15.0" fill="rgb(243,132,12)" rx="2" ry="2" />
<text  x="789.78" y="287.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="393.5" y="373" width="1.9" height="15.0" fill="rgb(254,147,17)" rx="2" ry="2" />
<text  x="396.45" y="383.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="543.7" y="261" width="1.9" height="15.0" fill="rgb(211,140,4)" rx="2" ry="2" />
<text  x="546.67" y="271.5" ></text>
</g>
<g >
<title>webrtc::voe::(anonymous namespace)::ChannelReceive::UpdatePlayoutTimestamp(bool) (4 samples, 0.67%)</title><rect x="539.7" y="405" width="7.9" height="15.0" fill="rgb(240,82,24)" rx="2" ry="2" />
<text  x="542.72" y="415.5" ></text>
</g>
<g >
<title>base::TaskToken::operator==(base::TaskToken const&amp;) const (1 samples, 0.17%)</title><rect x="1067.5" y="485" width="1.9" height="15.0" fill="rgb(246,40,53)" rx="2" ry="2" />
<text  x="1070.45" y="495.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (7 samples, 1.17%)</title><rect x="504.1" y="437" width="13.9" height="15.0" fill="rgb(240,106,43)" rx="2" ry="2" />
<text  x="507.14" y="447.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TraceQueueSize() const (1 samples, 0.17%)</title><rect x="767.0" y="85" width="2.0" height="15.0" fill="rgb(211,178,11)" rx="2" ry="2" />
<text  x="770.02" y="95.5" ></text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="630.6" y="469" width="2.0" height="15.0" fill="rgb(207,71,19)" rx="2" ry="2" />
<text  x="633.64" y="479.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="413.2" y="309" width="2.0" height="15.0" fill="rgb(250,142,54)" rx="2" ry="2" />
<text  x="416.22" y="319.5" ></text>
</g>
<g >
<title>__psynch_mutexwait (1 samples, 0.17%)</title><rect x="102.9" y="69" width="2.0" height="15.0" fill="rgb(214,58,29)" rx="2" ry="2" />
<text  x="105.90" y="79.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1075.4" y="533" width="1.9" height="15.0" fill="rgb(207,7,9)" rx="2" ry="2" />
<text  x="1078.36" y="543.5" ></text>
</g>
<g >
<title>mojo::core::ports::(anonymous namespace)::UpdateTLS(mojo::core::ports::PortLocker*, mojo::core::ports::PortLocker*) (2 samples, 0.34%)</title><rect x="292.6" y="197" width="4.0" height="15.0" fill="rgb(232,142,54)" rx="2" ry="2" />
<text  x="295.65" y="207.5" ></text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (2 samples, 0.34%)</title><rect x="512.0" y="309" width="4.0" height="15.0" fill="rgb(244,113,27)" rx="2" ry="2" />
<text  x="515.04" y="319.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (2 samples, 0.34%)</title><rect x="431.0" y="117" width="4.0" height="15.0" fill="rgb(249,110,35)" rx="2" ry="2" />
<text  x="434.01" y="127.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="634.6" y="309" width="2.0" height="15.0" fill="rgb(239,143,53)" rx="2" ry="2" />
<text  x="637.59" y="319.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() const (4 samples, 0.67%)</title><rect x="931.1" y="581" width="7.9" height="15.0" fill="rgb(209,165,33)" rx="2" ry="2" />
<text  x="934.07" y="591.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkDeduplicator::OnWorkStarted() (5 samples, 0.84%)</title><rect x="1168.3" y="613" width="9.8" height="15.0" fill="rgb(211,49,24)" rx="2" ry="2" />
<text  x="1171.26" y="623.5" ></text>
</g>
<g >
<title>base::Thread::Run(base::RunLoop*) (597 samples, 100.00%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(222,36,13)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >base::Thread::Run(base::RunLoop*)</text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::RunTask(int) (269 samples, 45.06%)</title><rect x="142.4" y="565" width="531.7" height="15.0" fill="rgb(213,117,20)" rx="2" ry="2" />
<text  x="145.43" y="575.5" >jingle_glue::JingleThreadWrapper::RunTask(int)</text>
</g>
<g >
<title>std::__Cr::ostreambuf_iterator&lt;char, std::__Cr::char_traits&lt;char&gt; &gt; std::__Cr::__pad_and_output&lt;char, std::__Cr::char_traits&lt;char&gt; &gt;(std::__Cr::ostreambuf_iterator&lt;char, std::__Cr::char_traits&lt;char&gt; &gt;, char const*, char const*, char const*, std::__Cr::ios_base&amp;, char) (1 samples, 0.17%)</title><rect x="741.3" y="245" width="2.0" height="15.0" fill="rgb(228,2,41)" rx="2" ry="2" />
<text  x="744.32" y="255.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="324.3" y="165" width="1.9" height="15.0" fill="rgb(219,177,37)" rx="2" ry="2" />
<text  x="327.27" y="175.5" ></text>
</g>
<g >
<title>std::__Cr::vector&lt;scoped_refptr&lt;mojo::core::Watch&gt;, base::StackAllocator&lt;scoped_refptr&lt;mojo::core::Watch&gt;, 8ul&gt; &gt;::reserve(unsigned long) (1 samples, 0.17%)</title><rect x="306.5" y="277" width="2.0" height="15.0" fill="rgb(246,194,9)" rx="2" ry="2" />
<text  x="309.48" y="287.5" ></text>
</g>
<g >
<title>mojo::Connector::DispatchMessage(mojo::Message) (76 samples, 12.73%)</title><rect x="707.7" y="501" width="150.2" height="15.0" fill="rgb(230,83,50)" rx="2" ry="2" />
<text  x="710.72" y="511.5" >mojo::Connector::Di..</text>
</g>
<g >
<title>rtc::AdaptedVideoTrackSource::OnFrame(webrtc::VideoFrame const&amp;) (4 samples, 0.67%)</title><rect x="678.1" y="517" width="7.9" height="15.0" fill="rgb(223,70,17)" rx="2" ry="2" />
<text  x="681.07" y="527.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TakeImmediateIncomingQueueTasks(base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;*) (8 samples, 1.34%)</title><rect x="1138.6" y="533" width="15.8" height="15.0" fill="rgb(218,113,31)" rx="2" ry="2" />
<text  x="1141.61" y="543.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.17%)</title><rect x="508.1" y="261" width="2.0" height="15.0" fill="rgb(208,221,26)" rx="2" ry="2" />
<text  x="511.09" y="271.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoStreamReceiver::ReceivePacket(webrtc::RtpPacketReceived const&amp;) (15 samples, 2.51%)</title><rect x="419.1" y="357" width="29.7" height="15.0" fill="rgb(254,171,35)" rx="2" ry="2" />
<text  x="422.15" y="367.5" >we..</text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (2 samples, 0.34%)</title><rect x="431.0" y="197" width="4.0" height="15.0" fill="rgb(240,114,16)" rx="2" ry="2" />
<text  x="434.01" y="207.5" ></text>
</g>
<g >
<title>webrtc::voe::(anonymous namespace)::ChannelSend::ReceivedRTCPPacket(unsigned char const*, unsigned long) (3 samples, 0.50%)</title><rect x="569.4" y="469" width="5.9" height="15.0" fill="rgb(221,115,30)" rx="2" ry="2" />
<text  x="572.36" y="479.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::FindExtension(webrtc::RTPExtensionType) const (1 samples, 0.17%)</title><rect x="519.9" y="389" width="2.0" height="15.0" fill="rgb(245,125,19)" rx="2" ry="2" />
<text  x="522.95" y="399.5" ></text>
</g>
<g >
<title>MojoAppendMessageDataImpl (4 samples, 0.67%)</title><rect x="304.5" y="325" width="7.9" height="15.0" fill="rgb(236,78,54)" rx="2" ry="2" />
<text  x="307.51" y="335.5" ></text>
</g>
<g >
<title>mojo::core::(anonymous namespace)::ChannelMac::MachMessageSendLocked(mach_msg_header_t*) (11 samples, 1.84%)</title><rect x="267.0" y="117" width="21.7" height="15.0" fill="rgb(213,43,34)" rx="2" ry="2" />
<text  x="269.95" y="127.5" >m..</text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="707.7" y="437" width="2.0" height="15.0" fill="rgb(210,59,4)" rx="2" ry="2" />
<text  x="710.72" y="447.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="765.0" y="181" width="2.0" height="15.0" fill="rgb(235,153,37)" rx="2" ry="2" />
<text  x="768.04" y="191.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="106.9" y="181" width="1.9" height="15.0" fill="rgb(233,36,46)" rx="2" ry="2" />
<text  x="109.85" y="191.5" ></text>
</g>
<g >
<title>content::P2PSocketClientImpl::DataReceived(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, base::TimeTicks) (30 samples, 5.03%)</title><rect x="729.5" y="373" width="59.3" height="15.0" fill="rgb(245,84,52)" rx="2" ry="2" />
<text  x="732.46" y="383.5" >conten..</text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="822.4" y="165" width="1.9" height="15.0" fill="rgb(228,29,50)" rx="2" ry="2" />
<text  x="825.36" y="175.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() const (1 samples, 0.17%)</title><rect x="1035.8" y="501" width="2.0" height="15.0" fill="rgb(249,140,30)" rx="2" ry="2" />
<text  x="1038.83" y="511.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (1 samples, 0.17%)</title><rect x="1124.8" y="501" width="2.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1127.77" y="511.5" ></text>
</g>
<g >
<title>base::ObserverList&lt;base::TaskObserver, false, true, base::internal::UncheckedObserverAdapter&gt;::Iter::~Iter() (1 samples, 0.17%)</title><rect x="1043.7" y="533" width="2.0" height="15.0" fill="rgb(217,98,18)" rx="2" ry="2" />
<text  x="1046.74" y="543.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="1039.8" y="501" width="2.0" height="15.0" fill="rgb(213,198,32)" rx="2" ry="2" />
<text  x="1042.78" y="511.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="438.9" y="277" width="2.0" height="15.0" fill="rgb(244,82,41)" rx="2" ry="2" />
<text  x="441.91" y="287.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="355.9" y="293" width="2.0" height="15.0" fill="rgb(239,75,34)" rx="2" ry="2" />
<text  x="358.90" y="303.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Unlock() (1 samples, 0.17%)</title><rect x="867.8" y="405" width="2.0" height="15.0" fill="rgb(248,226,37)" rx="2" ry="2" />
<text  x="870.82" y="415.5" ></text>
</g>
<g >
<title>mojo_base::mojom::internal::TimeTicks_Data::Validate(void const*, mojo::internal::ValidationContext*) (1 samples, 0.17%)</title><rect x="848.1" y="373" width="1.9" height="15.0" fill="rgb(209,216,25)" rx="2" ry="2" />
<text  x="851.06" y="383.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (3 samples, 0.50%)</title><rect x="954.8" y="549" width="5.9" height="15.0" fill="rgb(254,166,15)" rx="2" ry="2" />
<text  x="957.79" y="559.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::ParseBuffer(unsigned char const*, unsigned long) (1 samples, 0.17%)</title><rect x="415.2" y="341" width="2.0" height="15.0" fill="rgb(247,138,11)" rx="2" ry="2" />
<text  x="418.19" y="351.5" ></text>
</g>
<g >
<title>rtc::CriticalSection::Leave() const (1 samples, 0.17%)</title><rect x="846.1" y="277" width="2.0" height="15.0" fill="rgb(247,158,1)" rx="2" ry="2" />
<text  x="849.08" y="287.5" ></text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (1 samples, 0.17%)</title><rect x="571.3" y="261" width="2.0" height="15.0" fill="rgb(228,67,2)" rx="2" ry="2" />
<text  x="574.34" y="271.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="917.2" y="501" width="2.0" height="15.0" fill="rgb(225,119,24)" rx="2" ry="2" />
<text  x="920.24" y="511.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() const (6 samples, 1.01%)</title><rect x="1097.1" y="533" width="11.9" height="15.0" fill="rgb(212,56,3)" rx="2" ry="2" />
<text  x="1100.10" y="543.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="790.7" y="341" width="2.0" height="15.0" fill="rgb(205,162,1)" rx="2" ry="2" />
<text  x="793.74" y="351.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="697.8" y="517" width="2.0" height="15.0" fill="rgb(208,190,42)" rx="2" ry="2" />
<text  x="700.84" y="527.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="810.5" y="325" width="2.0" height="15.0" fill="rgb(251,102,45)" rx="2" ry="2" />
<text  x="813.50" y="335.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (2 samples, 0.34%)</title><rect x="476.5" y="261" width="3.9" height="15.0" fill="rgb(254,5,33)" rx="2" ry="2" />
<text  x="479.47" y="271.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (1 samples, 0.17%)</title><rect x="567.4" y="293" width="2.0" height="15.0" fill="rgb(237,55,53)" rx="2" ry="2" />
<text  x="570.39" y="303.5" ></text>
</g>
<g >
<title>srtp_protect_rtcp_mki (1 samples, 0.17%)</title><rect x="172.1" y="469" width="2.0" height="15.0" fill="rgb(215,107,51)" rx="2" ry="2" />
<text  x="175.08" y="479.5" ></text>
</g>
<g >
<title>cricket::P2PTransportChannel::SendPacket(char const*, unsigned long, rtc::PacketOptions const&amp;, int) (66 samples, 11.06%)</title><rect x="207.7" y="469" width="130.4" height="15.0" fill="rgb(230,111,4)" rx="2" ry="2" />
<text  x="210.65" y="479.5" >cricket::P2PTran..</text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="1140.6" y="517" width="2.0" height="15.0" fill="rgb(208,205,44)" rx="2" ry="2" />
<text  x="1143.59" y="527.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="353.9" y="325" width="2.0" height="15.0" fill="rgb(230,212,2)" rx="2" ry="2" />
<text  x="356.92" y="335.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl::~UserMessageImpl() (1 samples, 0.17%)</title><rect x="122.7" y="421" width="1.9" height="15.0" fill="rgb(218,74,52)" rx="2" ry="2" />
<text  x="125.66" y="431.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (2 samples, 0.34%)</title><rect x="796.7" y="357" width="3.9" height="15.0" fill="rgb(222,187,20)" rx="2" ry="2" />
<text  x="799.67" y="367.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="939.0" y="549" width="2.0" height="15.0" fill="rgb(252,82,42)" rx="2" ry="2" />
<text  x="941.98" y="559.5" ></text>
</g>
<g >
<title>cricket::Connection::OnReadPacket(char const*, unsigned long, long long) (10 samples, 1.68%)</title><rect x="97.0" y="373" width="19.7" height="15.0" fill="rgb(221,96,47)" rx="2" ry="2" />
<text  x="99.97" y="383.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::FindExtension(webrtc::RTPExtensionType) const (1 samples, 0.17%)</title><rect x="464.6" y="421" width="2.0" height="15.0" fill="rgb(218,188,3)" rx="2" ry="2" />
<text  x="467.61" y="431.5" ></text>
</g>
<g >
<title>network::mojom::internal::P2PSocketClient_DataReceived_Params_Data::Validate(void const*, mojo::internal::ValidationContext*) (2 samples, 0.34%)</title><rect x="848.1" y="389" width="3.9" height="15.0" fill="rgb(216,3,27)" rx="2" ry="2" />
<text  x="851.06" y="399.5" ></text>
</g>
<g >
<title>cricket::UDPPort::HandleIncomingPacket(rtc::AsyncPacketSocket*, char const*, unsigned long, rtc::SocketAddress const&amp;, long long) (28 samples, 4.69%)</title><rect x="733.4" y="341" width="55.4" height="15.0" fill="rgb(251,190,36)" rx="2" ry="2" />
<text  x="736.42" y="351.5" >crick..</text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="632.6" y="469" width="2.0" height="15.0" fill="rgb(243,37,34)" rx="2" ry="2" />
<text  x="635.61" y="479.5" ></text>
</g>
<g >
<title>mojo::core::Channel::Message::ExtendPayload(unsigned long) (3 samples, 0.50%)</title><rect x="324.3" y="261" width="5.9" height="15.0" fill="rgb(212,84,33)" rx="2" ry="2" />
<text  x="327.27" y="271.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="917.2" y="517" width="2.0" height="15.0" fill="rgb(254,225,5)" rx="2" ry="2" />
<text  x="920.24" y="527.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="778.9" y="117" width="2.0" height="15.0" fill="rgb(232,134,41)" rx="2" ry="2" />
<text  x="781.88" y="127.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::MoveReadyDelayedTasksToWorkQueue(base::sequence_manager::LazyNow*) (2 samples, 0.34%)</title><rect x="1033.9" y="517" width="3.9" height="15.0" fill="rgb(217,166,23)" rx="2" ry="2" />
<text  x="1036.85" y="527.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::GetClock() (1 samples, 0.17%)</title><rect x="83.1" y="581" width="2.0" height="15.0" fill="rgb(252,72,17)" rx="2" ry="2" />
<text  x="86.13" y="591.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::DemuxPacket(rtc::CopyOnWriteBuffer, long long) (6 samples, 1.01%)</title><rect x="102.9" y="293" width="11.9" height="15.0" fill="rgb(216,208,44)" rx="2" ry="2" />
<text  x="105.90" y="303.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="565.4" y="277" width="2.0" height="15.0" fill="rgb(217,131,47)" rx="2" ry="2" />
<text  x="568.41" y="287.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="721.6" y="389" width="1.9" height="15.0" fill="rgb(252,77,10)" rx="2" ry="2" />
<text  x="724.56" y="399.5" ></text>
</g>
<g >
<title>__psynch_mutexwait (1 samples, 0.17%)</title><rect x="561.5" y="261" width="1.9" height="15.0" fill="rgb(254,122,43)" rx="2" ry="2" />
<text  x="564.46" y="271.5" ></text>
</g>
<g >
<title>mojo::Connector::Accept(mojo::Message*) (4 samples, 0.67%)</title><rect x="180.0" y="325" width="7.9" height="15.0" fill="rgb(252,93,16)" rx="2" ry="2" />
<text  x="182.98" y="335.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="1138.6" y="517" width="2.0" height="15.0" fill="rgb(223,162,7)" rx="2" ry="2" />
<text  x="1141.61" y="527.5" ></text>
</g>
<g >
<title>base::SequenceToken::IsValid() const (1 samples, 0.17%)</title><rect x="686.0" y="533" width="2.0" height="15.0" fill="rgb(219,125,41)" rx="2" ry="2" />
<text  x="688.98" y="543.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="688.0" y="517" width="1.9" height="15.0" fill="rgb(248,174,24)" rx="2" ry="2" />
<text  x="690.96" y="527.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="381.6" y="357" width="2.0" height="15.0" fill="rgb(248,127,43)" rx="2" ry="2" />
<text  x="384.59" y="367.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="502.2" y="485" width="1.9" height="15.0" fill="rgb(234,41,50)" rx="2" ry="2" />
<text  x="505.16" y="495.5" ></text>
</g>
<g >
<title>base::sequence_manager::LazyNow::Now() (2 samples, 0.34%)</title><rect x="923.2" y="549" width="3.9" height="15.0" fill="rgb(226,30,15)" rx="2" ry="2" />
<text  x="926.17" y="559.5" ></text>
</g>
<g >
<title>pthread_equal (1 samples, 0.17%)</title><rect x="395.4" y="357" width="2.0" height="15.0" fill="rgb(227,26,6)" rx="2" ry="2" />
<text  x="398.43" y="367.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="436.9" y="197" width="2.0" height="15.0" fill="rgb(205,214,32)" rx="2" ry="2" />
<text  x="439.93" y="207.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (2 samples, 0.34%)</title><rect x="1110.9" y="533" width="4.0" height="15.0" fill="rgb(252,2,49)" rx="2" ry="2" />
<text  x="1113.94" y="543.5" ></text>
</g>
<g >
<title>_CFAutoreleasePoolPop (1 samples, 0.17%)</title><rect x="19.9" y="613" width="2.0" height="15.0" fill="rgb(235,162,47)" rx="2" ry="2" />
<text  x="22.88" y="623.5" ></text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="146.4" y="533" width="2.0" height="15.0" fill="rgb(228,81,23)" rx="2" ry="2" />
<text  x="149.38" y="543.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (8 samples, 1.34%)</title><rect x="466.6" y="341" width="15.8" height="15.0" fill="rgb(229,221,16)" rx="2" ry="2" />
<text  x="469.58" y="351.5" ></text>
</g>
<g >
<title>mojo::core::Core::AppendMessageData(unsigned long, unsigned int, unsigned int const*, unsigned int, MojoAppendMessageDataOptions const*, void**, unsigned int*) (4 samples, 0.67%)</title><rect x="304.5" y="309" width="7.9" height="15.0" fill="rgb(228,209,47)" rx="2" ry="2" />
<text  x="307.51" y="319.5" ></text>
</g>
<g >
<title>mojo::core::Core::DestroyMessage(unsigned long) (1 samples, 0.17%)</title><rect x="122.7" y="453" width="1.9" height="15.0" fill="rgb(220,27,54)" rx="2" ry="2" />
<text  x="125.66" y="463.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="836.2" y="245" width="2.0" height="15.0" fill="rgb(207,219,24)" rx="2" ry="2" />
<text  x="839.20" y="255.5" ></text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="492.3" y="325" width="2.0" height="15.0" fill="rgb(205,112,50)" rx="2" ry="2" />
<text  x="495.28" y="335.5" ></text>
</g>
<g >
<title>webrtc::ForwardErrorCorrection::DecodeFec(webrtc::ForwardErrorCorrection::ReceivedPacket const&amp;, std::__Cr::list&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, std::__Cr::allocator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt; &gt; &gt;*) (8 samples, 1.34%)</title><rect x="397.4" y="373" width="15.8" height="15.0" fill="rgb(239,32,39)" rx="2" ry="2" />
<text  x="400.40" y="383.5" ></text>
</g>
<g >
<title>(anonymous namespace)::MachAbsoluteTimeToTicks(unsigned long long) (1 samples, 0.17%)</title><rect x="925.1" y="517" width="2.0" height="15.0" fill="rgb(253,15,12)" rx="2" ry="2" />
<text  x="928.14" y="527.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::AtomicFlagSet::RunActiveCallbacks() const (10 samples, 1.68%)</title><rect x="1010.1" y="549" width="19.8" height="15.0" fill="rgb(206,62,15)" rx="2" ry="2" />
<text  x="1013.13" y="559.5" ></text>
</g>
<g >
<title>mojo::SimpleWatcher::ArmOrNotify() (1 samples, 0.17%)</title><rect x="907.4" y="501" width="1.9" height="15.0" fill="rgb(250,134,2)" rx="2" ry="2" />
<text  x="910.35" y="511.5" ></text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (3 samples, 0.50%)</title><rect x="476.5" y="293" width="5.9" height="15.0" fill="rgb(241,215,18)" rx="2" ry="2" />
<text  x="479.47" y="303.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="543.7" y="245" width="1.9" height="15.0" fill="rgb(214,34,42)" rx="2" ry="2" />
<text  x="546.67" y="255.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::NotifyWillProcessTask(base::PendingTask const&amp;) (4 samples, 0.67%)</title><rect x="1057.6" y="533" width="7.9" height="15.0" fill="rgb(228,92,21)" rx="2" ry="2" />
<text  x="1060.57" y="543.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="377.6" y="373" width="2.0" height="15.0" fill="rgb(250,150,30)" rx="2" ry="2" />
<text  x="380.64" y="383.5" ></text>
</g>
<g >
<title>non-virtual thunk to base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoSomeWork() (1 samples, 0.17%)</title><rect x="1182.1" y="629" width="2.0" height="15.0" fill="rgb(234,161,4)" rx="2" ry="2" />
<text  x="1185.09" y="639.5" ></text>
</g>
<g >
<title>std::__Cr::pair&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, void*&gt;*, long&gt;, bool&gt; std::__Cr::__tree&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::__map_value_compare&lt;int, std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::less&lt;int&gt;, true&gt;, std::__Cr::allocator&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt; &gt; &gt;::__emplace_unique_key_args&lt;int, std::__Cr::pair&lt;int, rtc::Message&gt; &gt;(int const&amp;, std::__Cr::pair&lt;int, rtc::Message&gt;&amp;&amp;) (2 samples, 0.34%)</title><rect x="832.2" y="245" width="4.0" height="15.0" fill="rgb(205,186,26)" rx="2" ry="2" />
<text  x="835.24" y="255.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="808.5" y="325" width="2.0" height="15.0" fill="rgb(245,175,19)" rx="2" ry="2" />
<text  x="811.53" y="335.5" ></text>
</g>
<g >
<title>cricket::P2PTransportChannel::OnReadPacket(cricket::Connection*, char const*, unsigned long, long long) (24 samples, 4.02%)</title><rect x="733.4" y="309" width="47.5" height="15.0" fill="rgb(245,105,46)" rx="2" ry="2" />
<text  x="736.42" y="319.5" >cric..</text>
</g>
<g >
<title>std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, void*&gt;*, long&gt; std::__Cr::__tree&lt;std::__Cr::__value_type&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, std::__Cr::__map_value_compare&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::__value_type&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, std::__Cr::less&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, true&gt;, std::__Cr::allocator&lt;std::__Cr::__value_type&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__emplace_hint_unique_key_args&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::pair&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; const, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt; const&amp;&gt;(std::__Cr::__tree_const_iterator&lt;std::__Cr::__value_type&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, void*&gt;*, long&gt;, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; const&amp;, std::__Cr::pair&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; const, std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt; const&amp;&amp;&amp;) (1 samples, 0.17%)</title><rect x="543.7" y="341" width="1.9" height="15.0" fill="rgb(248,15,6)" rx="2" ry="2" />
<text  x="546.67" y="351.5" ></text>
</g>
<g >
<title>aes_ctr_cipher (1 samples, 0.17%)</title><rect x="747.3" y="181" width="1.9" height="15.0" fill="rgb(243,73,31)" rx="2" ry="2" />
<text  x="750.25" y="191.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::OnReadPacket(rtc::PacketTransportInternal*, char const*, unsigned long, long long const&amp;, int) (9 samples, 1.51%)</title><rect x="97.0" y="325" width="17.8" height="15.0" fill="rgb(219,43,33)" rx="2" ry="2" />
<text  x="99.97" y="335.5" ></text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="808.5" y="309" width="2.0" height="15.0" fill="rgb(232,116,9)" rx="2" ry="2" />
<text  x="811.53" y="319.5" ></text>
</g>
<g >
<title>mojo::InterfaceEndpointClient::HandleValidatedMessage(mojo::Message*) (14 samples, 2.35%)</title><rect x="95.0" y="453" width="27.7" height="15.0" fill="rgb(245,175,46)" rx="2" ry="2" />
<text  x="97.99" y="463.5" >m..</text>
</g>
<g >
<title>mojo::core::ports::(anonymous namespace)::UpdateTLS(mojo::core::ports::PortLocker*, mojo::core::ports::PortLocker*) (1 samples, 0.17%)</title><rect x="257.1" y="213" width="1.9" height="15.0" fill="rgb(227,63,17)" rx="2" ry="2" />
<text  x="260.07" y="223.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.17%)</title><rect x="998.3" y="565" width="2.0" height="15.0" fill="rgb(237,76,41)" rx="2" ry="2" />
<text  x="1001.27" y="575.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="790.7" y="325" width="2.0" height="15.0" fill="rgb(222,162,18)" rx="2" ry="2" />
<text  x="793.74" y="335.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueueSets::GetOldestQueueAndEnqueueOrderInSet(unsigned long, base::sequence_manager::internal::EnqueueOrder*) const (3 samples, 0.50%)</title><rect x="1114.9" y="533" width="5.9" height="15.0" fill="rgb(247,189,40)" rx="2" ry="2" />
<text  x="1117.89" y="543.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueSelector::GetHighestPendingPriority() const (3 samples, 0.50%)</title><rect x="939.0" y="581" width="5.9" height="15.0" fill="rgb(250,21,33)" rx="2" ry="2" />
<text  x="941.98" y="591.5" ></text>
</g>
<g >
<title>mojo::core::ports::UserMessageEvent::~UserMessageEvent() (1 samples, 0.17%)</title><rect x="122.7" y="437" width="1.9" height="15.0" fill="rgb(220,118,50)" rx="2" ry="2" />
<text  x="125.66" y="447.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="790.7" y="357" width="2.0" height="15.0" fill="rgb(230,51,41)" rx="2" ry="2" />
<text  x="793.74" y="367.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="97.0" y="245" width="1.9" height="15.0" fill="rgb(240,193,36)" rx="2" ry="2" />
<text  x="99.97" y="255.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="1022.0" y="485" width="2.0" height="15.0" fill="rgb(211,166,23)" rx="2" ry="2" />
<text  x="1024.99" y="495.5" ></text>
</g>
<g >
<title>base::Lock::CheckUnheldAndMark() (1 samples, 0.17%)</title><rect x="942.9" y="549" width="2.0" height="15.0" fill="rgb(254,5,20)" rx="2" ry="2" />
<text  x="945.93" y="559.5" ></text>
</g>
<g >
<title>content::(anonymous namespace)::IpcPacketSocket::OnSendComplete(network::P2PSendPacketMetrics const&amp;) (21 samples, 3.52%)</title><rect x="806.5" y="357" width="41.6" height="15.0" fill="rgb(220,84,27)" rx="2" ry="2" />
<text  x="809.55" y="367.5" >con..</text>
</g>
<g >
<title>mojo::MessageHandle::Close() (2 samples, 0.34%)</title><rect x="854.0" y="437" width="3.9" height="15.0" fill="rgb(206,169,42)" rx="2" ry="2" />
<text  x="856.99" y="447.5" ></text>
</g>
<g >
<title>tiny_size (1 samples, 0.17%)</title><rect x="630.6" y="453" width="2.0" height="15.0" fill="rgb(244,228,21)" rx="2" ry="2" />
<text  x="633.64" y="463.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (2 samples, 0.34%)</title><rect x="431.0" y="149" width="4.0" height="15.0" fill="rgb(227,200,53)" rx="2" ry="2" />
<text  x="434.01" y="159.5" ></text>
</g>
<g >
<title>(anonymous namespace)::MachAbsoluteTimeToTicks(unsigned long long) (1 samples, 0.17%)</title><rect x="21.9" y="597" width="1.9" height="15.0" fill="rgb(225,223,13)" rx="2" ry="2" />
<text  x="24.86" y="607.5" ></text>
</g>
<g >
<title>webrtc::StreamStatisticianImpl::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (1 samples, 0.17%)</title><rect x="521.9" y="405" width="2.0" height="15.0" fill="rgb(232,24,21)" rx="2" ry="2" />
<text  x="524.93" y="415.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::RecordCrashKeys(base::PendingTask const&amp;) (1 samples, 0.17%)</title><rect x="1045.7" y="533" width="2.0" height="15.0" fill="rgb(243,211,54)" rx="2" ry="2" />
<text  x="1048.71" y="543.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="118.7" y="309" width="2.0" height="15.0" fill="rgb(254,204,5)" rx="2" ry="2" />
<text  x="121.71" y="319.5" ></text>
</g>
<g >
<title>network::mojom::P2PSocketClientStubDispatch::Accept(network::mojom::P2PSocketClient*, mojo::Message*) (61 samples, 10.22%)</title><rect x="727.5" y="389" width="120.6" height="15.0" fill="rgb(236,150,39)" rx="2" ry="2" />
<text  x="730.49" y="399.5" >network::mojom:..</text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="634.6" y="341" width="2.0" height="15.0" fill="rgb(221,126,44)" rx="2" ry="2" />
<text  x="637.59" y="351.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (11 samples, 1.84%)</title><rect x="350.0" y="373" width="21.7" height="15.0" fill="rgb(219,174,21)" rx="2" ry="2" />
<text  x="352.97" y="383.5" >b..</text>
</g>
<g >
<title>base::WaitableEvent::Signal() (7 samples, 1.17%)</title><rect x="656.3" y="485" width="13.9" height="15.0" fill="rgb(251,168,0)" rx="2" ry="2" />
<text  x="659.33" y="495.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="120.7" y="245" width="2.0" height="15.0" fill="rgb(232,39,54)" rx="2" ry="2" />
<text  x="123.69" y="255.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (6 samples, 1.01%)</title><rect x="504.1" y="373" width="11.9" height="15.0" fill="rgb(215,47,6)" rx="2" ry="2" />
<text  x="507.14" y="383.5" ></text>
</g>
<g >
<title>base::internal::WorkerThreadStack::Pop() (1 samples, 0.17%)</title><rect x="468.6" y="277" width="1.9" height="15.0" fill="rgb(224,13,52)" rx="2" ry="2" />
<text  x="471.56" y="287.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::DelayTillNextTask(base::sequence_manager::LazyNow*) const (15 samples, 2.51%)</title><rect x="915.3" y="597" width="29.6" height="15.0" fill="rgb(226,38,22)" rx="2" ry="2" />
<text  x="918.26" y="607.5" >ba..</text>
</g>
<g >
<title>mojo::core::Core::WriteMessage(unsigned int, unsigned long, MojoWriteMessageOptions const*) (4 samples, 0.67%)</title><rect x="180.0" y="293" width="7.9" height="15.0" fill="rgb(248,84,46)" rx="2" ry="2" />
<text  x="182.98" y="303.5" ></text>
</g>
<g >
<title>mojo::core::MessagePipeDispatcher::WriteMessage(std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (22 samples, 3.69%)</title><rect x="255.1" y="277" width="43.5" height="15.0" fill="rgb(207,220,30)" rx="2" ry="2" />
<text  x="258.09" y="287.5" >mojo..</text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.17%)</title><rect x="355.9" y="277" width="2.0" height="15.0" fill="rgb(236,205,8)" rx="2" ry="2" />
<text  x="358.90" y="287.5" ></text>
</g>
<g >
<title>webrtc::RtpStreamReceiverController::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (35 samples, 5.86%)</title><rect x="383.6" y="453" width="69.1" height="15.0" fill="rgb(214,56,21)" rx="2" ry="2" />
<text  x="386.57" y="463.5" >webrtc:..</text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1025.9" y="453" width="2.0" height="15.0" fill="rgb(239,4,12)" rx="2" ry="2" />
<text  x="1028.95" y="463.5" ></text>
</g>
<g >
<title>unsigned long std::__Cr::__tree&lt;webrtc::RtpPacketHistory::StoredPacket*, webrtc::RtpPacketHistory::MoreUseful, std::__Cr::allocator&lt;webrtc::RtpPacketHistory::StoredPacket*&gt; &gt;::__erase_unique&lt;webrtc::RtpPacketHistory::StoredPacket*&gt;(webrtc::RtpPacketHistory::StoredPacket* const&amp;) (1 samples, 0.17%)</title><rect x="492.3" y="341" width="2.0" height="15.0" fill="rgb(222,142,41)" rx="2" ry="2" />
<text  x="495.28" y="351.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoSender::OnPacketFeedbackVector(std::__Cr::vector&lt;webrtc::PacketFeedback, std::__Cr::allocator&lt;webrtc::PacketFeedback&gt; &gt; const&amp;) (2 samples, 0.34%)</title><rect x="490.3" y="389" width="4.0" height="15.0" fill="rgb(222,73,18)" rx="2" ry="2" />
<text  x="493.30" y="399.5" ></text>
</g>
<g >
<title>MojoWriteMessage (23 samples, 3.85%)</title><rect x="253.1" y="309" width="45.5" height="15.0" fill="rgb(248,139,17)" rx="2" ry="2" />
<text  x="256.12" y="319.5" >Mojo..</text>
</g>
<g >
<title>std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;* logging::CheckNEImpl&lt;(anonymous namespace)::TlsVectorEntry*, void*&gt;((anonymous namespace)::TlsVectorEntry* const&amp;, void* const&amp;, char const*) (1 samples, 0.17%)</title><rect x="136.5" y="485" width="2.0" height="15.0" fill="rgb(214,32,22)" rx="2" ry="2" />
<text  x="139.50" y="495.5" ></text>
</g>
<g >
<title>content::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::OnVideoFrameOnWorkerThread(scoped_refptr&lt;media::VideoFrame&gt;) (4 samples, 0.67%)</title><rect x="678.1" y="565" width="7.9" height="15.0" fill="rgb(227,157,16)" rx="2" ry="2" />
<text  x="681.07" y="575.5" ></text>
</g>
<g >
<title>content::(anonymous namespace)::IpcPacketSocket::OnDataReceived(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, base::TimeTicks const&amp;) (10 samples, 1.68%)</title><rect x="97.0" y="405" width="19.7" height="15.0" fill="rgb(224,57,24)" rx="2" ry="2" />
<text  x="99.97" y="415.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (1 samples, 0.17%)</title><rect x="571.3" y="293" width="2.0" height="15.0" fill="rgb(207,160,46)" rx="2" ry="2" />
<text  x="574.34" y="303.5" ></text>
</g>
<g >
<title>base::allocator::(anonymous namespace)::MallocImpl(base::allocator::AllocatorDispatch const*, unsigned long, void*) (1 samples, 0.17%)</title><rect x="583.2" y="421" width="2.0" height="15.0" fill="rgb(232,119,12)" rx="2" ry="2" />
<text  x="586.20" y="431.5" ></text>
</g>
<g >
<title>webrtc::voe::(anonymous namespace)::ChannelReceive::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (14 samples, 2.35%)</title><rect x="519.9" y="421" width="27.7" height="15.0" fill="rgb(220,147,31)" rx="2" ry="2" />
<text  x="522.95" y="431.5" >w..</text>
</g>
<g >
<title>webrtc::RTCPReceiver::TriggerCallbacksFromRtcpPacket(webrtc::RTCPReceiver::PacketInformation const&amp;) (8 samples, 1.34%)</title><rect x="486.3" y="437" width="15.9" height="15.0" fill="rgb(234,26,14)" rx="2" ry="2" />
<text  x="489.35" y="447.5" ></text>
</g>
<g >
<title>tiny_free_list_add_ptr (1 samples, 0.17%)</title><rect x="328.2" y="229" width="2.0" height="15.0" fill="rgb(233,192,44)" rx="2" ry="2" />
<text  x="331.22" y="239.5" ></text>
</g>
<g >
<title>mojo::internal::ArraySerializer&lt;mojo::ArrayDataView&lt;signed char&gt;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt;, mojo::internal::ArrayIterator&lt;mojo::ArrayTraits&lt;std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; &gt;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt;, false&gt;, void&gt;::DeserializeElements(mojo::internal::Array_Data&lt;signed char&gt;*, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt;*, mojo::internal::SerializationContext*) (1 samples, 0.17%)</title><rect x="790.7" y="373" width="2.0" height="15.0" fill="rgb(241,62,42)" rx="2" ry="2" />
<text  x="793.74" y="383.5" ></text>
</g>
<g >
<title>aes_ctr_cipher (2 samples, 0.34%)</title><rect x="197.8" y="405" width="3.9" height="15.0" fill="rgb(241,68,39)" rx="2" ry="2" />
<text  x="200.77" y="415.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="889.6" y="405" width="1.9" height="15.0" fill="rgb(240,97,5)" rx="2" ry="2" />
<text  x="892.56" y="415.5" ></text>
</g>
<g >
<title>mojo::internal::NativeStructSerializerImpl&lt;network::P2PSendPacketMetrics&gt;::Deserialize(mojo::native::internal::NativeStruct_Data*, network::P2PSendPacketMetrics*, mojo::internal::SerializationContext*) (2 samples, 0.34%)</title><rect x="800.6" y="373" width="4.0" height="15.0" fill="rgb(214,110,13)" rx="2" ry="2" />
<text  x="803.62" y="383.5" ></text>
</g>
<g >
<title>webrtc::RTCPReceiver::ParseCompoundPacket(unsigned char const*, unsigned char const*, webrtc::RTCPReceiver::PacketInformation*) (1 samples, 0.17%)</title><rect x="569.4" y="437" width="1.9" height="15.0" fill="rgb(206,127,38)" rx="2" ry="2" />
<text  x="572.36" y="447.5" ></text>
</g>
<g >
<title>rtc::TimeMillis() (2 samples, 0.34%)</title><rect x="780.9" y="309" width="3.9" height="15.0" fill="rgb(243,10,47)" rx="2" ry="2" />
<text  x="783.85" y="319.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.17%)</title><rect x="324.3" y="229" width="1.9" height="15.0" fill="rgb(207,0,43)" rx="2" ry="2" />
<text  x="327.27" y="239.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (19 samples, 3.18%)</title><rect x="585.2" y="437" width="37.5" height="15.0" fill="rgb(213,108,48)" rx="2" ry="2" />
<text  x="588.18" y="447.5" >bas..</text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1035.8" y="485" width="2.0" height="15.0" fill="rgb(251,169,12)" rx="2" ry="2" />
<text  x="1038.83" y="495.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="899.4" y="453" width="2.0" height="15.0" fill="rgb(232,121,54)" rx="2" ry="2" />
<text  x="902.45" y="463.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueue::TakeTaskFromWorkQueue() (16 samples, 2.68%)</title><rect x="1128.7" y="549" width="31.7" height="15.0" fill="rgb(221,161,9)" rx="2" ry="2" />
<text  x="1131.73" y="559.5" >ba..</text>
</g>
<g >
<title>std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;* logging::CheckNEImpl&lt;(anonymous namespace)::TlsVectorEntry*, void*&gt;((anonymous namespace)::TlsVectorEntry* const&amp;, void* const&amp;, char const*) (1 samples, 0.17%)</title><rect x="1065.5" y="453" width="2.0" height="15.0" fill="rgb(220,172,14)" rx="2" ry="2" />
<text  x="1068.48" y="463.5" ></text>
</g>
<g >
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="741.3" y="213" width="2.0" height="15.0" fill="rgb(237,177,39)" rx="2" ry="2" />
<text  x="744.32" y="223.5" ></text>
</g>
<g >
<title>mojo::internal::MessageDispatchContext::~MessageDispatchContext() (4 samples, 0.67%)</title><rect x="792.7" y="373" width="7.9" height="15.0" fill="rgb(248,225,49)" rx="2" ry="2" />
<text  x="795.71" y="383.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl::FinalizeEventMessage(std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (1 samples, 0.17%)</title><rect x="185.9" y="181" width="2.0" height="15.0" fill="rgb(221,75,54)" rx="2" ry="2" />
<text  x="188.91" y="191.5" ></text>
</g>
<g >
<title>srtp_aes_icm_openssl_encrypt (1 samples, 0.17%)</title><rect x="753.2" y="213" width="2.0" height="15.0" fill="rgb(212,19,16)" rx="2" ry="2" />
<text  x="756.18" y="223.5" ></text>
</g>
<g >
<title>webrtc::SrtpTransport::SendRtpPacket(rtc::CopyOnWriteBuffer*, rtc::PacketOptions const&amp;, int) (75 samples, 12.56%)</title><rect x="189.9" y="501" width="148.2" height="15.0" fill="rgb(231,158,27)" rx="2" ry="2" />
<text  x="192.87" y="511.5" >webrtc::SrtpTransp..</text>
</g>
<g >
<title>mojo::core::UserMessageImpl::~UserMessageImpl() (1 samples, 0.17%)</title><rect x="856.0" y="373" width="1.9" height="15.0" fill="rgb(248,5,35)" rx="2" ry="2" />
<text  x="858.96" y="383.5" ></text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (3 samples, 0.50%)</title><rect x="553.6" y="405" width="5.9" height="15.0" fill="rgb(209,142,14)" rx="2" ry="2" />
<text  x="556.55" y="415.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (3 samples, 0.50%)</title><rect x="680.1" y="405" width="5.9" height="15.0" fill="rgb(223,227,54)" rx="2" ry="2" />
<text  x="683.05" y="415.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="543.7" y="293" width="1.9" height="15.0" fill="rgb(231,201,43)" rx="2" ry="2" />
<text  x="546.67" y="303.5" ></text>
</g>
<g >
<title>std::__Cr::vector&lt;char, std::__Cr::allocator&lt;char&gt; &gt;::__append(unsigned long) (1 samples, 0.17%)</title><rect x="205.7" y="485" width="2.0" height="15.0" fill="rgb(245,43,19)" rx="2" ry="2" />
<text  x="208.68" y="495.5" ></text>
</g>
<g >
<title>rtc::CopyOnWriteBuffer::CopyOnWriteBuffer(unsigned long) (2 samples, 0.34%)</title><rect x="379.6" y="421" width="4.0" height="15.0" fill="rgb(250,147,41)" rx="2" ry="2" />
<text  x="382.61" y="431.5" ></text>
</g>
<g >
<title>mach_msg_trap (2 samples, 0.34%)</title><rect x="670.2" y="453" width="3.9" height="15.0" fill="rgb(208,192,43)" rx="2" ry="2" />
<text  x="673.17" y="463.5" ></text>
</g>
<g >
<title>mojo::internal::ValidateStructHeaderAndClaimMemory(void const*, mojo::internal::ValidationContext*) (1 samples, 0.17%)</title><rect x="848.1" y="357" width="1.9" height="15.0" fill="rgb(210,45,7)" rx="2" ry="2" />
<text  x="851.06" y="367.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (2 samples, 0.34%)</title><rect x="699.8" y="405" width="4.0" height="15.0" fill="rgb(250,75,27)" rx="2" ry="2" />
<text  x="702.82" y="415.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="543.7" y="309" width="1.9" height="15.0" fill="rgb(233,63,52)" rx="2" ry="2" />
<text  x="546.67" y="319.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1124.8" y="469" width="2.0" height="15.0" fill="rgb(212,9,5)" rx="2" ry="2" />
<text  x="1127.77" y="479.5" ></text>
</g>
<g >
<title>SHA1_Update (1 samples, 0.17%)</title><rect x="755.2" y="181" width="1.9" height="15.0" fill="rgb(222,218,0)" rx="2" ry="2" />
<text  x="758.16" y="191.5" ></text>
</g>
<g >
<title>non-virtual thunk to content::P2PSocketClientImpl::SendComplete(network::P2PSendPacketMetrics const&amp;) (3 samples, 0.50%)</title><rect x="116.7" y="421" width="6.0" height="15.0" fill="rgb(240,129,28)" rx="2" ry="2" />
<text  x="119.73" y="431.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::~RtpPacket() (1 samples, 0.17%)</title><rect x="417.2" y="357" width="1.9" height="15.0" fill="rgb(221,52,3)" rx="2" ry="2" />
<text  x="420.17" y="367.5" ></text>
</g>
<g >
<title>bool base::internal::QueryCancellationTraits&lt;base::internal::BindState&lt;void (jingle_glue::JingleThreadWrapper::*)(int), base::WeakPtr&lt;jingle_glue::JingleThreadWrapper&gt;, int&gt; &gt;(base::internal::BindStateBase const*, base::internal::BindStateBase::CancellationQueryMode) (1 samples, 0.17%)</title><rect x="1033.9" y="485" width="1.9" height="15.0" fill="rgb(228,14,6)" rx="2" ry="2" />
<text  x="1036.85" y="495.5" ></text>
</g>
<g >
<title>base::mac::ScopedNSAutoreleasePool::ScopedNSAutoreleasePool() (1 samples, 0.17%)</title><rect x="77.2" y="629" width="2.0" height="15.0" fill="rgb(211,113,30)" rx="2" ry="2" />
<text  x="80.20" y="639.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (14 samples, 2.35%)</title><rect x="591.1" y="389" width="27.7" height="15.0" fill="rgb(229,60,4)" rx="2" ry="2" />
<text  x="594.11" y="399.5" >b..</text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueueSets::OnQueuesFrontTaskChanged(base::sequence_manager::internal::WorkQueue*) (3 samples, 0.50%)</title><rect x="1154.4" y="533" width="6.0" height="15.0" fill="rgb(240,37,27)" rx="2" ry="2" />
<text  x="1157.42" y="543.5" ></text>
</g>
<g >
<title>base::Lock::CheckHeldAndUnmark() (1 samples, 0.17%)</title><rect x="1049.7" y="501" width="1.9" height="15.0" fill="rgb(219,25,48)" rx="2" ry="2" />
<text  x="1052.66" y="511.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::ProcessPacket(bool, rtc::CopyOnWriteBuffer const&amp;, long long) (118 samples, 19.77%)</title><rect x="344.0" y="517" width="233.3" height="15.0" fill="rgb(234,208,35)" rx="2" ry="2" />
<text  x="347.04" y="527.5" >cricket::BaseChannel::ProcessP..</text>
</g>
<g >
<title>cricket::Connection::OnConnectionRequestSent(cricket::ConnectionRequest*) (1 samples, 0.17%)</title><rect x="634.6" y="405" width="2.0" height="15.0" fill="rgb(235,189,19)" rx="2" ry="2" />
<text  x="637.59" y="415.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (1 samples, 0.17%)</title><rect x="571.3" y="325" width="2.0" height="15.0" fill="rgb(213,80,17)" rx="2" ry="2" />
<text  x="574.34" y="335.5" ></text>
</g>
<g >
<title>IPC::ParamTraits&lt;network::P2PPacketInfo&gt;::Write(base::Pickle*, network::P2PPacketInfo const&amp;) (8 samples, 1.34%)</title><rect x="233.4" y="357" width="15.8" height="15.0" fill="rgb(227,132,46)" rx="2" ry="2" />
<text  x="236.35" y="367.5" ></text>
</g>
<g >
<title>cricket::Connection::OnReadPacket(char const*, unsigned long, long long) (27 samples, 4.52%)</title><rect x="733.4" y="325" width="53.4" height="15.0" fill="rgb(253,7,14)" rx="2" ry="2" />
<text  x="736.42" y="335.5" >crick..</text>
</g>
<g >
<title>webrtc::DecoderDatabase::GetDecoderInfo(unsigned char) const (1 samples, 0.17%)</title><rect x="525.9" y="325" width="2.0" height="15.0" fill="rgb(238,97,22)" rx="2" ry="2" />
<text  x="528.88" y="335.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (2 samples, 0.34%)</title><rect x="1037.8" y="533" width="4.0" height="15.0" fill="rgb(234,106,13)" rx="2" ry="2" />
<text  x="1040.81" y="543.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::RealTimeDomain::DelayTillNextTask(base::sequence_manager::LazyNow*) (4 samples, 0.67%)</title><rect x="923.2" y="565" width="7.9" height="15.0" fill="rgb(224,121,35)" rx="2" ry="2" />
<text  x="926.17" y="575.5" ></text>
</g>
<g >
<title>webrtc::RtpTransportControllerSend::OnSentPacket(rtc::SentPacket const&amp;) (22 samples, 3.69%)</title><rect x="583.2" y="501" width="43.5" height="15.0" fill="rgb(205,199,39)" rx="2" ry="2" />
<text  x="586.20" y="511.5" >webr..</text>
</g>
<g >
<title>mojo::core::ports::Node::SendUserMessageInternal(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;*) (3 samples, 0.50%)</title><rect x="182.0" y="229" width="5.9" height="15.0" fill="rgb(220,181,38)" rx="2" ry="2" />
<text  x="184.96" y="239.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (3 samples, 0.50%)</title><rect x="680.1" y="421" width="5.9" height="15.0" fill="rgb(220,29,44)" rx="2" ry="2" />
<text  x="683.05" y="431.5" ></text>
</g>
<g >
<title>mach_msg (4 samples, 0.67%)</title><rect x="363.8" y="261" width="7.9" height="15.0" fill="rgb(229,221,51)" rx="2" ry="2" />
<text  x="366.80" y="271.5" ></text>
</g>
<g >
<title>mojo::core::MessagePipeDispatcher::GetHandleSignalsStateNoLock() const (1 samples, 0.17%)</title><rect x="257.1" y="261" width="1.9" height="15.0" fill="rgb(240,215,26)" rx="2" ry="2" />
<text  x="260.07" y="271.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;::MaybeShrinkQueue() (1 samples, 0.17%)</title><rect x="1142.6" y="517" width="1.9" height="15.0" fill="rgb(224,59,49)" rx="2" ry="2" />
<text  x="1145.56" y="527.5" ></text>
</g>
<g >
<title>base::Pickle::WriteBytes(void const*, int) (3 samples, 0.50%)</title><rect x="241.3" y="309" width="5.9" height="15.0" fill="rgb(246,133,25)" rx="2" ry="2" />
<text  x="244.26" y="319.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (1 samples, 0.17%)</title><rect x="684.0" y="373" width="2.0" height="15.0" fill="rgb(240,0,21)" rx="2" ry="2" />
<text  x="687.00" y="383.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="405.3" y="293" width="2.0" height="15.0" fill="rgb(232,100,32)" rx="2" ry="2" />
<text  x="408.31" y="303.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::Release() const (2 samples, 0.34%)</title><rect x="774.9" y="197" width="4.0" height="15.0" fill="rgb(254,162,6)" rx="2" ry="2" />
<text  x="777.92" y="207.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="854.0" y="389" width="2.0" height="15.0" fill="rgb(223,138,2)" rx="2" ry="2" />
<text  x="856.99" y="399.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="336.1" y="309" width="2.0" height="15.0" fill="rgb(232,119,6)" rx="2" ry="2" />
<text  x="339.13" y="319.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="634.6" y="277" width="2.0" height="15.0" fill="rgb(245,33,47)" rx="2" ry="2" />
<text  x="637.59" y="287.5" ></text>
</g>
<g >
<title>mojo::Message&amp; base::circular_deque&lt;mojo::Message&gt;::emplace_back&lt;mojo::Message&gt;(mojo::Message&amp;&amp;) (1 samples, 0.17%)</title><rect x="903.4" y="501" width="2.0" height="15.0" fill="rgb(209,4,9)" rx="2" ry="2" />
<text  x="906.40" y="511.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (3 samples, 0.50%)</title><rect x="1051.6" y="501" width="6.0" height="15.0" fill="rgb(217,17,46)" rx="2" ry="2" />
<text  x="1054.64" y="511.5" ></text>
</g>
<g >
<title>rtc::CriticalSection::Leave() const (1 samples, 0.17%)</title><rect x="395.4" y="373" width="2.0" height="15.0" fill="rgb(251,47,17)" rx="2" ry="2" />
<text  x="398.43" y="383.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::OnReadPacket(rtc::PacketTransportInternal*, char const*, unsigned long, long long const&amp;, int) (19 samples, 3.18%)</title><rect x="743.3" y="277" width="37.6" height="15.0" fill="rgb(234,53,32)" rx="2" ry="2" />
<text  x="746.30" y="287.5" >web..</text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="869.8" y="405" width="2.0" height="15.0" fill="rgb(231,45,26)" rx="2" ry="2" />
<text  x="872.80" y="415.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="634.6" y="293" width="2.0" height="15.0" fill="rgb(229,211,9)" rx="2" ry="2" />
<text  x="637.59" y="303.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="948.9" y="549" width="1.9" height="15.0" fill="rgb(240,218,42)" rx="2" ry="2" />
<text  x="951.86" y="559.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostImmediateTaskImpl(base::sequence_manager::internal::PostedTask, base::sequence_manager::internal::TaskQueueImpl::CurrentThread) (1 samples, 0.17%)</title><rect x="830.3" y="181" width="1.9" height="15.0" fill="rgb(253,95,16)" rx="2" ry="2" />
<text  x="833.27" y="191.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="790.7" y="293" width="2.0" height="15.0" fill="rgb(226,59,27)" rx="2" ry="2" />
<text  x="793.74" y="303.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (4 samples, 0.67%)</title><rect x="1144.5" y="485" width="7.9" height="15.0" fill="rgb(242,39,50)" rx="2" ry="2" />
<text  x="1147.54" y="495.5" ></text>
</g>
<g >
<title>webrtc::internal::VideoReceiveStream::OnCompleteFrame(std::__Cr::unique_ptr&lt;webrtc::video_coding::EncodedFrame, std::__Cr::default_delete&lt;webrtc::video_coding::EncodedFrame&gt; &gt;) (6 samples, 1.01%)</title><rect x="427.1" y="261" width="11.8" height="15.0" fill="rgb(236,134,3)" rx="2" ry="2" />
<text  x="430.05" y="271.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::EndUnusedPeriod() (1 samples, 0.17%)</title><rect x="361.8" y="277" width="2.0" height="15.0" fill="rgb(245,222,7)" rx="2" ry="2" />
<text  x="364.83" y="287.5" ></text>
</g>
<g >
<title>mojo::core::ports::Node::GetMessage(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;*, mojo::core::ports::MessageFilter*) (8 samples, 1.34%)</title><rect x="875.7" y="437" width="15.8" height="15.0" fill="rgb(239,1,44)" rx="2" ry="2" />
<text  x="878.73" y="447.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.34%)</title><rect x="699.8" y="469" width="4.0" height="15.0" fill="rgb(227,84,50)" rx="2" ry="2" />
<text  x="702.82" y="479.5" ></text>
</g>
<g >
<title>webrtc::RtcEventLogImpl::Log(std::__Cr::unique_ptr&lt;webrtc::RtcEvent, std::__Cr::default_delete&lt;webrtc::RtcEvent&gt; &gt;) (13 samples, 2.18%)</title><rect x="348.0" y="453" width="25.7" height="15.0" fill="rgb(243,68,32)" rx="2" ry="2" />
<text  x="350.99" y="463.5" >w..</text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="326.2" y="245" width="2.0" height="15.0" fill="rgb(217,198,42)" rx="2" ry="2" />
<text  x="329.25" y="255.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="836.2" y="165" width="2.0" height="15.0" fill="rgb(248,179,42)" rx="2" ry="2" />
<text  x="839.20" y="175.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::AddRef() const (1 samples, 0.17%)</title><rect x="482.4" y="485" width="2.0" height="15.0" fill="rgb(236,127,48)" rx="2" ry="2" />
<text  x="485.40" y="495.5" ></text>
</g>
<g >
<title>std::__Cr::pair&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, void*&gt;*, long&gt;, bool&gt; std::__Cr::__tree&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::__map_value_compare&lt;int, std::__Cr::__value_type&lt;int, rtc::Message&gt;, std::__Cr::less&lt;int&gt;, true&gt;, std::__Cr::allocator&lt;std::__Cr::__value_type&lt;int, rtc::Message&gt; &gt; &gt;::__emplace_unique_key_args&lt;int, std::__Cr::pair&lt;int, rtc::Message&gt; &gt;(int const&amp;, std::__Cr::pair&lt;int, rtc::Message&gt;&amp;&amp;) (1 samples, 0.17%)</title><rect x="118.7" y="293" width="2.0" height="15.0" fill="rgb(235,24,53)" rx="2" ry="2" />
<text  x="121.71" y="303.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="97.0" y="261" width="1.9" height="15.0" fill="rgb(235,56,51)" rx="2" ry="2" />
<text  x="99.97" y="271.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="634.6" y="357" width="2.0" height="15.0" fill="rgb(237,15,46)" rx="2" ry="2" />
<text  x="637.59" y="367.5" ></text>
</g>
<g >
<title>mach_absolute_time (1 samples, 0.17%)</title><rect x="1134.7" y="501" width="1.9" height="15.0" fill="rgb(237,164,29)" rx="2" ry="2" />
<text  x="1137.66" y="511.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="836.2" y="229" width="2.0" height="15.0" fill="rgb(209,197,17)" rx="2" ry="2" />
<text  x="839.20" y="239.5" ></text>
</g>
<g >
<title>cricket::IsValidRtpPacketSize(cricket::RtpPacketType, unsigned long) (1 samples, 0.17%)</title><rect x="338.1" y="517" width="2.0" height="15.0" fill="rgb(225,71,17)" rx="2" ry="2" />
<text  x="341.11" y="527.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="508.1" y="293" width="2.0" height="15.0" fill="rgb(225,142,40)" rx="2" ry="2" />
<text  x="511.09" y="303.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::ReloadEmptyImmediateWorkQueue() (5 samples, 0.84%)</title><rect x="1020.0" y="533" width="9.9" height="15.0" fill="rgb(211,95,49)" rx="2" ry="2" />
<text  x="1023.02" y="543.5" ></text>
</g>
<g >
<title>mojo::internal::SerializationContext::TakeHandlesFromMessage(mojo::Message*) (1 samples, 0.17%)</title><rect x="804.6" y="373" width="1.9" height="15.0" fill="rgb(228,193,30)" rx="2" ry="2" />
<text  x="807.57" y="383.5" ></text>
</g>
<g >
<title>mach_msg_trap (4 samples, 0.67%)</title><rect x="363.8" y="245" width="7.9" height="15.0" fill="rgb(231,25,41)" rx="2" ry="2" />
<text  x="366.80" y="255.5" ></text>
</g>
<g >
<title>mojo::Connector::ReadMessage(mojo::Message*) (23 samples, 3.85%)</title><rect x="857.9" y="501" width="45.5" height="15.0" fill="rgb(217,136,4)" rx="2" ry="2" />
<text  x="860.94" y="511.5" >mojo..</text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="219.5" y="389" width="2.0" height="15.0" fill="rgb(211,40,53)" rx="2" ry="2" />
<text  x="222.51" y="399.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1126.8" y="469" width="1.9" height="15.0" fill="rgb(215,55,52)" rx="2" ry="2" />
<text  x="1129.75" y="479.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="1174.2" y="581" width="2.0" height="15.0" fill="rgb(213,163,24)" rx="2" ry="2" />
<text  x="1177.19" y="591.5" ></text>
</g>
<g >
<title>base::TaskAnnotator::ScopedSetIpcHash::ScopedSetIpcHash(unsigned int) (1 samples, 0.17%)</title><rect x="727.5" y="373" width="2.0" height="15.0" fill="rgb(221,110,23)" rx="2" ry="2" />
<text  x="730.49" y="383.5" ></text>
</g>
<g >
<title>dispatch_queue_get_label (1 samples, 0.17%)</title><rect x="739.3" y="277" width="2.0" height="15.0" fill="rgb(244,99,9)" rx="2" ry="2" />
<text  x="742.35" y="287.5" ></text>
</g>
<g >
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="442.9" y="261" width="1.9" height="15.0" fill="rgb(214,225,8)" rx="2" ry="2" />
<text  x="445.86" y="271.5" ></text>
</g>
<g >
<title>CRYPTO_ctr128_encrypt_ctr32 (1 samples, 0.17%)</title><rect x="197.8" y="389" width="1.9" height="15.0" fill="rgb(237,181,49)" rx="2" ry="2" />
<text  x="200.77" y="399.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (3 samples, 0.50%)</title><rect x="553.6" y="373" width="5.9" height="15.0" fill="rgb(225,136,33)" rx="2" ry="2" />
<text  x="556.55" y="383.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (2 samples, 0.34%)</title><rect x="134.5" y="501" width="4.0" height="15.0" fill="rgb(216,37,34)" rx="2" ry="2" />
<text  x="137.52" y="511.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="1025.9" y="437" width="2.0" height="15.0" fill="rgb(231,217,54)" rx="2" ry="2" />
<text  x="1028.95" y="447.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (7 samples, 1.17%)</title><rect x="818.4" y="245" width="13.8" height="15.0" fill="rgb(211,97,26)" rx="2" ry="2" />
<text  x="821.41" y="255.5" ></text>
</g>
<g >
<title>mojo::Connector::Accept(mojo::Message*) (23 samples, 3.85%)</title><rect x="253.1" y="325" width="45.5" height="15.0" fill="rgb(241,24,40)" rx="2" ry="2" />
<text  x="256.12" y="335.5" >mojo..</text>
</g>
<g >
<title>rtc::AsyncClosure::~AsyncClosure() (2 samples, 0.34%)</title><rect x="670.2" y="501" width="3.9" height="15.0" fill="rgb(253,172,41)" rx="2" ry="2" />
<text  x="673.17" y="511.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (6 samples, 1.01%)</title><rect x="504.1" y="405" width="11.9" height="15.0" fill="rgb(254,205,6)" rx="2" ry="2" />
<text  x="507.14" y="415.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="413.2" y="325" width="2.0" height="15.0" fill="rgb(221,145,3)" rx="2" ry="2" />
<text  x="416.22" y="335.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="377.6" y="309" width="2.0" height="15.0" fill="rgb(220,212,51)" rx="2" ry="2" />
<text  x="380.64" y="319.5" ></text>
</g>
<g >
<title>cricket::SrtpSession::UnprotectRtcp(void*, int, int*) (2 samples, 0.34%)</title><rect x="745.3" y="245" width="3.9" height="15.0" fill="rgb(214,58,17)" rx="2" ry="2" />
<text  x="748.28" y="255.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::MaybeAdjustTaskDelay(base::sequence_manager::internal::PostedTask*, base::sequence_manager::internal::TaskQueueImpl::CurrentThread) (1 samples, 0.17%)</title><rect x="638.5" y="437" width="2.0" height="15.0" fill="rgb(223,13,39)" rx="2" ry="2" />
<text  x="641.54" y="447.5" ></text>
</g>
<g >
<title>mach_msg_trap (9 samples, 1.51%)</title><rect x="601.0" y="293" width="17.8" height="15.0" fill="rgb(225,156,44)" rx="2" ry="2" />
<text  x="603.99" y="303.5" ></text>
</g>
<g >
<title>mojo::core::ports::SinglePortLocker::~SinglePortLocker() (1 samples, 0.17%)</title><rect x="861.9" y="421" width="2.0" height="15.0" fill="rgb(253,58,20)" rx="2" ry="2" />
<text  x="864.89" y="431.5" ></text>
</g>
<g >
<title>base::(anonymous namespace)::ThreadFunc(void*) (597 samples, 100.00%)</title><rect x="10.0" y="725" width="1180.0" height="15.0" fill="rgb(209,3,8)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >base::(anonymous namespace)::ThreadFunc(void*)</text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TakeImmediateIncomingQueueTasks(base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;*) (2 samples, 0.34%)</title><rect x="917.2" y="533" width="4.0" height="15.0" fill="rgb(223,162,19)" rx="2" ry="2" />
<text  x="920.24" y="543.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroup::PushTaskSourceAndWakeUpWorkersImpl(base::internal::ThreadGroup::BaseScopedWorkersExecutor*, base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (1 samples, 0.17%)</title><rect x="684.0" y="357" width="2.0" height="15.0" fill="rgb(253,102,40)" rx="2" ry="2" />
<text  x="687.00" y="367.5" ></text>
</g>
<g >
<title>mojo::core::ports::Node::SendUserMessage(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (19 samples, 3.18%)</title><rect x="261.0" y="245" width="37.6" height="15.0" fill="rgb(209,1,13)" rx="2" ry="2" />
<text  x="264.02" y="255.5" >moj..</text>
</g>
<g >
<title>mojo::core::Core::AppendMessageData(unsigned long, unsigned int, unsigned int const*, unsigned int, MojoAppendMessageDataOptions const*, void**, unsigned int*) (3 samples, 0.50%)</title><rect x="324.3" y="293" width="5.9" height="15.0" fill="rgb(212,152,12)" rx="2" ry="2" />
<text  x="327.27" y="303.5" ></text>
</g>
<g >
<title>webrtc::RtcEventRtpPacketIncoming::RtcEventRtpPacketIncoming(webrtc::RtpPacketReceived const&amp;) (2 samples, 0.34%)</title><rect x="373.7" y="453" width="3.9" height="15.0" fill="rgb(233,0,5)" rx="2" ry="2" />
<text  x="376.69" y="463.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="565.4" y="261" width="2.0" height="15.0" fill="rgb(228,182,29)" rx="2" ry="2" />
<text  x="568.41" y="271.5" ></text>
</g>
<g >
<title>non-virtual thunk to base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (1 samples, 0.17%)</title><rect x="620.8" y="421" width="1.9" height="15.0" fill="rgb(233,133,42)" rx="2" ry="2" />
<text  x="623.75" y="431.5" ></text>
</g>
<g >
<title>webrtc::SequenceCheckerImpl::IsCurrent() const (1 samples, 0.17%)</title><rect x="448.8" y="405" width="2.0" height="15.0" fill="rgb(227,5,4)" rx="2" ry="2" />
<text  x="451.79" y="415.5" ></text>
</g>
<g >
<title>webrtc::RtpDemuxer::ResolveSink(webrtc::RtpPacketReceived const&amp;) (1 samples, 0.17%)</title><rect x="385.5" y="421" width="2.0" height="15.0" fill="rgb(214,130,3)" rx="2" ry="2" />
<text  x="388.54" y="431.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="263.0" y="133" width="2.0" height="15.0" fill="rgb(234,125,49)" rx="2" ry="2" />
<text  x="266.00" y="143.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="836.2" y="197" width="2.0" height="15.0" fill="rgb(218,133,32)" rx="2" ry="2" />
<text  x="839.20" y="207.5" ></text>
</g>
<g >
<title>IPC::Message::~Message() (1 samples, 0.17%)</title><rect x="802.6" y="357" width="2.0" height="15.0" fill="rgb(217,217,16)" rx="2" ry="2" />
<text  x="805.60" y="367.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (3 samples, 0.50%)</title><rect x="553.6" y="341" width="5.9" height="15.0" fill="rgb(206,67,53)" rx="2" ry="2" />
<text  x="556.55" y="351.5" ></text>
</g>
<g >
<title>base::SequenceToken::IsValid() const (1 samples, 0.17%)</title><rect x="711.7" y="437" width="2.0" height="15.0" fill="rgb(212,210,17)" rx="2" ry="2" />
<text  x="714.68" y="447.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="771.0" y="149" width="1.9" height="15.0" fill="rgb(205,69,40)" rx="2" ry="2" />
<text  x="773.97" y="159.5" ></text>
</g>
<g >
<title>content::(anonymous namespace)::IpcPacketSocket::OnDataReceived(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, base::TimeTicks const&amp;) (30 samples, 5.03%)</title><rect x="729.5" y="357" width="59.3" height="15.0" fill="rgb(242,168,22)" rx="2" ry="2" />
<text  x="732.46" y="367.5" >conten..</text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="561.5" y="309" width="1.9" height="15.0" fill="rgb(248,177,54)" rx="2" ry="2" />
<text  x="564.46" y="319.5" ></text>
</g>
<g >
<title>mojo::native::internal::NativeStruct_Data::BufferWriter::data() (2 samples, 0.34%)</title><rect x="225.4" y="341" width="4.0" height="15.0" fill="rgb(238,187,16)" rx="2" ry="2" />
<text  x="228.44" y="351.5" ></text>
</g>
<g >
<title>thread_start (597 samples, 100.00%)</title><rect x="10.0" y="773" width="1180.0" height="15.0" fill="rgb(246,70,35)" rx="2" ry="2" />
<text  x="13.00" y="783.5" >thread_start</text>
</g>
<g >
<title>base::WaitableEvent::Signal() (2 samples, 0.34%)</title><rect x="427.1" y="229" width="3.9" height="15.0" fill="rgb(211,206,1)" rx="2" ry="2" />
<text  x="430.05" y="239.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="110.8" y="229" width="2.0" height="15.0" fill="rgb(230,121,29)" rx="2" ry="2" />
<text  x="113.80" y="239.5" ></text>
</g>
<g >
<title>mojo::core::Channel::Message::~Message() (1 samples, 0.17%)</title><rect x="288.7" y="133" width="2.0" height="15.0" fill="rgb(231,15,39)" rx="2" ry="2" />
<text  x="291.69" y="143.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (6 samples, 1.01%)</title><rect x="130.6" y="549" width="11.8" height="15.0" fill="rgb(249,115,37)" rx="2" ry="2" />
<text  x="133.57" y="559.5" ></text>
</g>
<g >
<title>webrtc::voe::(anonymous namespace)::TransportFeedbackProxy::OnTransportFeedback(webrtc::rtcp::TransportFeedback const&amp;) (2 samples, 0.34%)</title><rect x="571.3" y="421" width="4.0" height="15.0" fill="rgb(215,26,50)" rx="2" ry="2" />
<text  x="574.34" y="431.5" ></text>
</g>
<g >
<title>mojo::FilterChain::Accept(mojo::Message*) (16 samples, 2.68%)</title><rect x="93.0" y="533" width="31.6" height="15.0" fill="rgb(226,101,27)" rx="2" ry="2" />
<text  x="96.02" y="543.5" >mo..</text>
</g>
<g >
<title>network::mojom::internal::IPEndPoint_Data::Validate(void const*, mojo::internal::ValidationContext*) (1 samples, 0.17%)</title><rect x="850.0" y="373" width="2.0" height="15.0" fill="rgb(208,197,10)" rx="2" ry="2" />
<text  x="853.03" y="383.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run(bool, base::TimeDelta) (597 samples, 100.00%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(247,148,51)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run(bool, base::TimeDelta)</text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="102.9" y="117" width="2.0" height="15.0" fill="rgb(209,228,12)" rx="2" ry="2" />
<text  x="105.90" y="127.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::GuardedTaskPoster::PostTask(base::sequence_manager::internal::PostedTask) (5 samples, 0.84%)</title><rect x="822.4" y="213" width="9.8" height="15.0" fill="rgb(224,214,4)" rx="2" ry="2" />
<text  x="825.36" y="223.5" ></text>
</g>
<g >
<title>mojo::Connector::DispatchNextMessageInQueue() (16 samples, 2.68%)</title><rect x="93.0" y="565" width="31.6" height="15.0" fill="rgb(243,15,1)" rx="2" ry="2" />
<text  x="96.02" y="575.5" >mo..</text>
</g>
<g >
<title>std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt; std::__Cr::list&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, std::__Cr::allocator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt; &gt; &gt;::__sort&lt;webrtc::ForwardErrorCorrection::SortablePacket::LessThan&gt;(std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt;, std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt;, unsigned long, webrtc::ForwardErrorCorrection::SortablePacket::LessThan&amp;) (2 samples, 0.34%)</title><rect x="409.3" y="293" width="3.9" height="15.0" fill="rgb(237,24,9)" rx="2" ry="2" />
<text  x="412.26" y="303.5" ></text>
</g>
<g >
<title>mach_msg_trap (2 samples, 0.34%)</title><rect x="648.4" y="453" width="4.0" height="15.0" fill="rgb(243,153,29)" rx="2" ry="2" />
<text  x="651.43" y="463.5" ></text>
</g>
<g >
<title>webrtc::video_coding::PacketBuffer::InsertPacket(webrtc::VCMPacket*) (11 samples, 1.84%)</title><rect x="427.1" y="325" width="21.7" height="15.0" fill="rgb(212,98,45)" rx="2" ry="2" />
<text  x="430.05" y="335.5" >w..</text>
</g>
<g >
<title>mojo::core::UserMessageImpl::~UserMessageImpl() (1 samples, 0.17%)</title><rect x="122.7" y="405" width="1.9" height="15.0" fill="rgb(236,216,17)" rx="2" ry="2" />
<text  x="125.66" y="415.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (1 samples, 0.17%)</title><rect x="567.4" y="309" width="2.0" height="15.0" fill="rgb(236,97,13)" rx="2" ry="2" />
<text  x="570.39" y="319.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketHistory::CullAcknowledgedPackets(rtc::ArrayView&lt;unsigned short const, -4711l&gt;) (2 samples, 0.34%)</title><rect x="490.3" y="373" width="4.0" height="15.0" fill="rgb(239,73,26)" rx="2" ry="2" />
<text  x="493.30" y="383.5" ></text>
</g>
<g >
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="755.2" y="165" width="1.9" height="15.0" fill="rgb(246,190,5)" rx="2" ry="2" />
<text  x="758.16" y="175.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::SendPacket(bool, rtc::CopyOnWriteBuffer*, rtc::PacketOptions const&amp;, int) (66 samples, 11.06%)</title><rect x="207.7" y="485" width="130.4" height="15.0" fill="rgb(225,151,28)" rx="2" ry="2" />
<text  x="210.65" y="495.5" >webrtc::RtpTrans..</text>
</g>
<g >
<title>webrtc::RtpStreamReceiverController::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (14 samples, 2.35%)</title><rect x="519.9" y="453" width="27.7" height="15.0" fill="rgb(225,203,50)" rx="2" ry="2" />
<text  x="522.95" y="463.5" >w..</text>
</g>
<g >
<title>void sigslot::_opaque_connection::emitter&lt;cricket::P2PTransportChannel, cricket::Connection*, char const*, unsigned long, long long&gt;(sigslot::_opaque_connection const*, cricket::Connection*, char const*, unsigned long, long long) (1 samples, 0.17%)</title><rect x="784.8" y="309" width="2.0" height="15.0" fill="rgb(224,79,50)" rx="2" ry="2" />
<text  x="787.81" y="319.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="336.1" y="293" width="2.0" height="15.0" fill="rgb(220,131,47)" rx="2" ry="2" />
<text  x="339.13" y="303.5" ></text>
</g>
<g >
<title>cricket::P2PTransportChannel::OnReadPacket(cricket::Connection*, char const*, unsigned long, long long) (9 samples, 1.51%)</title><rect x="97.0" y="357" width="17.8" height="15.0" fill="rgb(220,216,52)" rx="2" ry="2" />
<text  x="99.97" y="367.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;::MaybeShrinkQueue() (1 samples, 0.17%)</title><rect x="1134.7" y="533" width="1.9" height="15.0" fill="rgb(253,101,39)" rx="2" ry="2" />
<text  x="1137.66" y="543.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoSender::OnPacketFeedbackVector(std::__Cr::vector&lt;webrtc::PacketFeedback, std::__Cr::allocator&lt;webrtc::PacketFeedback&gt; &gt; const&amp;) (1 samples, 0.17%)</title><rect x="573.3" y="373" width="2.0" height="15.0" fill="rgb(208,106,52)" rx="2" ry="2" />
<text  x="576.32" y="383.5" ></text>
</g>
<g >
<title>mojo::FilterChain::Accept(mojo::Message*) (14 samples, 2.35%)</title><rect x="95.0" y="469" width="27.7" height="15.0" fill="rgb(245,127,21)" rx="2" ry="2" />
<text  x="97.99" y="479.5" >m..</text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (9 samples, 1.51%)</title><rect x="601.0" y="341" width="17.8" height="15.0" fill="rgb(221,152,24)" rx="2" ry="2" />
<text  x="603.99" y="351.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::OnSentPacket(rtc::PacketTransportInternal*, rtc::SentPacket const&amp;) (13 samples, 2.18%)</title><rect x="814.5" y="293" width="25.7" height="15.0" fill="rgb(252,93,21)" rx="2" ry="2" />
<text  x="817.46" y="303.5" >w..</text>
</g>
<g >
<title>srtp_hmac_update (3 samples, 0.50%)</title><rect x="757.1" y="213" width="6.0" height="15.0" fill="rgb(235,36,37)" rx="2" ry="2" />
<text  x="760.14" y="223.5" ></text>
</g>
<g >
<title>webrtc::PeerConnection::OnSentPacket_w(rtc::SentPacket const&amp;) (1 samples, 0.17%)</title><rect x="581.2" y="501" width="2.0" height="15.0" fill="rgb(232,81,54)" rx="2" ry="2" />
<text  x="584.22" y="511.5" ></text>
</g>
<g >
<title>webrtc::acm2::AcmReceiver::GetPlayoutTimestamp() (1 samples, 0.17%)</title><rect x="545.6" y="389" width="2.0" height="15.0" fill="rgb(228,196,5)" rx="2" ry="2" />
<text  x="548.64" y="399.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (4 samples, 0.67%)</title><rect x="1077.3" y="549" width="7.9" height="15.0" fill="rgb(243,224,29)" rx="2" ry="2" />
<text  x="1080.34" y="559.5" ></text>
</g>
<g >
<title>non-virtual thunk to cricket::BaseChannel::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (5 samples, 0.84%)</title><rect x="763.1" y="213" width="9.8" height="15.0" fill="rgb(218,124,44)" rx="2" ry="2" />
<text  x="766.07" y="223.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (2 samples, 0.34%)</title><rect x="946.9" y="565" width="3.9" height="15.0" fill="rgb(251,53,18)" rx="2" ry="2" />
<text  x="949.88" y="575.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (2 samples, 0.34%)</title><rect x="648.4" y="485" width="4.0" height="15.0" fill="rgb(233,73,8)" rx="2" ry="2" />
<text  x="651.43" y="495.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="836.2" y="261" width="2.0" height="15.0" fill="rgb(241,167,14)" rx="2" ry="2" />
<text  x="839.20" y="271.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="527.9" y="245" width="1.9" height="15.0" fill="rgb(250,190,9)" rx="2" ry="2" />
<text  x="530.86" y="255.5" ></text>
</g>
<g >
<title>webrtc::RemoteEstimatorProxy::IncomingPacket(long long, unsigned long, webrtc::RTPHeader const&amp;) (6 samples, 1.01%)</title><rect x="452.7" y="437" width="11.9" height="15.0" fill="rgb(210,82,39)" rx="2" ry="2" />
<text  x="455.75" y="447.5" ></text>
</g>
<g >
<title>base::PendingTask::PendingTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeTicks, base::Nestable) (1 samples, 0.17%)</title><rect x="585.2" y="405" width="2.0" height="15.0" fill="rgb(235,125,31)" rx="2" ry="2" />
<text  x="588.18" y="415.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (12 samples, 2.01%)</title><rect x="348.0" y="405" width="23.7" height="15.0" fill="rgb(248,89,51)" rx="2" ry="2" />
<text  x="350.99" y="415.5" >b..</text>
</g>
<g >
<title>mojo::InterfaceEndpointClient::HandleIncomingMessage(mojo::Message*) (68 samples, 11.39%)</title><rect x="719.6" y="437" width="134.4" height="15.0" fill="rgb(232,90,1)" rx="2" ry="2" />
<text  x="722.58" y="447.5" >mojo::InterfaceE..</text>
</g>
<g >
<title>mojo::core::Channel::Message::ExtendPayload(unsigned long) (1 samples, 0.17%)</title><rect x="187.9" y="261" width="2.0" height="15.0" fill="rgb(244,220,10)" rx="2" ry="2" />
<text  x="190.89" y="271.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="929.1" y="533" width="2.0" height="15.0" fill="rgb(214,73,36)" rx="2" ry="2" />
<text  x="932.10" y="543.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() (4 samples, 0.67%)</title><rect x="1144.5" y="501" width="7.9" height="15.0" fill="rgb(210,133,6)" rx="2" ry="2" />
<text  x="1147.54" y="511.5" ></text>
</g>
<g >
<title>network::mojom::P2PSocketProxy::Send(std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, network::P2PPacketInfo const&amp;, net::MutableNetworkTrafficAnnotationTag const&amp;) (7 samples, 1.17%)</title><rect x="176.0" y="373" width="13.9" height="15.0" fill="rgb(213,144,20)" rx="2" ry="2" />
<text  x="179.03" y="383.5" ></text>
</g>
<g >
<title>base::Pickle::ClaimUninitializedBytesInternal(unsigned long) (3 samples, 0.50%)</title><rect x="241.3" y="293" width="5.9" height="15.0" fill="rgb(220,205,26)" rx="2" ry="2" />
<text  x="244.26" y="303.5" ></text>
</g>
<g >
<title>webrtc::RtpTransportControllerSend::OnTransportFeedback(webrtc::rtcp::TransportFeedback const&amp;) (2 samples, 0.34%)</title><rect x="571.3" y="405" width="4.0" height="15.0" fill="rgb(244,106,6)" rx="2" ry="2" />
<text  x="574.34" y="415.5" ></text>
</g>
<g >
<title>std::__Cr::vector&lt;mojo::core::RequestContext::WatchNotifyFinalizer, base::StackAllocator&lt;mojo::core::RequestContext::WatchNotifyFinalizer, 8ul&gt; &gt;::reserve(unsigned long) (1 samples, 0.17%)</title><rect x="304.5" y="277" width="2.0" height="15.0" fill="rgb(231,221,14)" rx="2" ry="2" />
<text  x="307.51" y="287.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="19.9" y="629" width="2.0" height="15.0" fill="rgb(205,176,12)" rx="2" ry="2" />
<text  x="22.88" y="639.5" ></text>
</g>
<g >
<title>cricket::DtlsTransport::OnSentPacket(rtc::PacketTransportInternal*, rtc::SentPacket const&amp;) (1 samples, 0.17%)</title><rect x="810.5" y="309" width="2.0" height="15.0" fill="rgb(218,188,20)" rx="2" ry="2" />
<text  x="813.50" y="319.5" ></text>
</g>
<g >
<title>SHA1_Update (1 samples, 0.17%)</title><rect x="759.1" y="181" width="2.0" height="15.0" fill="rgb(245,211,23)" rx="2" ry="2" />
<text  x="762.11" y="191.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::main_thread_only() (13 samples, 2.18%)</title><rect x="974.6" y="597" width="25.7" height="15.0" fill="rgb(214,7,13)" rx="2" ry="2" />
<text  x="977.56" y="607.5" >b..</text>
</g>
<g >
<title>network::mojom::P2PSocketProxy::Send(std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, network::P2PPacketInfo const&amp;, net::MutableNetworkTrafficAnnotationTag const&amp;) (58 samples, 9.72%)</title><rect x="221.5" y="373" width="114.6" height="15.0" fill="rgb(242,184,5)" rx="2" ry="2" />
<text  x="224.49" y="383.5" >network::mojom..</text>
</g>
<g >
<title>base::RunLoop::RunWithTimeout(base::TimeDelta) (597 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(207,63,46)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >base::RunLoop::RunWithTimeout(base::TimeDelta)</text>
</g>
<g >
<title>malloc_zone_malloc (2 samples, 0.34%)</title><rect x="699.8" y="453" width="4.0" height="15.0" fill="rgb(241,216,6)" rx="2" ry="2" />
<text  x="702.82" y="463.5" ></text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::PostTaskInternal(rtc::Location const&amp;, int, rtc::MessageHandler*, unsigned int, rtc::MessageData*) (2 samples, 0.34%)</title><rect x="767.0" y="181" width="4.0" height="15.0" fill="rgb(240,215,43)" rx="2" ry="2" />
<text  x="770.02" y="191.5" ></text>
</g>
<g >
<title>small_malloc_should_clear (1 samples, 0.17%)</title><rect x="436.9" y="101" width="2.0" height="15.0" fill="rgb(242,86,15)" rx="2" ry="2" />
<text  x="439.93" y="111.5" ></text>
</g>
<g >
<title>webrtc::RtpDemuxer::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (6 samples, 1.01%)</title><rect x="763.1" y="229" width="11.8" height="15.0" fill="rgb(252,32,29)" rx="2" ry="2" />
<text  x="766.07" y="239.5" ></text>
</g>
<g >
<title>objc_alloc (1 samples, 0.17%)</title><rect x="77.2" y="613" width="2.0" height="15.0" fill="rgb(222,145,2)" rx="2" ry="2" />
<text  x="80.20" y="623.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() (1 samples, 0.17%)</title><rect x="1152.4" y="517" width="2.0" height="15.0" fill="rgb(222,38,47)" rx="2" ry="2" />
<text  x="1155.45" y="527.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (4 samples, 0.67%)</title><rect x="561.5" y="453" width="7.9" height="15.0" fill="rgb(245,201,9)" rx="2" ry="2" />
<text  x="564.46" y="463.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="907.4" y="453" width="1.9" height="15.0" fill="rgb(222,65,27)" rx="2" ry="2" />
<text  x="910.35" y="463.5" ></text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="703.8" y="453" width="1.9" height="15.0" fill="rgb(235,75,0)" rx="2" ry="2" />
<text  x="706.77" y="463.5" ></text>
</g>
<g >
<title>mach_msg (27 samples, 4.52%)</title><rect x="23.8" y="597" width="53.4" height="15.0" fill="rgb(236,1,25)" rx="2" ry="2" />
<text  x="26.84" y="607.5" >mach_..</text>
</g>
<g >
<title>small_malloc_should_clear (1 samples, 0.17%)</title><rect x="413.2" y="229" width="2.0" height="15.0" fill="rgb(215,163,17)" rx="2" ry="2" />
<text  x="416.22" y="239.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="405.3" y="309" width="2.0" height="15.0" fill="rgb(240,62,17)" rx="2" ry="2" />
<text  x="408.31" y="319.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoStreamReceiver::OnCompleteFrame(std::__Cr::unique_ptr&lt;webrtc::video_coding::EncodedFrame, std::__Cr::default_delete&lt;webrtc::video_coding::EncodedFrame&gt; &gt;) (6 samples, 1.01%)</title><rect x="427.1" y="277" width="11.8" height="15.0" fill="rgb(245,123,2)" rx="2" ry="2" />
<text  x="430.05" y="287.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="377.6" y="325" width="2.0" height="15.0" fill="rgb(230,194,17)" rx="2" ry="2" />
<text  x="380.64" y="335.5" ></text>
</g>
<g >
<title>webrtc::TransportFeedbackAdapter::ProcessSentPacket(rtc::SentPacket const&amp;) (1 samples, 0.17%)</title><rect x="624.7" y="485" width="2.0" height="15.0" fill="rgb(244,139,28)" rx="2" ry="2" />
<text  x="627.71" y="495.5" ></text>
</g>
<g >
<title>mojo::core::(anonymous namespace)::ChannelMac::SendMessageLocked(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (12 samples, 2.01%)</title><rect x="265.0" y="133" width="23.7" height="15.0" fill="rgb(216,96,44)" rx="2" ry="2" />
<text  x="267.97" y="143.5" >m..</text>
</g>
<g >
<title>pthread_mutex_unlock (3 samples, 0.50%)</title><rect x="992.3" y="565" width="6.0" height="15.0" fill="rgb(253,183,45)" rx="2" ry="2" />
<text  x="995.35" y="575.5" ></text>
</g>
<g >
<title>mojo::core::ports::Node::SendUserMessageInternal(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;*) (19 samples, 3.18%)</title><rect x="261.0" y="229" width="37.6" height="15.0" fill="rgb(230,198,8)" rx="2" ry="2" />
<text  x="264.02" y="239.5" >moj..</text>
</g>
<g >
<title>mach_msg (2 samples, 0.34%)</title><rect x="431.0" y="53" width="4.0" height="15.0" fill="rgb(234,165,13)" rx="2" ry="2" />
<text  x="434.01" y="63.5" ></text>
</g>
<g >
<title>webrtc::SequenceCheckerImpl::IsCurrent() const (1 samples, 0.17%)</title><rect x="203.7" y="453" width="2.0" height="15.0" fill="rgb(232,3,14)" rx="2" ry="2" />
<text  x="206.70" y="463.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="140.5" y="533" width="1.9" height="15.0" fill="rgb(226,7,9)" rx="2" ry="2" />
<text  x="143.45" y="543.5" ></text>
</g>
<g >
<title>mojo::core::ports::Node::SendUserMessage(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (3 samples, 0.50%)</title><rect x="182.0" y="245" width="5.9" height="15.0" fill="rgb(251,144,45)" rx="2" ry="2" />
<text  x="184.96" y="255.5" ></text>
</g>
<g >
<title>MojoAppendMessageDataImpl (1 samples, 0.17%)</title><rect x="187.9" y="309" width="2.0" height="15.0" fill="rgb(230,132,18)" rx="2" ry="2" />
<text  x="190.89" y="319.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_0::__invoke(_malloc_zone_t*, void const*) (1 samples, 0.17%)</title><rect x="854.0" y="373" width="2.0" height="15.0" fill="rgb(236,78,15)" rx="2" ry="2" />
<text  x="856.99" y="383.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="956.8" y="517" width="1.9" height="15.0" fill="rgb(252,20,18)" rx="2" ry="2" />
<text  x="959.77" y="527.5" ></text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::Send(rtc::Location const&amp;, rtc::MessageHandler*, unsigned int, rtc::MessageData*) (1 samples, 0.17%)</title><rect x="634.6" y="469" width="2.0" height="15.0" fill="rgb(235,18,37)" rx="2" ry="2" />
<text  x="637.59" y="479.5" ></text>
</g>
<g >
<title>base::subtle::TimeTicksNowIgnoringOverride() (1 samples, 0.17%)</title><rect x="21.9" y="613" width="1.9" height="15.0" fill="rgb(227,153,0)" rx="2" ry="2" />
<text  x="24.86" y="623.5" ></text>
</g>
<g >
<title>net::IPAddress::~IPAddress() (1 samples, 0.17%)</title><rect x="788.8" y="341" width="1.9" height="15.0" fill="rgb(226,186,7)" rx="2" ry="2" />
<text  x="791.76" y="351.5" ></text>
</g>
<g >
<title>std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;* logging::CheckNEImpl&lt;(anonymous namespace)::TlsVectorEntry*, void*&gt;((anonymous namespace)::TlsVectorEntry* const&amp;, void* const&amp;, char const*) (1 samples, 0.17%)</title><rect x="294.6" y="165" width="2.0" height="15.0" fill="rgb(247,35,3)" rx="2" ry="2" />
<text  x="297.62" y="175.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="120.7" y="309" width="2.0" height="15.0" fill="rgb(227,11,30)" rx="2" ry="2" />
<text  x="123.69" y="319.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="152.3" y="549" width="2.0" height="15.0" fill="rgb(215,199,33)" rx="2" ry="2" />
<text  x="155.31" y="559.5" ></text>
</g>
<g >
<title>mojo::core::NodeController::SendPeerEvent(mojo::core::ports::NodeName const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::Event, std::__Cr::default_delete&lt;mojo::core::ports::Event&gt; &gt;) (14 samples, 2.35%)</title><rect x="263.0" y="197" width="27.7" height="15.0" fill="rgb(223,27,21)" rx="2" ry="2" />
<text  x="266.00" y="207.5" >m..</text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.17%)</title><rect x="917.2" y="469" width="2.0" height="15.0" fill="rgb(227,144,19)" rx="2" ry="2" />
<text  x="920.24" y="479.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (2 samples, 0.34%)</title><rect x="670.2" y="485" width="3.9" height="15.0" fill="rgb(239,94,34)" rx="2" ry="2" />
<text  x="673.17" y="495.5" ></text>
</g>
<g >
<title>cricket::DtlsTransport::OnReadPacket(rtc::PacketTransportInternal*, char const*, unsigned long, long long const&amp;, int) (24 samples, 4.02%)</title><rect x="733.4" y="293" width="47.5" height="15.0" fill="rgb(249,206,32)" rx="2" ry="2" />
<text  x="736.42" y="303.5" >cric..</text>
</g>
<g >
<title>webrtc::RtpVideoStreamReceiver::OnReceivedPayloadData(unsigned char const*, unsigned long, webrtc::RTPHeader const&amp;, webrtc::RTPVideoHeader const&amp;, absl::optional&lt;webrtc::RtpGenericFrameDescriptor&gt; const&amp;, bool) (14 samples, 2.35%)</title><rect x="421.1" y="341" width="27.7" height="15.0" fill="rgb(215,78,44)" rx="2" ry="2" />
<text  x="424.12" y="351.5" >w..</text>
</g>
<g >
<title>std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt; std::__Cr::list&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, std::__Cr::allocator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt; &gt; &gt;::__sort&lt;webrtc::ForwardErrorCorrection::SortablePacket::LessThan&gt;(std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt;, std::__Cr::__list_iterator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, void*&gt;, unsigned long, webrtc::ForwardErrorCorrection::SortablePacket::LessThan&amp;) (3 samples, 0.50%)</title><rect x="407.3" y="325" width="5.9" height="15.0" fill="rgb(236,223,9)" rx="2" ry="2" />
<text  x="410.29" y="335.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="413.2" y="245" width="2.0" height="15.0" fill="rgb(229,147,22)" rx="2" ry="2" />
<text  x="416.22" y="255.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.17%)</title><rect x="508.1" y="277" width="2.0" height="15.0" fill="rgb(241,170,32)" rx="2" ry="2" />
<text  x="511.09" y="287.5" ></text>
</g>
<g >
<title>base::internal::Invoker&lt;base::internal::BindState&lt;void (jingle_glue::JingleThreadWrapper::*)(int), base::WeakPtr&lt;jingle_glue::JingleThreadWrapper&gt;, int&gt;, void ()&gt;::RunOnce(base::internal::BindStateBase*) (278 samples, 46.57%)</title><rect x="124.6" y="581" width="549.5" height="15.0" fill="rgb(215,130,43)" rx="2" ry="2" />
<text  x="127.64" y="591.5" >base::internal::Invoker&lt;base::internal::BindState&lt;void (jingle_glue::Jingle..</text>
</g>
<g >
<title>mojo::core::ports::PortLocker::PortLocker(mojo::core::ports::PortRef const**, unsigned long) (3 samples, 0.50%)</title><rect x="881.7" y="421" width="5.9" height="15.0" fill="rgb(244,122,11)" rx="2" ry="2" />
<text  x="884.66" y="431.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1061.5" y="485" width="2.0" height="15.0" fill="rgb(206,169,2)" rx="2" ry="2" />
<text  x="1064.52" y="495.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="381.6" y="325" width="2.0" height="15.0" fill="rgb(245,141,17)" rx="2" ry="2" />
<text  x="384.59" y="335.5" ></text>
</g>
<g >
<title>mojo::core::MessagePipeDispatcher::GetHandleSignalsStateNoLock() const (1 samples, 0.17%)</title><rect x="865.8" y="437" width="2.0" height="15.0" fill="rgb(237,75,54)" rx="2" ry="2" />
<text  x="868.85" y="447.5" ></text>
</g>
<g >
<title>content::P2PSocketClientImpl::DataReceived(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, base::TimeTicks) (10 samples, 1.68%)</title><rect x="97.0" y="421" width="19.7" height="15.0" fill="rgb(238,129,29)" rx="2" ry="2" />
<text  x="99.97" y="431.5" ></text>
</g>
<g >
<title>pthread_getspecific (1 samples, 0.17%)</title><rect x="257.1" y="197" width="1.9" height="15.0" fill="rgb(209,191,21)" rx="2" ry="2" />
<text  x="260.07" y="207.5" ></text>
</g>
<g >
<title>free_tiny (2 samples, 0.34%)</title><rect x="674.1" y="581" width="4.0" height="15.0" fill="rgb(242,2,39)" rx="2" ry="2" />
<text  x="677.12" y="591.5" ></text>
</g>
<g >
<title>content::(anonymous namespace)::IpcPacketSocket::OnSendComplete(network::P2PSendPacketMetrics const&amp;) (3 samples, 0.50%)</title><rect x="116.7" y="405" width="6.0" height="15.0" fill="rgb(237,5,30)" rx="2" ry="2" />
<text  x="119.73" y="415.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (1 samples, 0.17%)</title><rect x="707.7" y="485" width="2.0" height="15.0" fill="rgb(234,10,49)" rx="2" ry="2" />
<text  x="710.72" y="495.5" ></text>
</g>
<g >
<title>MojoAppendMessageDataImpl (3 samples, 0.50%)</title><rect x="324.3" y="309" width="5.9" height="15.0" fill="rgb(227,2,25)" rx="2" ry="2" />
<text  x="327.27" y="319.5" ></text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (19 samples, 3.18%)</title><rect x="585.2" y="469" width="37.5" height="15.0" fill="rgb(236,86,20)" rx="2" ry="2" />
<text  x="588.18" y="479.5" >(an..</text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="97.0" y="213" width="1.9" height="15.0" fill="rgb(213,154,18)" rx="2" ry="2" />
<text  x="99.97" y="223.5" ></text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&gt;::FillHole(unsigned long, base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&amp;&amp;) (1 samples, 0.17%)</title><rect x="921.2" y="501" width="2.0" height="15.0" fill="rgb(244,54,21)" rx="2" ry="2" />
<text  x="924.19" y="511.5" ></text>
</g>
<g >
<title>cricket::DtlsTransport::OnSentPacket(rtc::PacketTransportInternal*, rtc::SentPacket const&amp;) (3 samples, 0.50%)</title><rect x="116.7" y="357" width="6.0" height="15.0" fill="rgb(232,114,27)" rx="2" ry="2" />
<text  x="119.73" y="367.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (4 samples, 0.67%)</title><rect x="561.5" y="389" width="7.9" height="15.0" fill="rgb(207,63,37)" rx="2" ry="2" />
<text  x="564.46" y="399.5" ></text>
</g>
<g >
<title>mojo::internal::MultiplexRouter::ProcessIncomingMessage(mojo::internal::MultiplexRouter::MessageWrapper*, mojo::internal::MultiplexRouter::ClientCallBehavior, base::SequencedTaskRunner*) (15 samples, 2.51%)</title><rect x="95.0" y="501" width="29.6" height="15.0" fill="rgb(233,157,12)" rx="2" ry="2" />
<text  x="97.99" y="511.5" >mo..</text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="828.3" y="181" width="2.0" height="15.0" fill="rgb(246,128,19)" rx="2" ry="2" />
<text  x="831.29" y="191.5" ></text>
</g>
<g >
<title>mojo::Message::Message(mojo::Message&amp;&amp;) (1 samples, 0.17%)</title><rect x="905.4" y="501" width="2.0" height="15.0" fill="rgb(224,74,29)" rx="2" ry="2" />
<text  x="908.38" y="511.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.17%)</title><rect x="1107.0" y="501" width="2.0" height="15.0" fill="rgb(254,135,25)" rx="2" ry="2" />
<text  x="1109.98" y="511.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="834.2" y="149" width="2.0" height="15.0" fill="rgb(229,33,25)" rx="2" ry="2" />
<text  x="837.22" y="159.5" ></text>
</g>
<g >
<title>webrtc::RTCPReceiver::TriggerCallbacksFromRtcpPacket(webrtc::RTCPReceiver::PacketInformation const&amp;) (2 samples, 0.34%)</title><rect x="571.3" y="437" width="4.0" height="15.0" fill="rgb(220,60,39)" rx="2" ry="2" />
<text  x="574.34" y="447.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="907.4" y="485" width="1.9" height="15.0" fill="rgb(222,217,32)" rx="2" ry="2" />
<text  x="910.35" y="495.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::OnSentPacket(rtc::SentPacket const&amp;) (4 samples, 0.67%)</title><rect x="626.7" y="501" width="7.9" height="15.0" fill="rgb(250,55,48)" rx="2" ry="2" />
<text  x="629.68" y="511.5" ></text>
</g>
<g >
<title>base::Lock::CheckHeldAndUnmark() (1 samples, 0.17%)</title><rect x="941.0" y="549" width="1.9" height="15.0" fill="rgb(210,99,45)" rx="2" ry="2" />
<text  x="943.95" y="559.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="1160.4" y="517" width="1.9" height="15.0" fill="rgb(235,25,9)" rx="2" ry="2" />
<text  x="1163.35" y="527.5" ></text>
</g>
<g >
<title>cricket::ProxyConnection::Send(void const*, unsigned long, rtc::PacketOptions const&amp;) (65 samples, 10.89%)</title><rect x="209.6" y="453" width="128.5" height="15.0" fill="rgb(231,136,50)" rx="2" ry="2" />
<text  x="212.63" y="463.5" >cricket::ProxyCo..</text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (4 samples, 0.67%)</title><rect x="561.5" y="421" width="7.9" height="15.0" fill="rgb(245,22,0)" rx="2" ry="2" />
<text  x="564.46" y="431.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="583.2" y="437" width="2.0" height="15.0" fill="rgb(230,69,20)" rx="2" ry="2" />
<text  x="586.20" y="447.5" ></text>
</g>
<g >
<title>mojo::core::Core::ReadMessage(unsigned int, MojoReadMessageOptions const*, unsigned long*) (20 samples, 3.35%)</title><rect x="861.9" y="469" width="39.5" height="15.0" fill="rgb(223,55,10)" rx="2" ry="2" />
<text  x="864.89" y="479.5" >moj..</text>
</g>
<g >
<title>tiny_malloc_from_free_list (1 samples, 0.17%)</title><rect x="425.1" y="213" width="2.0" height="15.0" fill="rgb(246,89,29)" rx="2" ry="2" />
<text  x="428.08" y="223.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (2 samples, 0.34%)</title><rect x="1089.2" y="501" width="3.9" height="15.0" fill="rgb(207,5,8)" rx="2" ry="2" />
<text  x="1092.20" y="511.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="561.5" y="325" width="1.9" height="15.0" fill="rgb(243,224,2)" rx="2" ry="2" />
<text  x="564.46" y="335.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="1170.2" y="597" width="2.0" height="15.0" fill="rgb(245,142,20)" rx="2" ry="2" />
<text  x="1173.23" y="607.5" ></text>
</g>
<g >
<title>operator delete(void*) (1 samples, 0.17%)</title><rect x="213.6" y="421" width="2.0" height="15.0" fill="rgb(252,162,50)" rx="2" ry="2" />
<text  x="216.58" y="431.5" ></text>
</g>
<g >
<title>cricket::P2PTransportChannel::OnSentPacket(rtc::SentPacket const&amp;) (3 samples, 0.50%)</title><rect x="116.7" y="373" width="6.0" height="15.0" fill="rgb(251,152,14)" rx="2" ry="2" />
<text  x="119.73" y="383.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1000.3" y="565" width="1.9" height="15.0" fill="rgb(212,1,19)" rx="2" ry="2" />
<text  x="1003.25" y="575.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.34%)</title><rect x="379.6" y="389" width="4.0" height="15.0" fill="rgb(217,113,30)" rx="2" ry="2" />
<text  x="382.61" y="399.5" ></text>
</g>
<g >
<title>base::internal::Invoker&lt;base::internal::BindState&lt;base::internal::IgnoreResultHelper&lt;bool (mojo::Connector::*)()&gt;, base::WeakPtr&lt;mojo::Connector&gt; &gt;, void ()&gt;::RunOnce(base::internal::BindStateBase*) (16 samples, 2.68%)</title><rect x="93.0" y="581" width="31.6" height="15.0" fill="rgb(210,65,36)" rx="2" ry="2" />
<text  x="96.02" y="591.5" >ba..</text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (8 samples, 1.34%)</title><rect x="466.6" y="373" width="15.8" height="15.0" fill="rgb(235,118,46)" rx="2" ry="2" />
<text  x="469.58" y="383.5" ></text>
</g>
<g >
<title>mojo::InterfaceEndpointClient::HandleValidatedMessage(mojo::Message*) (62 samples, 10.39%)</title><rect x="725.5" y="405" width="122.6" height="15.0" fill="rgb(235,180,20)" rx="2" ry="2" />
<text  x="728.51" y="415.5" >mojo::Interface..</text>
</g>
<g >
<title>mach_msg (1 samples, 0.17%)</title><rect x="571.3" y="213" width="2.0" height="15.0" fill="rgb(237,112,35)" rx="2" ry="2" />
<text  x="574.34" y="223.5" ></text>
</g>
<g >
<title>webrtc::voe::(anonymous namespace)::ChannelSend::OnRecoverableUplinkPacketLossRate(float) (1 samples, 0.17%)</title><rect x="498.2" y="373" width="2.0" height="15.0" fill="rgb(216,164,52)" rx="2" ry="2" />
<text  x="501.21" y="383.5" ></text>
</g>
<g >
<title>rtc::VideoBroadcaster::OnFrame(webrtc::VideoFrame const&amp;) (4 samples, 0.67%)</title><rect x="678.1" y="501" width="7.9" height="15.0" fill="rgb(249,37,13)" rx="2" ry="2" />
<text  x="681.07" y="511.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::ReloadEmptyImmediateWorkQueue() (3 samples, 0.50%)</title><rect x="917.2" y="565" width="6.0" height="15.0" fill="rgb(232,133,0)" rx="2" ry="2" />
<text  x="920.24" y="575.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="871.8" y="405" width="2.0" height="15.0" fill="rgb(226,129,18)" rx="2" ry="2" />
<text  x="874.78" y="415.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (6 samples, 1.01%)</title><rect x="1085.2" y="517" width="11.9" height="15.0" fill="rgb(251,155,27)" rx="2" ry="2" />
<text  x="1088.24" y="527.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="120.7" y="213" width="2.0" height="15.0" fill="rgb(247,192,40)" rx="2" ry="2" />
<text  x="123.69" y="223.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::Release() const (4 samples, 0.67%)</title><rect x="156.3" y="501" width="7.9" height="15.0" fill="rgb(227,5,21)" rx="2" ry="2" />
<text  x="159.26" y="511.5" ></text>
</g>
<g >
<title>mojo::SimpleWatcher::OnHandleReady(int, unsigned int, mojo::HandleSignalsState const&amp;) (112 samples, 18.76%)</title><rect x="688.0" y="565" width="221.3" height="15.0" fill="rgb(223,66,12)" rx="2" ry="2" />
<text  x="690.96" y="575.5" >mojo::SimpleWatcher::OnHandle..</text>
</g>
<g >
<title>mojo::internal::Buffer::Allocate(unsigned long) (4 samples, 0.67%)</title><rect x="324.3" y="341" width="7.9" height="15.0" fill="rgb(209,100,32)" rx="2" ry="2" />
<text  x="327.27" y="351.5" ></text>
</g>
<g >
<title>webrtc::video_coding::RtpFrameReferenceFinder::ManageFrame(std::__Cr::unique_ptr&lt;webrtc::video_coding::RtpFrameObject, std::__Cr::default_delete&lt;webrtc::video_coding::RtpFrameObject&gt; &gt;) (6 samples, 1.01%)</title><rect x="427.1" y="293" width="11.8" height="15.0" fill="rgb(215,62,23)" rx="2" ry="2" />
<text  x="430.05" y="303.5" ></text>
</g>
<g >
<title>cricket::Connection::Ping(long long) (1 samples, 0.17%)</title><rect x="634.6" y="501" width="2.0" height="15.0" fill="rgb(225,60,38)" rx="2" ry="2" />
<text  x="637.59" y="511.5" ></text>
</g>
<g >
<title>MojoAppendMessageDataImpl (1 samples, 0.17%)</title><rect x="320.3" y="309" width="2.0" height="15.0" fill="rgb(237,144,50)" rx="2" ry="2" />
<text  x="323.32" y="319.5" ></text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (7 samples, 1.17%)</title><rect x="504.1" y="421" width="13.9" height="15.0" fill="rgb(242,97,8)" rx="2" ry="2" />
<text  x="507.14" y="431.5" ></text>
</g>
<g >
<title>rtc::CopyOnWriteBuffer::operator=(rtc::CopyOnWriteBuffer&amp;&amp;) (2 samples, 0.34%)</title><rect x="774.9" y="213" width="4.0" height="15.0" fill="rgb(240,46,43)" rx="2" ry="2" />
<text  x="777.92" y="223.5" ></text>
</g>
<g >
<title>webrtc::video_coding::PacketBuffer::FindFrames(unsigned short) (3 samples, 0.50%)</title><rect x="438.9" y="309" width="5.9" height="15.0" fill="rgb(211,133,53)" rx="2" ry="2" />
<text  x="441.91" y="319.5" ></text>
</g>
<g >
<title>mojo::internal::MultiplexRouter::InterfaceEndpoint::SendMessage(mojo::Message*) (4 samples, 0.67%)</title><rect x="180.0" y="341" width="7.9" height="15.0" fill="rgb(208,54,51)" rx="2" ry="2" />
<text  x="182.98" y="351.5" ></text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (3 samples, 0.50%)</title><rect x="680.1" y="453" width="5.9" height="15.0" fill="rgb(252,10,14)" rx="2" ry="2" />
<text  x="683.05" y="463.5" ></text>
</g>
<g >
<title>webrtc::RemoteEstimatorProxy::IncomingPacket(long long, unsigned long, webrtc::RTPHeader const&amp;) (2 samples, 0.34%)</title><rect x="547.6" y="437" width="4.0" height="15.0" fill="rgb(220,115,23)" rx="2" ry="2" />
<text  x="550.62" y="447.5" ></text>
</g>
<g >
<title>webrtc::Packet::Packet(webrtc::Packet&amp;&amp;) (1 samples, 0.17%)</title><rect x="533.8" y="341" width="2.0" height="15.0" fill="rgb(253,228,17)" rx="2" ry="2" />
<text  x="536.79" y="351.5" ></text>
</g>
<g >
<title>base::debug::GlobalActivityTracker::ScopedThreadActivity::~ScopedThreadActivity() (1 samples, 0.17%)</title><rect x="1061.5" y="469" width="2.0" height="15.0" fill="rgb(231,36,52)" rx="2" ry="2" />
<text  x="1064.52" y="479.5" ></text>
</g>
<g >
<title>mojo::InterfaceEndpointClient::HandleIncomingMessage(mojo::Message*) (14 samples, 2.35%)</title><rect x="95.0" y="485" width="27.7" height="15.0" fill="rgb(211,95,53)" rx="2" ry="2" />
<text  x="97.99" y="495.5" >m..</text>
</g>
<g >
<title>webrtc::rtcp::TransportFeedback::Parse(webrtc::rtcp::CommonHeader const&amp;) (1 samples, 0.17%)</title><rect x="569.4" y="421" width="1.9" height="15.0" fill="rgb(211,139,14)" rx="2" ry="2" />
<text  x="572.36" y="431.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="778.9" y="181" width="2.0" height="15.0" fill="rgb(243,145,39)" rx="2" ry="2" />
<text  x="781.88" y="191.5" ></text>
</g>
<g >
<title>rtc::AsyncInvoker::OnMessage(rtc::Message*) (151 samples, 25.29%)</title><rect x="342.1" y="533" width="298.4" height="15.0" fill="rgb(243,14,15)" rx="2" ry="2" />
<text  x="345.06" y="543.5" >rtc::AsyncInvoker::OnMessage(rtc::Messag..</text>
</g>
<g >
<title>webrtc::Histogram::NumBuckets() const (1 samples, 0.17%)</title><rect x="529.8" y="325" width="2.0" height="15.0" fill="rgb(236,105,22)" rx="2" ry="2" />
<text  x="532.83" y="335.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (4 samples, 0.67%)</title><rect x="363.8" y="293" width="7.9" height="15.0" fill="rgb(246,171,2)" rx="2" ry="2" />
<text  x="366.80" y="303.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.17%)</title><rect x="308.5" y="213" width="1.9" height="15.0" fill="rgb(224,86,23)" rx="2" ry="2" />
<text  x="311.46" y="223.5" ></text>
</g>
<g >
<title>MojoAppendMessageData (3 samples, 0.50%)</title><rect x="324.3" y="325" width="5.9" height="15.0" fill="rgb(254,139,11)" rx="2" ry="2" />
<text  x="327.27" y="335.5" ></text>
</g>
<g >
<title>mojo::core::ports::Event::GetSerializedSize() const (1 samples, 0.17%)</title><rect x="310.4" y="261" width="2.0" height="15.0" fill="rgb(209,5,36)" rx="2" ry="2" />
<text  x="313.44" y="271.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::AtomicFlagSet::RunActiveCallbacks() const (3 samples, 0.50%)</title><rect x="917.2" y="581" width="6.0" height="15.0" fill="rgb(207,105,44)" rx="2" ry="2" />
<text  x="920.24" y="591.5" ></text>
</g>
<g >
<title>base::MessagePump::Delegate::NextWorkInfo::remaining_delay() const (1 samples, 0.17%)</title><rect x="21.9" y="629" width="1.9" height="15.0" fill="rgb(206,35,50)" rx="2" ry="2" />
<text  x="24.86" y="639.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="436.9" y="149" width="2.0" height="15.0" fill="rgb(229,95,44)" rx="2" ry="2" />
<text  x="439.93" y="159.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (2 samples, 0.34%)</title><rect x="431.0" y="69" width="4.0" height="15.0" fill="rgb(213,205,49)" rx="2" ry="2" />
<text  x="434.01" y="79.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl::AppendData(unsigned int, unsigned int const*, unsigned int) (1 samples, 0.17%)</title><rect x="187.9" y="277" width="2.0" height="15.0" fill="rgb(230,136,44)" rx="2" ry="2" />
<text  x="190.89" y="287.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="415.2" y="309" width="2.0" height="15.0" fill="rgb(252,207,24)" rx="2" ry="2" />
<text  x="418.19" y="319.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="974.6" y="581" width="1.9" height="15.0" fill="rgb(253,216,28)" rx="2" ry="2" />
<text  x="977.56" y="591.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() const (6 samples, 1.01%)</title><rect x="1085.2" y="533" width="11.9" height="15.0" fill="rgb(249,165,42)" rx="2" ry="2" />
<text  x="1088.24" y="543.5" ></text>
</g>
<g >
<title>webrtc::SequenceCheckerImpl::IsCurrent() const (4 samples, 0.67%)</title><rect x="840.2" y="293" width="7.9" height="15.0" fill="rgb(206,60,44)" rx="2" ry="2" />
<text  x="843.15" y="303.5" ></text>
</g>
<g >
<title>base::Lock::CheckHeldAndUnmark() (2 samples, 0.34%)</title><rect x="1057.6" y="485" width="3.9" height="15.0" fill="rgb(252,29,10)" rx="2" ry="2" />
<text  x="1060.57" y="495.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (3 samples, 0.50%)</title><rect x="933.0" y="549" width="6.0" height="15.0" fill="rgb(245,143,16)" rx="2" ry="2" />
<text  x="936.05" y="559.5" ></text>
</g>
<g >
<title>base::internal::SequenceLocalStorageMap::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="792.7" y="357" width="2.0" height="15.0" fill="rgb(224,167,53)" rx="2" ry="2" />
<text  x="795.71" y="367.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="836.2" y="181" width="2.0" height="15.0" fill="rgb(228,65,7)" rx="2" ry="2" />
<text  x="839.20" y="191.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl::~UserMessageImpl() (1 samples, 0.17%)</title><rect x="856.0" y="357" width="1.9" height="15.0" fill="rgb(241,30,32)" rx="2" ry="2" />
<text  x="858.96" y="367.5" ></text>
</g>
<g >
<title>mojo::core::NodeChannel::WriteChannelMessage(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (1 samples, 0.17%)</title><rect x="183.9" y="165" width="2.0" height="15.0" fill="rgb(242,38,9)" rx="2" ry="2" />
<text  x="186.94" y="175.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::RtpPacket() (1 samples, 0.17%)</title><rect x="518.0" y="437" width="1.9" height="15.0" fill="rgb(209,80,35)" rx="2" ry="2" />
<text  x="520.97" y="447.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (2 samples, 0.34%)</title><rect x="703.8" y="501" width="3.9" height="15.0" fill="rgb(217,118,21)" rx="2" ry="2" />
<text  x="706.77" y="511.5" ></text>
</g>
<g >
<title>webrtc::internal::AudioSendStream::OnPacketFeedbackVector(std::__Cr::vector&lt;webrtc::PacketFeedback, std::__Cr::allocator&lt;webrtc::PacketFeedback&gt; &gt; const&amp;) (2 samples, 0.34%)</title><rect x="496.2" y="389" width="4.0" height="15.0" fill="rgb(236,0,18)" rx="2" ry="2" />
<text  x="499.23" y="399.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (2 samples, 0.34%)</title><rect x="691.9" y="549" width="4.0" height="15.0" fill="rgb(221,198,24)" rx="2" ry="2" />
<text  x="694.91" y="559.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="537.7" y="357" width="2.0" height="15.0" fill="rgb(253,186,19)" rx="2" ry="2" />
<text  x="540.74" y="367.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::UpdateCrossThreadQueueStateLocked() (4 samples, 0.67%)</title><rect x="1144.5" y="517" width="7.9" height="15.0" fill="rgb(251,113,45)" rx="2" ry="2" />
<text  x="1147.54" y="527.5" ></text>
</g>
<g >
<title>webrtc::SendDelayStats::OnSentPacket(int, long long) (2 samples, 0.34%)</title><rect x="630.6" y="485" width="4.0" height="15.0" fill="rgb(237,214,41)" rx="2" ry="2" />
<text  x="633.64" y="495.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoStreamReceiver::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (33 samples, 5.53%)</title><rect x="387.5" y="421" width="65.2" height="15.0" fill="rgb(218,150,53)" rx="2" ry="2" />
<text  x="390.52" y="431.5" >webrtc:..</text>
</g>
<g >
<title>&lt;Unknown Address&gt; (2 samples, 0.34%)</title><rect x="225.4" y="357" width="4.0" height="15.0" fill="rgb(244,172,16)" rx="2" ry="2" />
<text  x="228.44" y="367.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWorkImpl(base::sequence_manager::LazyNow*, bool*) (548 samples, 91.79%)</title><rect x="79.2" y="613" width="1083.1" height="15.0" fill="rgb(236,47,41)" rx="2" ry="2" />
<text  x="82.18" y="623.5" >base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWorkImpl(base::sequence_manager::LazyNow*, bool*)</text>
</g>
<g >
<title>mojo::internal::SerializationContext::SerializationContext() (1 samples, 0.17%)</title><rect x="314.4" y="357" width="2.0" height="15.0" fill="rgb(241,58,6)" rx="2" ry="2" />
<text  x="317.39" y="367.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolClock::Now() (1 samples, 0.17%)</title><rect x="589.1" y="373" width="2.0" height="15.0" fill="rgb(238,11,20)" rx="2" ry="2" />
<text  x="592.13" y="383.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="1160.4" y="533" width="1.9" height="15.0" fill="rgb(250,87,47)" rx="2" ry="2" />
<text  x="1163.35" y="543.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (2 samples, 0.34%)</title><rect x="512.0" y="277" width="4.0" height="15.0" fill="rgb(240,162,28)" rx="2" ry="2" />
<text  x="515.04" y="287.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketReceived::RtpPacketReceived() (1 samples, 0.17%)</title><rect x="413.2" y="373" width="2.0" height="15.0" fill="rgb(248,53,12)" rx="2" ry="2" />
<text  x="416.22" y="383.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (1 samples, 0.17%)</title><rect x="571.3" y="357" width="2.0" height="15.0" fill="rgb(244,218,52)" rx="2" ry="2" />
<text  x="574.34" y="367.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::~RefCountedObject() (2 samples, 0.34%)</title><rect x="160.2" y="485" width="4.0" height="15.0" fill="rgb(242,61,5)" rx="2" ry="2" />
<text  x="163.22" y="495.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (2 samples, 0.34%)</title><rect x="796.7" y="277" width="3.9" height="15.0" fill="rgb(233,83,1)" rx="2" ry="2" />
<text  x="799.67" y="287.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="336.1" y="357" width="2.0" height="15.0" fill="rgb(252,159,20)" rx="2" ry="2" />
<text  x="339.13" y="367.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (3 samples, 0.50%)</title><rect x="954.8" y="565" width="5.9" height="15.0" fill="rgb(225,188,52)" rx="2" ry="2" />
<text  x="957.79" y="575.5" ></text>
</g>
<g >
<title>base::Pickle::Resize(unsigned long) (1 samples, 0.17%)</title><rect x="245.2" y="277" width="2.0" height="15.0" fill="rgb(231,122,28)" rx="2" ry="2" />
<text  x="248.21" y="287.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="1069.4" y="485" width="2.0" height="15.0" fill="rgb(228,176,29)" rx="2" ry="2" />
<text  x="1072.43" y="495.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (2 samples, 0.34%)</title><rect x="423.1" y="229" width="4.0" height="15.0" fill="rgb(234,51,45)" rx="2" ry="2" />
<text  x="426.10" y="239.5" ></text>
</g>
<g >
<title>webrtc::PacedSender::UpdateOutstandingData(long long) (1 samples, 0.17%)</title><rect x="622.7" y="485" width="2.0" height="15.0" fill="rgb(234,76,54)" rx="2" ry="2" />
<text  x="625.73" y="495.5" ></text>
</g>
<g >
<title>mojo::internal::Array_Data&lt;unsigned char&gt;::Validate(void const*, mojo::internal::ValidationContext*, mojo::internal::ContainerValidateParams const*) (1 samples, 0.17%)</title><rect x="852.0" y="357" width="2.0" height="15.0" fill="rgb(227,98,13)" rx="2" ry="2" />
<text  x="855.01" y="367.5" ></text>
</g>
<g >
<title>external_hmac_start(void*) (2 samples, 0.34%)</title><rect x="193.8" y="437" width="4.0" height="15.0" fill="rgb(219,160,33)" rx="2" ry="2" />
<text  x="196.82" y="447.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="688.0" y="533" width="1.9" height="15.0" fill="rgb(252,80,28)" rx="2" ry="2" />
<text  x="690.96" y="543.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::EnsureEnoughWorkersLockRequired(base::internal::ThreadGroup::BaseScopedWorkersExecutor*) (3 samples, 0.50%)</title><rect x="595.1" y="357" width="5.9" height="15.0" fill="rgb(249,184,32)" rx="2" ry="2" />
<text  x="598.06" y="367.5" ></text>
</g>
<g >
<title>free_tiny (3 samples, 0.50%)</title><rect x="640.5" y="517" width="5.9" height="15.0" fill="rgb(211,65,17)" rx="2" ry="2" />
<text  x="643.52" y="527.5" ></text>
</g>
<g >
<title>content::P2PSocketClientImpl::SendWithPacketId(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, rtc::PacketOptions const&amp;, unsigned long long) (59 samples, 9.88%)</title><rect x="221.5" y="389" width="116.6" height="15.0" fill="rgb(205,163,51)" rx="2" ry="2" />
<text  x="224.49" y="399.5" >content::P2PSo..</text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="1075.4" y="501" width="1.9" height="15.0" fill="rgb(252,33,16)" rx="2" ry="2" />
<text  x="1078.36" y="511.5" ></text>
</g>
<g >
<title>rtc::CopyOnWriteBuffer::CopyOnWriteBuffer(unsigned long) (1 samples, 0.17%)</title><rect x="413.2" y="341" width="2.0" height="15.0" fill="rgb(235,193,37)" rx="2" ry="2" />
<text  x="416.22" y="351.5" ></text>
</g>
<g >
<title>base::internal::CallbackBase::~CallbackBase() (1 samples, 0.17%)</title><rect x="91.0" y="581" width="2.0" height="15.0" fill="rgb(209,103,41)" rx="2" ry="2" />
<text  x="94.04" y="591.5" ></text>
</g>
<g >
<title>mojo::core::NodeController::SendUserMessage(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (3 samples, 0.50%)</title><rect x="182.0" y="261" width="5.9" height="15.0" fill="rgb(249,127,38)" rx="2" ry="2" />
<text  x="184.96" y="271.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1045.7" y="501" width="2.0" height="15.0" fill="rgb(236,118,33)" rx="2" ry="2" />
<text  x="1048.71" y="511.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (3 samples, 0.50%)</title><rect x="553.6" y="357" width="5.9" height="15.0" fill="rgb(246,54,2)" rx="2" ry="2" />
<text  x="556.55" y="367.5" ></text>
</g>
<g >
<title>cricket::UDPPort::OnSentPacket(rtc::AsyncPacketSocket*, rtc::SentPacket const&amp;) (3 samples, 0.50%)</title><rect x="116.7" y="389" width="6.0" height="15.0" fill="rgb(250,161,49)" rx="2" ry="2" />
<text  x="119.73" y="399.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="108.8" y="213" width="2.0" height="15.0" fill="rgb(225,12,40)" rx="2" ry="2" />
<text  x="111.83" y="223.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (2 samples, 0.34%)</title><rect x="699.8" y="421" width="4.0" height="15.0" fill="rgb(245,46,9)" rx="2" ry="2" />
<text  x="702.82" y="431.5" ></text>
</g>
<g >
<title>base::subtle::RefCountedThreadSafeBase::AddRef() const (1 samples, 0.17%)</title><rect x="371.7" y="405" width="2.0" height="15.0" fill="rgb(223,151,11)" rx="2" ry="2" />
<text  x="374.71" y="415.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="954.8" y="533" width="2.0" height="15.0" fill="rgb(216,26,0)" rx="2" ry="2" />
<text  x="957.79" y="543.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="691.9" y="501" width="2.0" height="15.0" fill="rgb(211,21,8)" rx="2" ry="2" />
<text  x="694.91" y="511.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::Release() const (2 samples, 0.34%)</title><rect x="652.4" y="501" width="3.9" height="15.0" fill="rgb(226,142,27)" rx="2" ry="2" />
<text  x="655.38" y="511.5" ></text>
</g>
<g >
<title>base::subtle::RefCountedThreadSafeBase::Release() const (1 samples, 0.17%)</title><rect x="91.0" y="565" width="2.0" height="15.0" fill="rgb(226,93,48)" rx="2" ry="2" />
<text  x="94.04" y="575.5" ></text>
</g>
<g >
<title>mach_msg (11 samples, 1.84%)</title><rect x="267.0" y="101" width="21.7" height="15.0" fill="rgb(221,29,44)" rx="2" ry="2" />
<text  x="269.95" y="111.5" >m..</text>
</g>
<g >
<title>EVP_EncryptUpdate (1 samples, 0.17%)</title><rect x="753.2" y="197" width="2.0" height="15.0" fill="rgb(244,122,24)" rx="2" ry="2" />
<text  x="756.18" y="207.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (2 samples, 0.34%)</title><rect x="379.6" y="405" width="4.0" height="15.0" fill="rgb(226,98,12)" rx="2" ry="2" />
<text  x="382.61" y="415.5" ></text>
</g>
<g >
<title>cricket::WebRtcVideoChannel::OnPacketReceived(rtc::CopyOnWriteBuffer, long long) (69 samples, 11.56%)</title><rect x="346.0" y="501" width="136.4" height="15.0" fill="rgb(242,19,21)" rx="2" ry="2" />
<text  x="349.01" y="511.5" >cricket::WebRtcVi..</text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::GuardedTaskPoster::PostTask(base::sequence_manager::internal::PostedTask) (2 samples, 0.34%)</title><rect x="102.9" y="181" width="4.0" height="15.0" fill="rgb(209,166,31)" rx="2" ry="2" />
<text  x="105.90" y="191.5" ></text>
</g>
<g >
<title>webrtc::RtpTransportControllerSend::OnReceivedPacket(webrtc::ReceivedPacket const&amp;) (8 samples, 1.34%)</title><rect x="466.6" y="437" width="15.8" height="15.0" fill="rgb(223,34,5)" rx="2" ry="2" />
<text  x="469.58" y="447.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (1 samples, 0.17%)</title><rect x="1033.9" y="469" width="1.9" height="15.0" fill="rgb(232,82,21)" rx="2" ry="2" />
<text  x="1036.85" y="479.5" ></text>
</g>
<g >
<title>base::Pickle::Pickle(char const*, unsigned long) (1 samples, 0.17%)</title><rect x="800.6" y="341" width="2.0" height="15.0" fill="rgb(238,215,37)" rx="2" ry="2" />
<text  x="803.62" y="351.5" ></text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="948.9" y="517" width="1.9" height="15.0" fill="rgb(225,38,16)" rx="2" ry="2" />
<text  x="951.86" y="527.5" ></text>
</g>
<g >
<title>webrtc::SdpAudioFormat::SdpAudioFormat(webrtc::SdpAudioFormat const&amp;) (1 samples, 0.17%)</title><rect x="543.7" y="357" width="1.9" height="15.0" fill="rgb(213,80,8)" rx="2" ry="2" />
<text  x="546.67" y="367.5" ></text>
</g>
<g >
<title>base::internal::TaskSource::Transaction::~Transaction() (1 samples, 0.17%)</title><rect x="553.6" y="325" width="1.9" height="15.0" fill="rgb(212,116,2)" rx="2" ry="2" />
<text  x="556.55" y="335.5" ></text>
</g>
<g >
<title>base::ObserverList&lt;base::TaskObserver, false, true, base::internal::UncheckedObserverAdapter&gt;::Iter::is_end() const (1 samples, 0.17%)</title><rect x="1041.8" y="517" width="1.9" height="15.0" fill="rgb(229,5,37)" rx="2" ry="2" />
<text  x="1044.76" y="527.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="634.6" y="325" width="2.0" height="15.0" fill="rgb(206,206,50)" rx="2" ry="2" />
<text  x="637.59" y="335.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl::AppendData(unsigned int, unsigned int const*, unsigned int) (3 samples, 0.50%)</title><rect x="324.3" y="277" width="5.9" height="15.0" fill="rgb(205,1,3)" rx="2" ry="2" />
<text  x="327.27" y="287.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (8 samples, 1.34%)</title><rect x="466.6" y="389" width="15.8" height="15.0" fill="rgb(228,120,11)" rx="2" ry="2" />
<text  x="469.58" y="399.5" ></text>
</g>
<g >
<title>MojoReadMessage (21 samples, 3.52%)</title><rect x="859.9" y="485" width="41.5" height="15.0" fill="rgb(224,39,27)" rx="2" ry="2" />
<text  x="862.92" y="495.5" >Moj..</text>
</g>
<g >
<title>__ulock_wait (1 samples, 0.17%)</title><rect x="652.4" y="453" width="2.0" height="15.0" fill="rgb(240,99,34)" rx="2" ry="2" />
<text  x="655.38" y="463.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::RtpPacket() (1 samples, 0.17%)</title><rect x="413.2" y="357" width="2.0" height="15.0" fill="rgb(229,42,17)" rx="2" ry="2" />
<text  x="416.22" y="367.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketReceived::GetHeader(webrtc::RTPHeader*) const (1 samples, 0.17%)</title><rect x="519.9" y="405" width="2.0" height="15.0" fill="rgb(244,190,52)" rx="2" ry="2" />
<text  x="522.95" y="415.5" ></text>
</g>
<g >
<title>_pthread_start (597 samples, 100.00%)</title><rect x="10.0" y="757" width="1180.0" height="15.0" fill="rgb(239,3,51)" rx="2" ry="2" />
<text  x="13.00" y="767.5" >_pthread_start</text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="820.4" y="213" width="2.0" height="15.0" fill="rgb(207,164,21)" rx="2" ry="2" />
<text  x="823.39" y="223.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_wait (2 samples, 0.34%)</title><rect x="470.5" y="245" width="4.0" height="15.0" fill="rgb(220,223,43)" rx="2" ry="2" />
<text  x="473.54" y="255.5" ></text>
</g>
<g >
<title>rtc::OpenSSLStreamAdapter::OnEvent(rtc::StreamInterface*, int, int) (1 samples, 0.17%)</title><rect x="741.3" y="277" width="2.0" height="15.0" fill="rgb(226,119,43)" rx="2" ry="2" />
<text  x="744.32" y="287.5" ></text>
</g>
<g >
<title>mojo::core::NodeController::ForwardEvent(mojo::core::ports::NodeName const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::Event, std::__Cr::default_delete&lt;mojo::core::ports::Event&gt; &gt;) (3 samples, 0.50%)</title><rect x="182.0" y="213" width="5.9" height="15.0" fill="rgb(243,1,47)" rx="2" ry="2" />
<text  x="184.96" y="223.5" ></text>
</g>
<g >
<title>webrtc::SendTimeHistory::GetFeedback(webrtc::PacketFeedback*, bool) (1 samples, 0.17%)</title><rect x="494.3" y="373" width="1.9" height="15.0" fill="rgb(205,189,30)" rx="2" ry="2" />
<text  x="497.25" y="383.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::OnPacketReceived(bool, rtc::CopyOnWriteBuffer const&amp;, long long) (4 samples, 0.67%)</title><rect x="102.9" y="245" width="7.9" height="15.0" fill="rgb(208,72,0)" rx="2" ry="2" />
<text  x="105.90" y="255.5" ></text>
</g>
<g >
<title>HMAC_Update (1 samples, 0.17%)</title><rect x="755.2" y="197" width="1.9" height="15.0" fill="rgb(237,48,40)" rx="2" ry="2" />
<text  x="758.16" y="207.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="213.6" y="437" width="2.0" height="15.0" fill="rgb(247,49,53)" rx="2" ry="2" />
<text  x="216.58" y="447.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="911.3" y="581" width="2.0" height="15.0" fill="rgb(232,47,18)" rx="2" ry="2" />
<text  x="914.31" y="591.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (4 samples, 0.67%)</title><rect x="508.1" y="341" width="7.9" height="15.0" fill="rgb(216,186,6)" rx="2" ry="2" />
<text  x="511.09" y="351.5" ></text>
</g>
<g >
<title>cricket::P2PTransportChannel::OnSentPacket(rtc::SentPacket const&amp;) (18 samples, 3.02%)</title><rect x="812.5" y="325" width="35.6" height="15.0" fill="rgb(234,174,15)" rx="2" ry="2" />
<text  x="815.48" y="335.5" >cri..</text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="377.6" y="405" width="2.0" height="15.0" fill="rgb(217,101,51)" rx="2" ry="2" />
<text  x="380.64" y="415.5" ></text>
</g>
<g >
<title>mojo::FilterChain::Accept(mojo::Message*) (65 samples, 10.89%)</title><rect x="725.5" y="421" width="128.5" height="15.0" fill="rgb(232,11,42)" rx="2" ry="2" />
<text  x="728.51" y="431.5" >mojo::FilterChai..</text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="413.2" y="293" width="2.0" height="15.0" fill="rgb(225,158,14)" rx="2" ry="2" />
<text  x="416.22" y="303.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::GetThreadGroupForTraits(base::TaskTraits const&amp;) (1 samples, 0.17%)</title><rect x="618.8" y="389" width="2.0" height="15.0" fill="rgb(236,207,22)" rx="2" ry="2" />
<text  x="621.78" y="399.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.17%)</title><rect x="102.9" y="85" width="2.0" height="15.0" fill="rgb(225,112,51)" rx="2" ry="2" />
<text  x="105.90" y="95.5" ></text>
</g>
<g >
<title>rtc::SocketAddress::ToSensitiveString() const (1 samples, 0.17%)</title><rect x="634.6" y="373" width="2.0" height="15.0" fill="rgb(242,53,16)" rx="2" ry="2" />
<text  x="637.59" y="383.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::~RefCountedObject() (1 samples, 0.17%)</title><rect x="490.3" y="325" width="2.0" height="15.0" fill="rgb(222,164,28)" rx="2" ry="2" />
<text  x="493.30" y="335.5" ></text>
</g>
<g >
<title>cricket::SrtpSession::UnprotectRtp(void*, int, int*) (7 samples, 1.17%)</title><rect x="749.2" y="245" width="13.9" height="15.0" fill="rgb(223,98,41)" rx="2" ry="2" />
<text  x="752.23" y="255.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::MaybeScheduleAdjustMaxTasksLockRequired(base::internal::ThreadGroupImpl::ScopedWorkersExecutor*) (1 samples, 0.17%)</title><rect x="595.1" y="341" width="1.9" height="15.0" fill="rgb(244,13,48)" rx="2" ry="2" />
<text  x="598.06" y="351.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="711.7" y="453" width="2.0" height="15.0" fill="rgb(247,60,6)" rx="2" ry="2" />
<text  x="714.68" y="463.5" ></text>
</g>
<g >
<title>cricket::P2PTransportChannel::CheckAndPing() (3 samples, 0.50%)</title><rect x="634.6" y="517" width="5.9" height="15.0" fill="rgb(239,16,53)" rx="2" ry="2" />
<text  x="637.59" y="527.5" ></text>
</g>
<g >
<title>mojo::core::Core::AppendMessageData(unsigned long, unsigned int, unsigned int const*, unsigned int, MojoAppendMessageDataOptions const*, void**, unsigned int*) (1 samples, 0.17%)</title><rect x="187.9" y="293" width="2.0" height="15.0" fill="rgb(206,127,1)" rx="2" ry="2" />
<text  x="190.89" y="303.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="219.5" y="373" width="2.0" height="15.0" fill="rgb(253,207,38)" rx="2" ry="2" />
<text  x="222.51" y="383.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.17%)</title><rect x="1073.4" y="485" width="2.0" height="15.0" fill="rgb(233,208,48)" rx="2" ry="2" />
<text  x="1076.38" y="495.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (3 samples, 0.50%)</title><rect x="680.1" y="389" width="5.9" height="15.0" fill="rgb(232,3,27)" rx="2" ry="2" />
<text  x="683.05" y="399.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="1045.7" y="485" width="2.0" height="15.0" fill="rgb(247,66,16)" rx="2" ry="2" />
<text  x="1048.71" y="495.5" ></text>
</g>
<g >
<title>base::Lock::CheckUnheldAndMark() (1 samples, 0.17%)</title><rect x="980.5" y="565" width="2.0" height="15.0" fill="rgb(226,18,13)" rx="2" ry="2" />
<text  x="983.49" y="575.5" ></text>
</g>
<g >
<title>mach_msg (2 samples, 0.34%)</title><rect x="476.5" y="245" width="3.9" height="15.0" fill="rgb(228,14,15)" rx="2" ry="2" />
<text  x="479.47" y="255.5" ></text>
</g>
<g >
<title>webrtc::voe::(anonymous namespace)::ChannelSend::CallEncoder(rtc::FunctionView&lt;void (webrtc::AudioEncoder*)&gt;) (1 samples, 0.17%)</title><rect x="498.2" y="357" width="2.0" height="15.0" fill="rgb(214,216,20)" rx="2" ry="2" />
<text  x="501.21" y="367.5" ></text>
</g>
<g >
<title>base::GetProgramCounter() (1 samples, 0.17%)</title><rect x="962.7" y="501" width="2.0" height="15.0" fill="rgb(251,2,12)" rx="2" ry="2" />
<text  x="965.70" y="511.5" ></text>
</g>
<g >
<title>mojo::internal::Buffer::Allocate(unsigned long) (1 samples, 0.17%)</title><rect x="320.3" y="341" width="2.0" height="15.0" fill="rgb(217,65,19)" rx="2" ry="2" />
<text  x="323.32" y="351.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (6 samples, 1.01%)</title><rect x="130.6" y="565" width="11.8" height="15.0" fill="rgb(214,22,41)" rx="2" ry="2" />
<text  x="133.57" y="575.5" ></text>
</g>
<g >
<title>small_malloc_should_clear (1 samples, 0.17%)</title><rect x="324.3" y="149" width="1.9" height="15.0" fill="rgb(205,129,16)" rx="2" ry="2" />
<text  x="327.27" y="159.5" ></text>
</g>
<g >
<title>webrtc::ForwardErrorCorrection::InsertMediaPacket(std::__Cr::list&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, std::__Cr::allocator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt; &gt; &gt;*, webrtc::ForwardErrorCorrection::ReceivedPacket const&amp;) (8 samples, 1.34%)</title><rect x="397.4" y="341" width="15.8" height="15.0" fill="rgb(221,111,25)" rx="2" ry="2" />
<text  x="400.40" y="351.5" ></text>
</g>
<g >
<title>_os_unfair_lock_lock_slow (1 samples, 0.17%)</title><rect x="652.4" y="469" width="2.0" height="15.0" fill="rgb(223,62,48)" rx="2" ry="2" />
<text  x="655.38" y="479.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="1041.8" y="533" width="1.9" height="15.0" fill="rgb(245,164,35)" rx="2" ry="2" />
<text  x="1044.76" y="543.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="1097.1" y="501" width="2.0" height="15.0" fill="rgb(219,94,44)" rx="2" ry="2" />
<text  x="1100.10" y="511.5" ></text>
</g>
<g >
<title>mach_msg_trap (27 samples, 4.52%)</title><rect x="23.8" y="581" width="53.4" height="15.0" fill="rgb(242,169,53)" rx="2" ry="2" />
<text  x="26.84" y="591.5" >mach_..</text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="527.9" y="325" width="1.9" height="15.0" fill="rgb(206,87,19)" rx="2" ry="2" />
<text  x="530.86" y="335.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="527.9" y="293" width="1.9" height="15.0" fill="rgb(215,20,35)" rx="2" ry="2" />
<text  x="530.86" y="303.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1152.4" y="501" width="2.0" height="15.0" fill="rgb(224,94,1)" rx="2" ry="2" />
<text  x="1155.45" y="511.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="97.0" y="229" width="1.9" height="15.0" fill="rgb(217,77,35)" rx="2" ry="2" />
<text  x="99.97" y="239.5" ></text>
</g>
<g >
<title>cricket::ConnectionRequest::OnSent() (1 samples, 0.17%)</title><rect x="634.6" y="421" width="2.0" height="15.0" fill="rgb(225,69,11)" rx="2" ry="2" />
<text  x="637.59" y="431.5" ></text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&gt;::MoveHoleUpAndFillWithElement(unsigned long, base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&amp;&amp;) (1 samples, 0.17%)</title><rect x="1027.9" y="485" width="2.0" height="15.0" fill="rgb(238,49,7)" rx="2" ry="2" />
<text  x="1030.92" y="495.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="102.9" y="133" width="2.0" height="15.0" fill="rgb(249,44,15)" rx="2" ry="2" />
<text  x="105.90" y="143.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="468.6" y="293" width="1.9" height="15.0" fill="rgb(237,192,39)" rx="2" ry="2" />
<text  x="471.56" y="303.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (1 samples, 0.17%)</title><rect x="571.3" y="229" width="2.0" height="15.0" fill="rgb(237,32,54)" rx="2" ry="2" />
<text  x="574.34" y="239.5" ></text>
</g>
<g >
<title>mojo::core::(anonymous namespace)::ChannelMac::SendMessageLocked(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (1 samples, 0.17%)</title><rect x="183.9" y="133" width="2.0" height="15.0" fill="rgb(211,77,43)" rx="2" ry="2" />
<text  x="186.94" y="143.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="834.2" y="197" width="2.0" height="15.0" fill="rgb(216,91,25)" rx="2" ry="2" />
<text  x="837.22" y="207.5" ></text>
</g>
<g >
<title>cricket::StunRequestManager::SendDelayed(cricket::StunRequest*, int) (1 samples, 0.17%)</title><rect x="634.6" y="485" width="2.0" height="15.0" fill="rgb(205,107,44)" rx="2" ry="2" />
<text  x="637.59" y="495.5" ></text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&gt;::MoveHoleDownAndFillWithLeafElement(unsigned long, base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&amp;&amp;) (3 samples, 0.50%)</title><rect x="1154.4" y="517" width="6.0" height="15.0" fill="rgb(254,58,17)" rx="2" ry="2" />
<text  x="1157.42" y="527.5" ></text>
</g>
<g >
<title>cricket::UDPPort::HandleIncomingPacket(rtc::AsyncPacketSocket*, char const*, unsigned long, rtc::SocketAddress const&amp;, long long) (10 samples, 1.68%)</title><rect x="97.0" y="389" width="19.7" height="15.0" fill="rgb(230,4,45)" rx="2" ry="2" />
<text  x="99.97" y="399.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueSelector::SelectWorkQueueToService() (6 samples, 1.01%)</title><rect x="1109.0" y="549" width="11.8" height="15.0" fill="rgb(251,71,36)" rx="2" ry="2" />
<text  x="1111.96" y="559.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (4 samples, 0.67%)</title><rect x="1077.3" y="533" width="7.9" height="15.0" fill="rgb(224,119,4)" rx="2" ry="2" />
<text  x="1080.34" y="543.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::UpdateCrossThreadQueueStateLocked() (2 samples, 0.34%)</title><rect x="1024.0" y="485" width="3.9" height="15.0" fill="rgb(240,73,45)" rx="2" ry="2" />
<text  x="1026.97" y="495.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (2 samples, 0.34%)</title><rect x="470.5" y="277" width="4.0" height="15.0" fill="rgb(227,46,11)" rx="2" ry="2" />
<text  x="473.54" y="287.5" ></text>
</g>
<g >
<title>non-virtual thunk to base::sequence_manager::internal::SequenceManagerImpl::DidRunTask() (1 samples, 0.17%)</title><rect x="1002.2" y="597" width="2.0" height="15.0" fill="rgb(214,21,18)" rx="2" ry="2" />
<text  x="1005.23" y="607.5" ></text>
</g>
<g >
<title>mach_msg (1 samples, 0.17%)</title><rect x="567.4" y="277" width="2.0" height="15.0" fill="rgb(224,94,31)" rx="2" ry="2" />
<text  x="570.39" y="287.5" ></text>
</g>
<g >
<title>base::AlignedAlloc(unsigned long, unsigned long) (1 samples, 0.17%)</title><rect x="324.3" y="245" width="1.9" height="15.0" fill="rgb(215,5,33)" rx="2" ry="2" />
<text  x="327.27" y="255.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="1087.2" y="485" width="2.0" height="15.0" fill="rgb(242,46,5)" rx="2" ry="2" />
<text  x="1090.22" y="495.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="686.0" y="549" width="2.0" height="15.0" fill="rgb(238,58,25)" rx="2" ry="2" />
<text  x="688.98" y="559.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="1045.7" y="469" width="2.0" height="15.0" fill="rgb(234,198,22)" rx="2" ry="2" />
<text  x="1048.71" y="479.5" ></text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::Dispatch(rtc::Message*) (263 samples, 44.05%)</title><rect x="154.3" y="549" width="519.8" height="15.0" fill="rgb(217,38,50)" rx="2" ry="2" />
<text  x="157.29" y="559.5" >jingle_glue::JingleThreadWrapper::Dispatch(rtc::Message*)</text>
</g>
<g >
<title>cricket::DtlsTransport::OnSentPacket(rtc::PacketTransportInternal*, rtc::SentPacket const&amp;) (17 samples, 2.85%)</title><rect x="814.5" y="309" width="33.6" height="15.0" fill="rgb(226,207,44)" rx="2" ry="2" />
<text  x="817.46" y="319.5" >cr..</text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (2 samples, 0.34%)</title><rect x="1089.2" y="485" width="3.9" height="15.0" fill="rgb(228,164,11)" rx="2" ry="2" />
<text  x="1092.20" y="495.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (2 samples, 0.34%)</title><rect x="144.4" y="549" width="4.0" height="15.0" fill="rgb(223,63,47)" rx="2" ry="2" />
<text  x="147.41" y="559.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="883.6" y="405" width="2.0" height="15.0" fill="rgb(249,65,48)" rx="2" ry="2" />
<text  x="886.63" y="415.5" ></text>
</g>
<g >
<title>base::internal::TaskSource::Transaction::~Transaction() (1 samples, 0.17%)</title><rect x="357.9" y="309" width="1.9" height="15.0" fill="rgb(216,155,3)" rx="2" ry="2" />
<text  x="360.87" y="319.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1000.3" y="581" width="1.9" height="15.0" fill="rgb(238,39,40)" rx="2" ry="2" />
<text  x="1003.25" y="591.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroup::PushTaskSourceAndWakeUpWorkersImpl(base::internal::ThreadGroup::BaseScopedWorkersExecutor*, base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (4 samples, 0.67%)</title><rect x="355.9" y="325" width="7.9" height="15.0" fill="rgb(249,168,18)" rx="2" ry="2" />
<text  x="358.90" y="335.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="97.0" y="293" width="1.9" height="15.0" fill="rgb(223,86,43)" rx="2" ry="2" />
<text  x="99.97" y="303.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequence(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (2 samples, 0.34%)</title><rect x="431.0" y="165" width="4.0" height="15.0" fill="rgb(254,53,23)" rx="2" ry="2" />
<text  x="434.01" y="175.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::SignalSentPacket_w(rtc::SentPacket const&amp;) (29 samples, 4.86%)</title><rect x="577.3" y="517" width="57.3" height="15.0" fill="rgb(222,158,50)" rx="2" ry="2" />
<text  x="580.27" y="527.5" >cricke..</text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="583.2" y="469" width="2.0" height="15.0" fill="rgb(227,165,26)" rx="2" ry="2" />
<text  x="586.20" y="479.5" ></text>
</g>
<g >
<title>srtp_unprotect (1 samples, 0.17%)</title><rect x="749.2" y="229" width="2.0" height="15.0" fill="rgb(220,66,36)" rx="2" ry="2" />
<text  x="752.23" y="239.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (1 samples, 0.17%)</title><rect x="767.0" y="149" width="2.0" height="15.0" fill="rgb(246,107,26)" rx="2" ry="2" />
<text  x="770.02" y="159.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl::GetSizeIfSerialized() const (1 samples, 0.17%)</title><rect x="879.7" y="405" width="2.0" height="15.0" fill="rgb(225,195,32)" rx="2" ry="2" />
<text  x="882.68" y="415.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (1 samples, 0.17%)</title><rect x="1126.8" y="501" width="1.9" height="15.0" fill="rgb(230,102,3)" rx="2" ry="2" />
<text  x="1129.75" y="511.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1164.3" y="581" width="2.0" height="15.0" fill="rgb(205,169,53)" rx="2" ry="2" />
<text  x="1167.30" y="591.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (2 samples, 0.34%)</title><rect x="699.8" y="485" width="4.0" height="15.0" fill="rgb(247,90,31)" rx="2" ry="2" />
<text  x="702.82" y="495.5" ></text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="682.0" y="325" width="2.0" height="15.0" fill="rgb(226,190,37)" rx="2" ry="2" />
<text  x="685.03" y="335.5" ></text>
</g>
<g >
<title>base::internal::RegisteredTaskSource::operator=(base::internal::RegisteredTaskSource&amp;&amp;) (1 samples, 0.17%)</title><rect x="510.1" y="261" width="1.9" height="15.0" fill="rgb(207,204,21)" rx="2" ry="2" />
<text  x="513.07" y="271.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="438.9" y="261" width="2.0" height="15.0" fill="rgb(211,88,53)" rx="2" ry="2" />
<text  x="441.91" y="271.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (2 samples, 0.34%)</title><rect x="1162.3" y="597" width="4.0" height="15.0" fill="rgb(244,28,43)" rx="2" ry="2" />
<text  x="1165.33" y="607.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="387.5" y="373" width="2.0" height="15.0" fill="rgb(219,58,31)" rx="2" ry="2" />
<text  x="390.52" y="383.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="974.6" y="565" width="1.9" height="15.0" fill="rgb(207,201,2)" rx="2" ry="2" />
<text  x="977.56" y="575.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (2 samples, 0.34%)</title><rect x="423.1" y="245" width="4.0" height="15.0" fill="rgb(241,221,53)" rx="2" ry="2" />
<text  x="426.10" y="255.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_8::__invoke(_malloc_zone_t*, unsigned long, unsigned long) (1 samples, 0.17%)</title><rect x="308.5" y="181" width="1.9" height="15.0" fill="rgb(230,29,33)" rx="2" ry="2" />
<text  x="311.46" y="191.5" ></text>
</g>
<g >
<title>mach_msg_trap (2 samples, 0.34%)</title><rect x="431.0" y="37" width="4.0" height="15.0" fill="rgb(219,98,7)" rx="2" ry="2" />
<text  x="434.01" y="47.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="697.8" y="501" width="2.0" height="15.0" fill="rgb(247,120,51)" rx="2" ry="2" />
<text  x="700.84" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (2 samples, 0.34%)</title><rect x="966.6" y="549" width="4.0" height="15.0" fill="rgb(243,120,22)" rx="2" ry="2" />
<text  x="969.65" y="559.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (4 samples, 0.67%)</title><rect x="561.5" y="357" width="7.9" height="15.0" fill="rgb(250,92,22)" rx="2" ry="2" />
<text  x="564.46" y="367.5" ></text>
</g>
<g >
<title>std::__Cr::vector&lt;mojo::core::ports::PortRef const*, base::StackAllocator&lt;mojo::core::ports::PortRef const*, 5ul&gt; &gt;::__append(unsigned long) (1 samples, 0.17%)</title><rect x="296.6" y="197" width="2.0" height="15.0" fill="rgb(219,195,24)" rx="2" ry="2" />
<text  x="299.60" y="207.5" ></text>
</g>
<g >
<title>webrtc::PacketBuffer::InsertPacketList(std::__Cr::list&lt;webrtc::Packet, std::__Cr::allocator&lt;webrtc::Packet&gt; &gt;*, webrtc::DecoderDatabase const&amp;, absl::optional&lt;unsigned char&gt;*, absl::optional&lt;unsigned char&gt;*, webrtc::StatisticsCalculator*) (1 samples, 0.17%)</title><rect x="535.8" y="341" width="1.9" height="15.0" fill="rgb(234,77,25)" rx="2" ry="2" />
<text  x="538.76" y="351.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueue::TakeImmediateIncomingQueueTasks() (3 samples, 0.50%)</title><rect x="1024.0" y="517" width="5.9" height="15.0" fill="rgb(230,51,28)" rx="2" ry="2" />
<text  x="1026.97" y="527.5" ></text>
</g>
<g >
<title>logging::ShouldCreateLogMessage(int) (1 samples, 0.17%)</title><rect x="316.4" y="341" width="1.9" height="15.0" fill="rgb(217,101,41)" rx="2" ry="2" />
<text  x="319.37" y="351.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="964.7" y="549" width="1.9" height="15.0" fill="rgb(216,2,40)" rx="2" ry="2" />
<text  x="967.67" y="559.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="527.9" y="261" width="1.9" height="15.0" fill="rgb(213,193,3)" rx="2" ry="2" />
<text  x="530.86" y="271.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="180.0" y="277" width="2.0" height="15.0" fill="rgb(242,52,17)" rx="2" ry="2" />
<text  x="182.98" y="287.5" ></text>
</g>
<g >
<title>base::internal::BindState&lt;void (jingle_glue::JingleThreadWrapper::*)(int), base::WeakPtr&lt;jingle_glue::JingleThreadWrapper&gt;, int&gt;::Destroy(base::internal::BindStateBase const*) (1 samples, 0.17%)</title><rect x="913.3" y="597" width="2.0" height="15.0" fill="rgb(223,189,35)" rx="2" ry="2" />
<text  x="916.28" y="607.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::DemuxPacket(rtc::CopyOnWriteBuffer, long long) (9 samples, 1.51%)</title><rect x="763.1" y="245" width="17.8" height="15.0" fill="rgb(229,26,24)" rx="2" ry="2" />
<text  x="766.07" y="255.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="1063.5" y="485" width="2.0" height="15.0" fill="rgb(231,96,5)" rx="2" ry="2" />
<text  x="1066.50" y="495.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (3 samples, 0.50%)</title><rect x="1172.2" y="597" width="5.9" height="15.0" fill="rgb(251,127,6)" rx="2" ry="2" />
<text  x="1175.21" y="607.5" ></text>
</g>
<g >
<title>IPC::Message::Message() (2 samples, 0.34%)</title><rect x="229.4" y="357" width="4.0" height="15.0" fill="rgb(248,141,37)" rx="2" ry="2" />
<text  x="232.40" y="367.5" ></text>
</g>
<g >
<title>mojo::InterfaceEndpointClient::Accept(mojo::Message*) (25 samples, 4.19%)</title><rect x="249.2" y="357" width="49.4" height="15.0" fill="rgb(225,207,14)" rx="2" ry="2" />
<text  x="252.16" y="367.5" >mojo..</text>
</g>
<g >
<title>base::Thread::ThreadMain() (597 samples, 100.00%)</title><rect x="10.0" y="709" width="1180.0" height="15.0" fill="rgb(233,70,33)" rx="2" ry="2" />
<text  x="13.00" y="719.5" >base::Thread::ThreadMain()</text>
</g>
<g >
<title>void base::internal::FunctorTraits&lt;void (content::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::*)(scoped_refptr&lt;media::VideoFrame&gt;), void&gt;::Invoke&lt;void (content::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::*)(scoped_refptr&lt;media::VideoFrame&gt;), scoped_refptr&lt;content::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter&gt;, scoped_refptr&lt;media::VideoFrame&gt; &gt;(void (content::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::*)(scoped_refptr&lt;media::VideoFrame&gt;), scoped_refptr&lt;content::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter&gt;&amp;&amp;, scoped_refptr&lt;media::VideoFrame&gt;&amp;&amp;) (4 samples, 0.67%)</title><rect x="678.1" y="581" width="7.9" height="15.0" fill="rgb(210,144,32)" rx="2" ry="2" />
<text  x="681.07" y="591.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="861.9" y="437" width="2.0" height="15.0" fill="rgb(236,3,1)" rx="2" ry="2" />
<text  x="864.89" y="447.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (2 samples, 0.34%)</title><rect x="431.0" y="181" width="4.0" height="15.0" fill="rgb(228,44,31)" rx="2" ry="2" />
<text  x="434.01" y="191.5" ></text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::PostTaskInternal(rtc::Location const&amp;, int, rtc::MessageHandler*, unsigned int, rtc::MessageData*) (2 samples, 0.34%)</title><rect x="636.6" y="501" width="3.9" height="15.0" fill="rgb(245,212,48)" rx="2" ry="2" />
<text  x="639.57" y="511.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="108.8" y="165" width="2.0" height="15.0" fill="rgb(244,17,0)" rx="2" ry="2" />
<text  x="111.83" y="175.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="1120.8" y="533" width="2.0" height="15.0" fill="rgb(247,150,40)" rx="2" ry="2" />
<text  x="1123.82" y="543.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="778.9" y="85" width="2.0" height="15.0" fill="rgb(221,144,17)" rx="2" ry="2" />
<text  x="781.88" y="95.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (12 samples, 2.01%)</title><rect x="976.5" y="581" width="23.8" height="15.0" fill="rgb(232,142,38)" rx="2" ry="2" />
<text  x="979.53" y="591.5" >b..</text>
</g>
<g >
<title>base::internal::LockImpl::Unlock() (2 samples, 0.34%)</title><rect x="1099.1" y="501" width="3.9" height="15.0" fill="rgb(229,1,4)" rx="2" ry="2" />
<text  x="1102.08" y="511.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (19 samples, 3.18%)</title><rect x="585.2" y="453" width="37.5" height="15.0" fill="rgb(227,207,36)" rx="2" ry="2" />
<text  x="588.18" y="463.5" >bas..</text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::MoveReadyDelayedTasksToWorkQueues(base::sequence_manager::LazyNow*) (6 samples, 1.01%)</title><rect x="1029.9" y="549" width="11.9" height="15.0" fill="rgb(216,27,22)" rx="2" ry="2" />
<text  x="1032.90" y="559.5" ></text>
</g>
<g >
<title>base::internal::Sequence::BeginTransaction() (1 samples, 0.17%)</title><rect x="353.9" y="341" width="2.0" height="15.0" fill="rgb(210,113,20)" rx="2" ry="2" />
<text  x="356.92" y="351.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="956.8" y="533" width="1.9" height="15.0" fill="rgb(235,62,45)" rx="2" ry="2" />
<text  x="959.77" y="543.5" ></text>
</g>
<g >
<title>malloc_zone_memalign (1 samples, 0.17%)</title><rect x="324.3" y="213" width="1.9" height="15.0" fill="rgb(238,27,1)" rx="2" ry="2" />
<text  x="327.27" y="223.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (2 samples, 0.34%)</title><rect x="423.1" y="293" width="4.0" height="15.0" fill="rgb(207,134,10)" rx="2" ry="2" />
<text  x="426.10" y="303.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::SignalSentPacket_n(rtc::SentPacket const&amp;) (2 samples, 0.34%)</title><rect x="118.7" y="325" width="4.0" height="15.0" fill="rgb(233,195,11)" rx="2" ry="2" />
<text  x="121.71" y="335.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="357.9" y="293" width="1.9" height="15.0" fill="rgb(248,42,12)" rx="2" ry="2" />
<text  x="360.87" y="303.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (3 samples, 0.50%)</title><rect x="680.1" y="469" width="5.9" height="15.0" fill="rgb(208,105,4)" rx="2" ry="2" />
<text  x="683.05" y="479.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="583.2" y="453" width="2.0" height="15.0" fill="rgb(206,175,4)" rx="2" ry="2" />
<text  x="586.20" y="463.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (1 samples, 0.17%)</title><rect x="571.3" y="309" width="2.0" height="15.0" fill="rgb(219,106,32)" rx="2" ry="2" />
<text  x="574.34" y="319.5" ></text>
</g>
<g >
<title>mach_msg_trap (7 samples, 1.17%)</title><rect x="656.3" y="453" width="13.9" height="15.0" fill="rgb(210,25,33)" rx="2" ry="2" />
<text  x="659.33" y="463.5" ></text>
</g>
<g >
<title>base::Lock::CheckUnheldAndMark() (1 samples, 0.17%)</title><rect x="816.4" y="245" width="2.0" height="15.0" fill="rgb(211,93,51)" rx="2" ry="2" />
<text  x="819.43" y="255.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="691.9" y="517" width="2.0" height="15.0" fill="rgb(239,100,48)" rx="2" ry="2" />
<text  x="694.91" y="527.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="336.1" y="277" width="2.0" height="15.0" fill="rgb(206,163,46)" rx="2" ry="2" />
<text  x="339.13" y="287.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="907.4" y="469" width="1.9" height="15.0" fill="rgb(232,132,2)" rx="2" ry="2" />
<text  x="910.35" y="479.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::GuardedTaskPoster::PostTask(base::sequence_manager::internal::PostedTask) (2 samples, 0.34%)</title><rect x="636.6" y="469" width="3.9" height="15.0" fill="rgb(251,55,53)" rx="2" ry="2" />
<text  x="639.57" y="479.5" ></text>
</g>
<g >
<title>mojo::core::(anonymous namespace)::ChannelMac::Write(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (1 samples, 0.17%)</title><rect x="183.9" y="149" width="2.0" height="15.0" fill="rgb(248,59,9)" rx="2" ry="2" />
<text  x="186.94" y="159.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="543.7" y="229" width="1.9" height="15.0" fill="rgb(246,27,8)" rx="2" ry="2" />
<text  x="546.67" y="239.5" ></text>
</g>
<g >
<title>webrtc::(anonymous namespace)::AudioCodingModuleImpl::ReceiveCodec() const (1 samples, 0.17%)</title><rect x="543.7" y="389" width="1.9" height="15.0" fill="rgb(236,149,46)" rx="2" ry="2" />
<text  x="546.67" y="399.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="438.9" y="229" width="2.0" height="15.0" fill="rgb(224,110,20)" rx="2" ry="2" />
<text  x="441.91" y="239.5" ></text>
</g>
<g >
<title>mojo::internal::Buffer::Allocate(unsigned long) (1 samples, 0.17%)</title><rect x="187.9" y="341" width="2.0" height="15.0" fill="rgb(252,121,20)" rx="2" ry="2" />
<text  x="190.89" y="351.5" ></text>
</g>
<g >
<title>cricket::ProxyConnection::Send(void const*, unsigned long, rtc::PacketOptions const&amp;) (7 samples, 1.17%)</title><rect x="176.0" y="453" width="13.9" height="15.0" fill="rgb(208,116,17)" rx="2" ry="2" />
<text  x="179.03" y="463.5" ></text>
</g>
<g >
<title>std::__Cr::__tree&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, std::__Cr::__map_value_compare&lt;unsigned short, std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, std::__Cr::less&lt;unsigned short&gt;, true&gt;, std::__Cr::allocator&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt; &gt; &gt;::erase(std::__Cr::__tree_const_iterator&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, void*&gt;*, long&gt;) (1 samples, 0.17%)</title><rect x="573.3" y="325" width="2.0" height="15.0" fill="rgb(227,56,52)" rx="2" ry="2" />
<text  x="576.32" y="335.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="413.2" y="261" width="2.0" height="15.0" fill="rgb(254,23,27)" rx="2" ry="2" />
<text  x="416.22" y="271.5" ></text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="1055.6" y="485" width="2.0" height="15.0" fill="rgb(225,137,0)" rx="2" ry="2" />
<text  x="1058.59" y="495.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (2 samples, 0.34%)</title><rect x="423.1" y="261" width="4.0" height="15.0" fill="rgb(248,9,3)" rx="2" ry="2" />
<text  x="426.10" y="271.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="725.5" y="389" width="2.0" height="15.0" fill="rgb(228,24,16)" rx="2" ry="2" />
<text  x="728.51" y="399.5" ></text>
</g>
<g >
<title>HMAC_Update (3 samples, 0.50%)</title><rect x="757.1" y="197" width="6.0" height="15.0" fill="rgb(246,183,33)" rx="2" ry="2" />
<text  x="760.14" y="207.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="436.9" y="133" width="2.0" height="15.0" fill="rgb(220,124,47)" rx="2" ry="2" />
<text  x="439.93" y="143.5" ></text>
</g>
<g >
<title>std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;* logging::CheckNEImpl&lt;(anonymous namespace)::TlsVectorEntry*, void*&gt;((anonymous namespace)::TlsVectorEntry* const&amp;, void* const&amp;, char const*) (1 samples, 0.17%)</title><rect x="292.6" y="165" width="2.0" height="15.0" fill="rgb(237,70,30)" rx="2" ry="2" />
<text  x="295.65" y="175.5" ></text>
</g>
<g >
<title>mojo::MessageHandle::Close() (1 samples, 0.17%)</title><rect x="122.7" y="485" width="1.9" height="15.0" fill="rgb(221,139,41)" rx="2" ry="2" />
<text  x="125.66" y="495.5" ></text>
</g>
<g >
<title>mach_msg (2 samples, 0.34%)</title><rect x="670.2" y="469" width="3.9" height="15.0" fill="rgb(233,98,15)" rx="2" ry="2" />
<text  x="673.17" y="479.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="790.7" y="277" width="2.0" height="15.0" fill="rgb(221,211,33)" rx="2" ry="2" />
<text  x="793.74" y="287.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="377.6" y="389" width="2.0" height="15.0" fill="rgb(227,29,0)" rx="2" ry="2" />
<text  x="380.64" y="399.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::EnsureEnoughWorkersLockRequired(base::internal::ThreadGroup::BaseScopedWorkersExecutor*) (2 samples, 0.34%)</title><rect x="563.4" y="325" width="4.0" height="15.0" fill="rgb(219,200,25)" rx="2" ry="2" />
<text  x="566.43" y="335.5" ></text>
</g>
<g >
<title>objc_removeAssociatedObjects (3 samples, 0.50%)</title><rect x="14.0" y="613" width="5.9" height="15.0" fill="rgb(245,132,54)" rx="2" ry="2" />
<text  x="16.95" y="623.5" ></text>
</g>
<g >
<title>aes_hw_ctr32_encrypt_blocks (1 samples, 0.17%)</title><rect x="753.2" y="165" width="2.0" height="15.0" fill="rgb(224,183,17)" rx="2" ry="2" />
<text  x="756.18" y="175.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="705.7" y="469" width="2.0" height="15.0" fill="rgb(232,82,30)" rx="2" ry="2" />
<text  x="708.75" y="479.5" ></text>
</g>
<g >
<title>base::subtle::RefCountedThreadSafeBase::Release() const (2 samples, 0.34%)</title><rect x="87.1" y="549" width="3.9" height="15.0" fill="rgb(253,121,0)" rx="2" ry="2" />
<text  x="90.09" y="559.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::FindOrCreateExtensionInfo(int) (1 samples, 0.17%)</title><rect x="778.9" y="197" width="2.0" height="15.0" fill="rgb(247,202,45)" rx="2" ry="2" />
<text  x="781.88" y="207.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (2 samples, 0.34%)</title><rect x="555.5" y="277" width="4.0" height="15.0" fill="rgb(212,21,1)" rx="2" ry="2" />
<text  x="558.53" y="287.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1150.5" y="469" width="1.9" height="15.0" fill="rgb(209,28,44)" rx="2" ry="2" />
<text  x="1153.47" y="479.5" ></text>
</g>
<g >
<title>cricket::UDPPort::OnReadPacket(rtc::AsyncPacketSocket*, char const*, unsigned long, rtc::SocketAddress const&amp;, long long const&amp;) (1 samples, 0.17%)</title><rect x="786.8" y="325" width="2.0" height="15.0" fill="rgb(210,226,28)" rx="2" ry="2" />
<text  x="789.78" y="335.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::DeliverPacket(webrtc::MediaType, rtc::CopyOnWriteBuffer, long long) (69 samples, 11.56%)</title><rect x="346.0" y="485" width="136.4" height="15.0" fill="rgb(244,117,44)" rx="2" ry="2" />
<text  x="349.01" y="495.5" >webrtc::internal:..</text>
</g>
<g >
<title>cricket::SrtpSession::ProtectRtp(void*, int, int, int*, long long*) (8 samples, 1.34%)</title><rect x="189.9" y="485" width="15.8" height="15.0" fill="rgb(232,175,51)" rx="2" ry="2" />
<text  x="192.87" y="495.5" ></text>
</g>
<g >
<title>std::__Cr::__tree_iterator&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::__tree_node&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, void*&gt;*, long&gt; std::__Cr::__tree&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt;, std::__Cr::less&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;, std::__Cr::allocator&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt; &gt;::find&lt;std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; &gt;(std::__Cr::basic_string&lt;char, std::__Cr::char_traits&lt;char&gt;, std::__Cr::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.17%)</title><rect x="772.9" y="197" width="2.0" height="15.0" fill="rgb(248,184,47)" rx="2" ry="2" />
<text  x="775.95" y="207.5" ></text>
</g>
<g >
<title>base::internal::WorkerThreadStack::Pop() (2 samples, 0.34%)</title><rect x="597.0" y="341" width="4.0" height="15.0" fill="rgb(219,130,51)" rx="2" ry="2" />
<text  x="600.04" y="351.5" ></text>
</g>
<g >
<title>webrtc::VCMEncodedFrame::VCMEncodedFrame() (1 samples, 0.17%)</title><rect x="440.9" y="277" width="2.0" height="15.0" fill="rgb(232,201,31)" rx="2" ry="2" />
<text  x="443.89" y="287.5" ></text>
</g>
<g >
<title>mojo::SimpleWatcher::DiscardReadyState(base::RepeatingCallback&lt;void (unsigned int)&gt; const&amp;, unsigned int, mojo::HandleSignalsState const&amp;) (108 samples, 18.09%)</title><rect x="695.9" y="549" width="213.4" height="15.0" fill="rgb(213,57,44)" rx="2" ry="2" />
<text  x="698.86" y="559.5" >mojo::SimpleWatcher::Discard..</text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::Dispatch(rtc::Message*) (1 samples, 0.17%)</title><rect x="634.6" y="453" width="2.0" height="15.0" fill="rgb(214,88,14)" rx="2" ry="2" />
<text  x="637.59" y="463.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_5::__invoke(_malloc_zone_t*, void*, unsigned long) (1 samples, 0.17%)</title><rect x="245.2" y="213" width="2.0" height="15.0" fill="rgb(211,182,50)" rx="2" ry="2" />
<text  x="248.21" y="223.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (2 samples, 0.34%)</title><rect x="1037.8" y="517" width="4.0" height="15.0" fill="rgb(244,40,49)" rx="2" ry="2" />
<text  x="1040.81" y="527.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="790.7" y="309" width="2.0" height="15.0" fill="rgb(215,116,26)" rx="2" ry="2" />
<text  x="793.74" y="319.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="1126.8" y="485" width="1.9" height="15.0" fill="rgb(242,221,18)" rx="2" ry="2" />
<text  x="1129.75" y="495.5" ></text>
</g>
<g >
<title>cricket::WebRtcVideoChannel::OnRtcpReceived(rtc::CopyOnWriteBuffer, long long) (10 samples, 1.68%)</title><rect x="482.4" y="501" width="19.8" height="15.0" fill="rgb(250,225,4)" rx="2" ry="2" />
<text  x="485.40" y="511.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::FindOrCreateExtensionInfo(int) (1 samples, 0.17%)</title><rect x="110.8" y="245" width="2.0" height="15.0" fill="rgb(234,48,7)" rx="2" ry="2" />
<text  x="113.80" y="255.5" ></text>
</g>
<g >
<title>rtc::RateTracker::AddSamples(unsigned long) (1 samples, 0.17%)</title><rect x="450.8" y="373" width="1.9" height="15.0" fill="rgb(239,27,43)" rx="2" ry="2" />
<text  x="453.77" y="383.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::Release() const (1 samples, 0.17%)</title><rect x="484.4" y="485" width="1.9" height="15.0" fill="rgb(214,201,32)" rx="2" ry="2" />
<text  x="487.37" y="495.5" ></text>
</g>
<g >
<title>operator delete[](void*) (1 samples, 0.17%)</title><rect x="162.2" y="469" width="2.0" height="15.0" fill="rgb(251,35,12)" rx="2" ry="2" />
<text  x="165.19" y="479.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="292.6" y="181" width="2.0" height="15.0" fill="rgb(232,121,15)" rx="2" ry="2" />
<text  x="295.65" y="191.5" ></text>
</g>
<g >
<title>pthread_getspecific (1 samples, 0.17%)</title><rect x="579.2" y="485" width="2.0" height="15.0" fill="rgb(254,89,6)" rx="2" ry="2" />
<text  x="582.25" y="495.5" ></text>
</g>
<g >
<title>cricket::WebRtcVoiceMediaChannel::OnPacketReceived(rtc::CopyOnWriteBuffer, long long) (29 samples, 4.86%)</title><rect x="502.2" y="501" width="57.3" height="15.0" fill="rgb(246,146,40)" rx="2" ry="2" />
<text  x="505.16" y="511.5" >cricke..</text>
</g>
<g >
<title>mojo::core::ports::(anonymous namespace)::UpdateTLS(mojo::core::ports::PortLocker*, mojo::core::ports::PortLocker*) (1 samples, 0.17%)</title><rect x="885.6" y="405" width="2.0" height="15.0" fill="rgb(213,157,13)" rx="2" ry="2" />
<text  x="888.61" y="415.5" ></text>
</g>
<g >
<title>content::P2PSocketClientImpl::SendWithPacketId(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, rtc::PacketOptions const&amp;, unsigned long long) (7 samples, 1.17%)</title><rect x="176.0" y="389" width="13.9" height="15.0" fill="rgb(207,6,49)" rx="2" ry="2" />
<text  x="179.03" y="399.5" ></text>
</g>
<g >
<title>base::allocator::(anonymous namespace)::GetSizeEstimateImpl(base::allocator::AllocatorDispatch const*, void*, void*) (1 samples, 0.17%)</title><rect x="654.4" y="453" width="1.9" height="15.0" fill="rgb(228,76,49)" rx="2" ry="2" />
<text  x="657.36" y="463.5" ></text>
</g>
<g >
<title>mojo::internal::MultiplexRouter::Accept(mojo::Message*) (72 samples, 12.06%)</title><rect x="715.6" y="469" width="142.3" height="15.0" fill="rgb(254,10,16)" rx="2" ry="2" />
<text  x="718.63" y="479.5" >mojo::internal::Mu..</text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="790.7" y="261" width="2.0" height="15.0" fill="rgb(211,132,11)" rx="2" ry="2" />
<text  x="793.74" y="271.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (1 samples, 0.17%)</title><rect x="571.3" y="277" width="2.0" height="15.0" fill="rgb(211,127,50)" rx="2" ry="2" />
<text  x="574.34" y="287.5" ></text>
</g>
<g >
<title>tiny_malloc_from_free_list (1 samples, 0.17%)</title><rect x="790.7" y="245" width="2.0" height="15.0" fill="rgb(235,127,20)" rx="2" ry="2" />
<text  x="793.74" y="255.5" ></text>
</g>
<g >
<title>webrtc::StreamStatisticianImpl::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (1 samples, 0.17%)</title><rect x="450.8" y="405" width="1.9" height="15.0" fill="rgb(252,211,21)" rx="2" ry="2" />
<text  x="453.77" y="415.5" ></text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="486.3" y="405" width="2.0" height="15.0" fill="rgb(227,0,43)" rx="2" ry="2" />
<text  x="489.35" y="415.5" ></text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="1065.5" y="485" width="2.0" height="15.0" fill="rgb(238,160,9)" rx="2" ry="2" />
<text  x="1068.48" y="495.5" ></text>
</g>
<g >
<title>void rtc::FunctionView&lt;void (webrtc::AudioEncoder*)&gt;::CallVoidPtr&lt;webrtc::voe::(anonymous namespace)::ChannelSend::OnRecoverableUplinkPacketLossRate(float)::$_6&gt;(rtc::FunctionView&lt;void (webrtc::AudioEncoder*)&gt;::VoidUnion, webrtc::AudioEncoder*) (1 samples, 0.17%)</title><rect x="498.2" y="325" width="2.0" height="15.0" fill="rgb(221,57,48)" rx="2" ry="2" />
<text  x="501.21" y="335.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (2 samples, 0.34%)</title><rect x="721.6" y="405" width="3.9" height="15.0" fill="rgb(237,145,0)" rx="2" ry="2" />
<text  x="724.56" y="415.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="960.7" y="517" width="2.0" height="15.0" fill="rgb(244,205,51)" rx="2" ry="2" />
<text  x="963.72" y="527.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::~RefCountedObject() (1 samples, 0.17%)</title><rect x="417.2" y="325" width="1.9" height="15.0" fill="rgb(217,191,13)" rx="2" ry="2" />
<text  x="420.17" y="335.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::NotifyBweOfReceivedPacket(webrtc::RtpPacketReceived const&amp;, webrtc::MediaType) (6 samples, 1.01%)</title><rect x="547.6" y="453" width="11.9" height="15.0" fill="rgb(227,114,28)" rx="2" ry="2" />
<text  x="550.62" y="463.5" ></text>
</g>
<g >
<title>base::internal::PriorityQueue::Push(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (2 samples, 0.34%)</title><rect x="591.1" y="357" width="4.0" height="15.0" fill="rgb(238,26,16)" rx="2" ry="2" />
<text  x="594.11" y="367.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (2 samples, 0.34%)</title><rect x="597.0" y="309" width="4.0" height="15.0" fill="rgb(220,67,28)" rx="2" ry="2" />
<text  x="600.04" y="319.5" ></text>
</g>
<g >
<title>mojo::internal::MultiplexRouter::Accept(mojo::Message*) (16 samples, 2.68%)</title><rect x="93.0" y="517" width="31.6" height="15.0" fill="rgb(231,126,26)" rx="2" ry="2" />
<text  x="96.02" y="527.5" >mo..</text>
</g>
<g >
<title>base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;::pop_front() (1 samples, 0.17%)</title><rect x="1136.6" y="533" width="2.0" height="15.0" fill="rgb(208,71,51)" rx="2" ry="2" />
<text  x="1139.63" y="543.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.34%)</title><rect x="796.7" y="341" width="3.9" height="15.0" fill="rgb(223,205,2)" rx="2" ry="2" />
<text  x="799.67" y="351.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (10 samples, 1.68%)</title><rect x="351.9" y="357" width="19.8" height="15.0" fill="rgb(224,189,30)" rx="2" ry="2" />
<text  x="354.94" y="367.5" ></text>
</g>
<g >
<title>base::WaitableEvent::TimedWait(base::TimeDelta const&amp;) (27 samples, 4.52%)</title><rect x="23.8" y="629" width="53.4" height="15.0" fill="rgb(233,148,37)" rx="2" ry="2" />
<text  x="26.84" y="639.5" >base:..</text>
</g>
<g >
<title>pthread_mutex_lock (4 samples, 0.67%)</title><rect x="984.4" y="565" width="7.9" height="15.0" fill="rgb(209,107,25)" rx="2" ry="2" />
<text  x="987.44" y="575.5" ></text>
</g>
<g >
<title>cricket::UDPPort::SendTo(void const*, unsigned long, rtc::SocketAddress const&amp;, rtc::PacketOptions const&amp;, bool) (7 samples, 1.17%)</title><rect x="176.0" y="437" width="13.9" height="15.0" fill="rgb(225,108,45)" rx="2" ry="2" />
<text  x="179.03" y="447.5" ></text>
</g>
<g >
<title>webrtc::RtpTransportControllerSend::OnReceivedPacket(webrtc::ReceivedPacket const&amp;) (4 samples, 0.67%)</title><rect x="551.6" y="437" width="7.9" height="15.0" fill="rgb(232,186,17)" rx="2" ry="2" />
<text  x="554.57" y="447.5" ></text>
</g>
<g >
<title>WebRtcOpus_PacketHasFec (1 samples, 0.17%)</title><rect x="523.9" y="325" width="2.0" height="15.0" fill="rgb(206,75,11)" rx="2" ry="2" />
<text  x="526.90" y="335.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketReceived::RtpPacketReceived() (1 samples, 0.17%)</title><rect x="518.0" y="453" width="1.9" height="15.0" fill="rgb(207,111,15)" rx="2" ry="2" />
<text  x="520.97" y="463.5" ></text>
</g>
<g >
<title>webrtc::TransportFeedbackAdapter::ProcessTransportFeedback(webrtc::rtcp::TransportFeedback const&amp;, webrtc::Timestamp) (5 samples, 0.84%)</title><rect x="490.3" y="405" width="9.9" height="15.0" fill="rgb(233,40,20)" rx="2" ry="2" />
<text  x="493.30" y="415.5" ></text>
</g>
<g >
<title>base::SequenceToken::IsValid() const (1 samples, 0.17%)</title><rect x="1162.3" y="581" width="2.0" height="15.0" fill="rgb(206,176,10)" rx="2" ry="2" />
<text  x="1165.33" y="591.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() (4 samples, 0.67%)</title><rect x="1057.6" y="517" width="7.9" height="15.0" fill="rgb(213,133,14)" rx="2" ry="2" />
<text  x="1060.57" y="527.5" ></text>
</g>
<g >
<title>webrtc::RTCPReceiver::IncomingPacket(unsigned char const*, unsigned long) (8 samples, 1.34%)</title><rect x="486.3" y="453" width="15.9" height="15.0" fill="rgb(218,98,18)" rx="2" ry="2" />
<text  x="489.35" y="463.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="120.7" y="229" width="2.0" height="15.0" fill="rgb(214,54,31)" rx="2" ry="2" />
<text  x="123.69" y="239.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="120.7" y="277" width="2.0" height="15.0" fill="rgb(244,41,46)" rx="2" ry="2" />
<text  x="123.69" y="287.5" ></text>
</g>
<g >
<title>webrtc::PacedSender::UpdateOutstandingData(long long) (1 samples, 0.17%)</title><rect x="488.3" y="405" width="2.0" height="15.0" fill="rgb(236,169,11)" rx="2" ry="2" />
<text  x="491.32" y="415.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (4 samples, 0.67%)</title><rect x="964.7" y="565" width="7.9" height="15.0" fill="rgb(215,26,41)" rx="2" ry="2" />
<text  x="967.67" y="575.5" ></text>
</g>
<g >
<title>mojo::internal::Buffer::Buffer() (1 samples, 0.17%)</title><rect x="312.4" y="341" width="2.0" height="15.0" fill="rgb(241,14,30)" rx="2" ry="2" />
<text  x="315.41" y="351.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="682.0" y="341" width="2.0" height="15.0" fill="rgb(239,91,20)" rx="2" ry="2" />
<text  x="685.03" y="351.5" ></text>
</g>
<g >
<title>-[NSAutoreleasePool drain] (4 samples, 0.67%)</title><rect x="12.0" y="629" width="7.9" height="15.0" fill="rgb(243,203,6)" rx="2" ry="2" />
<text  x="14.98" y="639.5" ></text>
</g>
<g >
<title>mojo::Connector::DispatchMessage(mojo::Message) (16 samples, 2.68%)</title><rect x="93.0" y="549" width="31.6" height="15.0" fill="rgb(210,200,49)" rx="2" ry="2" />
<text  x="96.02" y="559.5" >mo..</text>
</g>
<g >
<title>base::internal::LockImpl::Unlock() (1 samples, 0.17%)</title><rect x="541.7" y="373" width="2.0" height="15.0" fill="rgb(239,195,1)" rx="2" ry="2" />
<text  x="544.69" y="383.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (4 samples, 0.67%)</title><rect x="551.6" y="421" width="7.9" height="15.0" fill="rgb(243,172,18)" rx="2" ry="2" />
<text  x="554.57" y="431.5" ></text>
</g>
<g >
<title>IPC::Message::EnsureMessageAttachmentSet() (1 samples, 0.17%)</title><rect x="322.3" y="341" width="2.0" height="15.0" fill="rgb(215,11,46)" rx="2" ry="2" />
<text  x="325.29" y="351.5" ></text>
</g>
<g >
<title>webrtc::RtpDemuxer::ResolveSink(webrtc::RtpPacketReceived const&amp;) (1 samples, 0.17%)</title><rect x="772.9" y="213" width="2.0" height="15.0" fill="rgb(223,29,48)" rx="2" ry="2" />
<text  x="775.95" y="223.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (3 samples, 0.50%)</title><rect x="476.5" y="309" width="5.9" height="15.0" fill="rgb(240,173,7)" rx="2" ry="2" />
<text  x="479.47" y="319.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="778.9" y="133" width="2.0" height="15.0" fill="rgb(245,114,9)" rx="2" ry="2" />
<text  x="781.88" y="143.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="792.7" y="341" width="2.0" height="15.0" fill="rgb(238,94,51)" rx="2" ry="2" />
<text  x="795.71" y="351.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;::Ring::pop_front() (1 samples, 0.17%)</title><rect x="1136.6" y="517" width="2.0" height="15.0" fill="rgb(246,1,39)" rx="2" ry="2" />
<text  x="1139.63" y="527.5" ></text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::PostTaskInternal(rtc::Location const&amp;, int, rtc::MessageHandler*, unsigned int, rtc::MessageData*) (10 samples, 1.68%)</title><rect x="816.4" y="261" width="19.8" height="15.0" fill="rgb(231,162,53)" rx="2" ry="2" />
<text  x="819.43" y="271.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::DidRunTask() (15 samples, 2.51%)</title><rect x="944.9" y="597" width="29.7" height="15.0" fill="rgb(234,194,13)" rx="2" ry="2" />
<text  x="947.91" y="607.5" >ba..</text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (1 samples, 0.17%)</title><rect x="567.4" y="341" width="2.0" height="15.0" fill="rgb(237,165,18)" rx="2" ry="2" />
<text  x="570.39" y="351.5" ></text>
</g>
<g >
<title>rtc::BufferT&lt;unsigned char, false&gt;::BufferT(rtc::BufferT&lt;unsigned char, false&gt;&amp;&amp;) (1 samples, 0.17%)</title><rect x="533.8" y="325" width="2.0" height="15.0" fill="rgb(249,117,22)" rx="2" ry="2" />
<text  x="536.79" y="335.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (4 samples, 0.67%)</title><rect x="931.1" y="565" width="7.9" height="15.0" fill="rgb(207,135,26)" rx="2" ry="2" />
<text  x="934.07" y="575.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::DeliverPacket(webrtc::MediaType, rtc::CopyOnWriteBuffer, long long) (28 samples, 4.69%)</title><rect x="504.1" y="485" width="55.4" height="15.0" fill="rgb(250,93,39)" rx="2" ry="2" />
<text  x="507.14" y="495.5" >webrt..</text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (2 samples, 0.34%)</title><rect x="960.7" y="533" width="4.0" height="15.0" fill="rgb(206,223,50)" rx="2" ry="2" />
<text  x="963.72" y="543.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="944.9" y="581" width="2.0" height="15.0" fill="rgb(215,117,20)" rx="2" ry="2" />
<text  x="947.91" y="591.5" ></text>
</g>
<g >
<title>IPC::ParamTraits&lt;rtc::PacketOptions&gt;::Write(base::Pickle*, rtc::PacketOptions const&amp;) (1 samples, 0.17%)</title><rect x="247.2" y="341" width="2.0" height="15.0" fill="rgb(214,21,5)" rx="2" ry="2" />
<text  x="250.19" y="351.5" ></text>
</g>
<g >
<title>IPC::ParamTraits&lt;net::IPEndPoint&gt;::Write(base::Pickle*, net::IPEndPoint const&amp;) (7 samples, 1.17%)</title><rect x="233.4" y="341" width="13.8" height="15.0" fill="rgb(251,118,25)" rx="2" ry="2" />
<text  x="236.35" y="351.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="336.1" y="325" width="2.0" height="15.0" fill="rgb(225,170,30)" rx="2" ry="2" />
<text  x="339.13" y="335.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::OnPacketReceived(bool, rtc::CopyOnWriteBuffer const&amp;, long long) (4 samples, 0.67%)</title><rect x="765.0" y="197" width="7.9" height="15.0" fill="rgb(228,185,13)" rx="2" ry="2" />
<text  x="768.04" y="207.5" ></text>
</g>
<g >
<title>srtp_unprotect_rtcp_mki (2 samples, 0.34%)</title><rect x="745.3" y="229" width="3.9" height="15.0" fill="rgb(220,208,53)" rx="2" ry="2" />
<text  x="748.28" y="239.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="684.0" y="341" width="2.0" height="15.0" fill="rgb(252,173,1)" rx="2" ry="2" />
<text  x="687.00" y="351.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::~RtpPacket() (1 samples, 0.17%)</title><rect x="112.8" y="277" width="2.0" height="15.0" fill="rgb(237,179,47)" rx="2" ry="2" />
<text  x="115.78" y="287.5" ></text>
</g>
<g >
<title>srtp_aes_icm_openssl_set_iv (1 samples, 0.17%)</title><rect x="201.7" y="437" width="2.0" height="15.0" fill="rgb(245,139,8)" rx="2" ry="2" />
<text  x="204.73" y="447.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::ParseBuffer(unsigned char const*, unsigned long) (1 samples, 0.17%)</title><rect x="778.9" y="213" width="2.0" height="15.0" fill="rgb(226,144,34)" rx="2" ry="2" />
<text  x="781.88" y="223.5" ></text>
</g>
<g >
<title>rtc::IsThreadRefEqual(_opaque_pthread_t* const&amp;, _opaque_pthread_t* const&amp;) (1 samples, 0.17%)</title><rect x="387.5" y="357" width="2.0" height="15.0" fill="rgb(210,175,29)" rx="2" ry="2" />
<text  x="390.52" y="367.5" ></text>
</g>
<g >
<title>mojo::core::Channel::Message::Message(unsigned long, unsigned long, unsigned long, mojo::core::Channel::Message::MessageType) (1 samples, 0.17%)</title><rect x="308.5" y="245" width="1.9" height="15.0" fill="rgb(215,32,53)" rx="2" ry="2" />
<text  x="311.46" y="255.5" ></text>
</g>
<g >
<title>rtc::CriticalSection::Leave() const (1 samples, 0.17%)</title><rect x="203.7" y="437" width="2.0" height="15.0" fill="rgb(224,132,48)" rx="2" ry="2" />
<text  x="206.70" y="447.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="1124.8" y="485" width="2.0" height="15.0" fill="rgb(239,156,43)" rx="2" ry="2" />
<text  x="1127.77" y="495.5" ></text>
</g>
<g >
<title>webrtc::(anonymous namespace)::AudioCodingModuleImpl::ModifyEncoder(rtc::FunctionView&lt;void (std::__Cr::unique_ptr&lt;webrtc::AudioEncoder, std::__Cr::default_delete&lt;webrtc::AudioEncoder&gt; &gt;*)&gt;) (1 samples, 0.17%)</title><rect x="498.2" y="341" width="2.0" height="15.0" fill="rgb(235,18,15)" rx="2" ry="2" />
<text  x="501.21" y="351.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (1 samples, 0.17%)</title><rect x="537.7" y="341" width="2.0" height="15.0" fill="rgb(209,24,47)" rx="2" ry="2" />
<text  x="540.74" y="351.5" ></text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (1 samples, 0.17%)</title><rect x="567.4" y="325" width="2.0" height="15.0" fill="rgb(247,206,25)" rx="2" ry="2" />
<text  x="570.39" y="335.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="958.7" y="533" width="2.0" height="15.0" fill="rgb(223,114,31)" rx="2" ry="2" />
<text  x="961.74" y="543.5" ></text>
</g>
<g >
<title>rtc::IsThreadRefEqual(_opaque_pthread_t* const&amp;, _opaque_pthread_t* const&amp;) (1 samples, 0.17%)</title><rect x="622.7" y="453" width="2.0" height="15.0" fill="rgb(207,132,50)" rx="2" ry="2" />
<text  x="625.73" y="463.5" ></text>
</g>
<g >
<title>mach_msg_trap (1 samples, 0.17%)</title><rect x="183.9" y="85" width="2.0" height="15.0" fill="rgb(224,22,50)" rx="2" ry="2" />
<text  x="186.94" y="95.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroup::PushTaskSourceAndWakeUpWorkersImpl(base::internal::ThreadGroup::BaseScopedWorkersExecutor*, base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (2 samples, 0.34%)</title><rect x="508.1" y="325" width="3.9" height="15.0" fill="rgb(233,161,46)" rx="2" ry="2" />
<text  x="511.09" y="335.5" ></text>
</g>
<g >
<title>szone_free (1 samples, 0.17%)</title><rect x="245.2" y="197" width="2.0" height="15.0" fill="rgb(239,144,35)" rx="2" ry="2" />
<text  x="248.21" y="207.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::EndUnusedPeriod() (2 samples, 0.34%)</title><rect x="597.0" y="325" width="4.0" height="15.0" fill="rgb(215,179,29)" rx="2" ry="2" />
<text  x="600.04" y="335.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="915.3" y="581" width="1.9" height="15.0" fill="rgb(244,139,10)" rx="2" ry="2" />
<text  x="918.26" y="591.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::CleanUpQueues() (2 samples, 0.34%)</title><rect x="946.9" y="581" width="3.9" height="15.0" fill="rgb(210,57,44)" rx="2" ry="2" />
<text  x="949.88" y="591.5" ></text>
</g>
<g >
<title>base::internal::ThreadPoolImpl::PostTaskWithSequenceNow(base::internal::Task, scoped_refptr&lt;base::internal::Sequence&gt;) (6 samples, 1.01%)</title><rect x="504.1" y="357" width="11.9" height="15.0" fill="rgb(225,122,49)" rx="2" ry="2" />
<text  x="507.14" y="367.5" ></text>
</g>
<g >
<title>mojo::core::Core::DestroyMessage(unsigned long) (2 samples, 0.34%)</title><rect x="854.0" y="405" width="3.9" height="15.0" fill="rgb(237,21,1)" rx="2" ry="2" />
<text  x="856.99" y="415.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::Release() const (1 samples, 0.17%)</title><rect x="417.2" y="341" width="1.9" height="15.0" fill="rgb(217,75,39)" rx="2" ry="2" />
<text  x="420.17" y="351.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (4 samples, 0.67%)</title><rect x="561.5" y="405" width="7.9" height="15.0" fill="rgb(239,191,43)" rx="2" ry="2" />
<text  x="564.46" y="415.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (2 samples, 0.34%)</title><rect x="796.7" y="325" width="3.9" height="15.0" fill="rgb(216,142,11)" rx="2" ry="2" />
<text  x="799.67" y="335.5" ></text>
</g>
<g >
<title>base::internal::RegisteredTaskSource::~RegisteredTaskSource() (1 samples, 0.17%)</title><rect x="350.0" y="341" width="1.9" height="15.0" fill="rgb(244,90,34)" rx="2" ry="2" />
<text  x="352.97" y="351.5" ></text>
</g>
<g >
<title>MojoWriteMessage (4 samples, 0.67%)</title><rect x="180.0" y="309" width="7.9" height="15.0" fill="rgb(211,138,18)" rx="2" ry="2" />
<text  x="182.98" y="319.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketReceived::RtpPacketReceived() (2 samples, 0.34%)</title><rect x="379.6" y="453" width="4.0" height="15.0" fill="rgb(209,217,22)" rx="2" ry="2" />
<text  x="382.61" y="463.5" ></text>
</g>
<g >
<title>__psynch_mutexwait (1 samples, 0.17%)</title><rect x="917.2" y="453" width="2.0" height="15.0" fill="rgb(210,3,15)" rx="2" ry="2" />
<text  x="920.24" y="463.5" ></text>
</g>
<g >
<title>base::subtle::RefCountedThreadSafeBase::AddRef() const (1 samples, 0.17%)</title><rect x="253.1" y="261" width="2.0" height="15.0" fill="rgb(233,72,49)" rx="2" ry="2" />
<text  x="256.12" y="271.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (6 samples, 1.01%)</title><rect x="820.4" y="229" width="11.8" height="15.0" fill="rgb(233,209,36)" rx="2" ry="2" />
<text  x="823.39" y="239.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketHistory::RemovePacket(std::__Cr::__map_iterator&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, void*&gt;*, long&gt; &gt;) (1 samples, 0.17%)</title><rect x="573.3" y="341" width="2.0" height="15.0" fill="rgb(207,109,26)" rx="2" ry="2" />
<text  x="576.32" y="351.5" ></text>
</g>
<g >
<title>EVP_CipherInit_ex (1 samples, 0.17%)</title><rect x="201.7" y="421" width="2.0" height="15.0" fill="rgb(219,90,25)" rx="2" ry="2" />
<text  x="204.73" y="431.5" ></text>
</g>
<g >
<title>MojoReadMessageImpl (1 samples, 0.17%)</title><rect x="859.9" y="469" width="2.0" height="15.0" fill="rgb(248,201,23)" rx="2" ry="2" />
<text  x="862.92" y="479.5" ></text>
</g>
<g >
<title>rtc::FireAndForgetAsyncClosure&lt;rtc::MethodFunctor&lt;cricket::BaseChannel, void (cricket::BaseChannel::*)(bool, rtc::CopyOnWriteBuffer const&amp;, long long), void, bool, rtc::CopyOnWriteBuffer const&amp;, long long&gt; &gt;::~FireAndForgetAsyncClosure() (5 samples, 0.84%)</title><rect x="646.4" y="517" width="9.9" height="15.0" fill="rgb(209,123,45)" rx="2" ry="2" />
<text  x="649.45" y="527.5" ></text>
</g>
<g >
<title>webrtc::ReceiveStatisticsProxy::DataCountersUpdated(webrtc::StreamDataCounters const&amp;, unsigned int) (1 samples, 0.17%)</title><rect x="450.8" y="389" width="1.9" height="15.0" fill="rgb(207,38,47)" rx="2" ry="2" />
<text  x="453.77" y="399.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="1020.0" y="485" width="2.0" height="15.0" fill="rgb(251,183,42)" rx="2" ry="2" />
<text  x="1023.02" y="495.5" ></text>
</g>
<g >
<title>rtc::CopyOnWriteBuffer::CopyOnWriteBuffer(unsigned long) (2 samples, 0.34%)</title><rect x="373.7" y="421" width="3.9" height="15.0" fill="rgb(237,101,5)" rx="2" ry="2" />
<text  x="376.69" y="431.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketHistory::RemovePacket(std::__Cr::__map_iterator&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;unsigned short, webrtc::RtpPacketHistory::StoredPacket&gt;, void*&gt;*, long&gt; &gt;) (1 samples, 0.17%)</title><rect x="492.3" y="357" width="2.0" height="15.0" fill="rgb(240,46,23)" rx="2" ry="2" />
<text  x="495.28" y="367.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (2 samples, 0.34%)</title><rect x="512.0" y="293" width="4.0" height="15.0" fill="rgb(206,146,33)" rx="2" ry="2" />
<text  x="515.04" y="303.5" ></text>
</g>
<g >
<title>webrtc::SrtpTransport::OnRtpPacketReceived(rtc::CopyOnWriteBuffer, long long) (16 samples, 2.68%)</title><rect x="749.2" y="261" width="31.7" height="15.0" fill="rgb(227,158,53)" rx="2" ry="2" />
<text  x="752.23" y="271.5" >we..</text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="948.9" y="533" width="1.9" height="15.0" fill="rgb(217,167,9)" rx="2" ry="2" />
<text  x="951.86" y="543.5" ></text>
</g>
<g >
<title>opus_packet_parse_impl (1 samples, 0.17%)</title><rect x="523.9" y="293" width="2.0" height="15.0" fill="rgb(205,181,2)" rx="2" ry="2" />
<text  x="526.90" y="303.5" ></text>
</g>
<g >
<title>szone_size (1 samples, 0.17%)</title><rect x="187.9" y="229" width="2.0" height="15.0" fill="rgb(247,47,7)" rx="2" ry="2" />
<text  x="190.89" y="239.5" ></text>
</g>
<g >
<title>non-virtual thunk to base::sequence_manager::internal::SequenceManagerImpl::OnSystemIdle() (2 samples, 0.34%)</title><rect x="1178.1" y="597" width="4.0" height="15.0" fill="rgb(226,46,47)" rx="2" ry="2" />
<text  x="1181.14" y="607.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="1124.8" y="453" width="2.0" height="15.0" fill="rgb(226,146,51)" rx="2" ry="2" />
<text  x="1127.77" y="463.5" ></text>
</g>
<g >
<title>webrtc::TransportFeedbackAdapter::GetPacketFeedbackVector(webrtc::rtcp::TransportFeedback const&amp;, webrtc::Timestamp) (1 samples, 0.17%)</title><rect x="494.3" y="389" width="1.9" height="15.0" fill="rgb(230,163,7)" rx="2" ry="2" />
<text  x="497.25" y="399.5" ></text>
</g>
<g >
<title>content::P2PSocketClientImpl::Send(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, rtc::PacketOptions const&amp;) (7 samples, 1.17%)</title><rect x="176.0" y="405" width="13.9" height="15.0" fill="rgb(242,131,26)" rx="2" ry="2" />
<text  x="179.03" y="415.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (2 samples, 0.34%)</title><rect x="796.7" y="309" width="3.9" height="15.0" fill="rgb(249,11,8)" rx="2" ry="2" />
<text  x="799.67" y="319.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() const (1 samples, 0.17%)</title><rect x="1075.4" y="549" width="1.9" height="15.0" fill="rgb(213,21,29)" rx="2" ry="2" />
<text  x="1078.36" y="559.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="527.9" y="277" width="1.9" height="15.0" fill="rgb(226,148,42)" rx="2" ry="2" />
<text  x="530.86" y="287.5" ></text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (2 samples, 0.34%)</title><rect x="555.5" y="293" width="4.0" height="15.0" fill="rgb(217,152,48)" rx="2" ry="2" />
<text  x="558.53" y="303.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoSender::DeliverRtcp(unsigned char const*, unsigned long) (8 samples, 1.34%)</title><rect x="486.3" y="469" width="15.9" height="15.0" fill="rgb(225,136,9)" rx="2" ry="2" />
<text  x="489.35" y="479.5" ></text>
</g>
<g >
<title>tiny_malloc_from_free_list (1 samples, 0.17%)</title><rect x="834.2" y="117" width="2.0" height="15.0" fill="rgb(248,125,14)" rx="2" ry="2" />
<text  x="837.22" y="127.5" ></text>
</g>
<g >
<title>base::MessagePumpDefault::Run(base::MessagePump::Delegate*) (594 samples, 99.50%)</title><rect x="10.0" y="645" width="1174.1" height="15.0" fill="rgb(230,95,4)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >base::MessagePumpDefault::Run(base::MessagePump::Delegate*)</text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (2 samples, 0.34%)</title><rect x="431.0" y="213" width="4.0" height="15.0" fill="rgb(228,133,24)" rx="2" ry="2" />
<text  x="434.01" y="223.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::Release() const (1 samples, 0.17%)</title><rect x="112.8" y="261" width="2.0" height="15.0" fill="rgb(243,123,10)" rx="2" ry="2" />
<text  x="115.78" y="271.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::ParseBuffer(unsigned char const*, unsigned long) (1 samples, 0.17%)</title><rect x="110.8" y="261" width="2.0" height="15.0" fill="rgb(218,228,50)" rx="2" ry="2" />
<text  x="113.80" y="271.5" ></text>
</g>
<g >
<title>mach_msg (2 samples, 0.34%)</title><rect x="648.4" y="469" width="4.0" height="15.0" fill="rgb(215,149,7)" rx="2" ry="2" />
<text  x="651.43" y="479.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="654.4" y="469" width="1.9" height="15.0" fill="rgb(226,125,48)" rx="2" ry="2" />
<text  x="657.36" y="479.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::OnPacketReceived(bool, rtc::CopyOnWriteBuffer const&amp;, long long) (1 samples, 0.17%)</title><rect x="743.3" y="245" width="2.0" height="15.0" fill="rgb(228,126,28)" rx="2" ry="2" />
<text  x="746.30" y="255.5" ></text>
</g>
<g >
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="100.9" y="213" width="2.0" height="15.0" fill="rgb(239,6,25)" rx="2" ry="2" />
<text  x="103.92" y="223.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="436.9" y="117" width="2.0" height="15.0" fill="rgb(251,198,39)" rx="2" ry="2" />
<text  x="439.93" y="127.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="1087.2" y="501" width="2.0" height="15.0" fill="rgb(237,167,48)" rx="2" ry="2" />
<text  x="1090.22" y="511.5" ></text>
</g>
<g >
<title>szone_malloc_should_clear (1 samples, 0.17%)</title><rect x="438.9" y="213" width="2.0" height="15.0" fill="rgb(254,150,5)" rx="2" ry="2" />
<text  x="441.91" y="223.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="527.9" y="229" width="1.9" height="15.0" fill="rgb(230,158,32)" rx="2" ry="2" />
<text  x="530.86" y="239.5" ></text>
</g>
<g >
<title>mojo::core::WatcherDispatcher::NotifyHandleState(mojo::core::Dispatcher*, mojo::core::HandleSignalsState const&amp;) (4 samples, 0.67%)</title><rect x="867.8" y="421" width="7.9" height="15.0" fill="rgb(215,84,37)" rx="2" ry="2" />
<text  x="870.82" y="431.5" ></text>
</g>
<g >
<title>mach_absolute_time (1 samples, 0.17%)</title><rect x="782.8" y="277" width="2.0" height="15.0" fill="rgb(240,32,28)" rx="2" ry="2" />
<text  x="785.83" y="287.5" ></text>
</g>
<g >
<title>small_malloc_from_free_list (1 samples, 0.17%)</title><rect x="438.9" y="181" width="2.0" height="15.0" fill="rgb(225,193,8)" rx="2" ry="2" />
<text  x="441.91" y="191.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (3 samples, 0.50%)</title><rect x="680.1" y="437" width="5.9" height="15.0" fill="rgb(250,13,0)" rx="2" ry="2" />
<text  x="683.05" y="447.5" ></text>
</g>
<g >
<title>rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer() (1 samples, 0.17%)</title><rect x="502.2" y="469" width="1.9" height="15.0" fill="rgb(229,107,7)" rx="2" ry="2" />
<text  x="505.16" y="479.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::GetDelayTillNextDelayedTask(base::sequence_manager::LazyNow*) const (4 samples, 0.67%)</title><rect x="923.2" y="581" width="7.9" height="15.0" fill="rgb(223,218,24)" rx="2" ry="2" />
<text  x="926.17" y="591.5" ></text>
</g>
<g >
<title>rtc::AsyncClosure::~AsyncClosure() (7 samples, 1.17%)</title><rect x="656.3" y="501" width="13.9" height="15.0" fill="rgb(245,192,29)" rx="2" ry="2" />
<text  x="659.33" y="511.5" ></text>
</g>
<g >
<title>base::TaskAnnotator::RunTask(char const*, base::PendingTask*) (416 samples, 69.68%)</title><rect x="87.1" y="597" width="822.2" height="15.0" fill="rgb(231,204,20)" rx="2" ry="2" />
<text  x="90.09" y="607.5" >base::TaskAnnotator::RunTask(char const*, base::PendingTask*)</text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="915.3" y="565" width="1.9" height="15.0" fill="rgb(207,157,50)" rx="2" ry="2" />
<text  x="918.26" y="575.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_8::__invoke(_malloc_zone_t*, unsigned long, unsigned long) (1 samples, 0.17%)</title><rect x="324.3" y="197" width="1.9" height="15.0" fill="rgb(229,87,42)" rx="2" ry="2" />
<text  x="327.27" y="207.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="834.2" y="181" width="2.0" height="15.0" fill="rgb(231,63,24)" rx="2" ry="2" />
<text  x="837.22" y="191.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="413.2" y="277" width="2.0" height="15.0" fill="rgb(245,90,46)" rx="2" ry="2" />
<text  x="416.22" y="287.5" ></text>
</g>
<g >
<title>cricket::BaseChannel::SignalSentPacket_n(rtc::SentPacket const&amp;) (11 samples, 1.84%)</title><rect x="816.4" y="277" width="21.8" height="15.0" fill="rgb(243,106,11)" rx="2" ry="2" />
<text  x="819.43" y="287.5" >c..</text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="438.9" y="245" width="2.0" height="15.0" fill="rgb(239,225,52)" rx="2" ry="2" />
<text  x="441.91" y="255.5" ></text>
</g>
<g >
<title>network::mojom::internal::P2PSocketClient_SendComplete_Params_Data::Validate(void const*, mojo::internal::ValidationContext*) (1 samples, 0.17%)</title><rect x="852.0" y="389" width="2.0" height="15.0" fill="rgb(228,158,32)" rx="2" ry="2" />
<text  x="855.01" y="399.5" ></text>
</g>
<g >
<title>base::internal::Invoker&lt;base::internal::BindState&lt;void (*)(base::RepeatingCallback&lt;void (unsigned int)&gt; const&amp;, unsigned int, mojo::HandleSignalsState const&amp;), base::RepeatingCallback&lt;void (unsigned int)&gt; &gt;, void (unsigned int, mojo::HandleSignalsState const&amp;)&gt;::Run(base::internal::BindStateBase*, unsigned int, mojo::HandleSignalsState const&amp;) (1 samples, 0.17%)</title><rect x="689.9" y="549" width="2.0" height="15.0" fill="rgb(231,41,9)" rx="2" ry="2" />
<text  x="692.93" y="559.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="308.5" y="197" width="1.9" height="15.0" fill="rgb(228,221,6)" rx="2" ry="2" />
<text  x="311.46" y="207.5" ></text>
</g>
<g >
<title>webrtc::ForwardErrorCorrection::InsertPacket(webrtc::ForwardErrorCorrection::ReceivedPacket const&amp;, std::__Cr::list&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt;, std::__Cr::allocator&lt;std::__Cr::unique_ptr&lt;webrtc::ForwardErrorCorrection::RecoveredPacket, std::__Cr::default_delete&lt;webrtc::ForwardErrorCorrection::RecoveredPacket&gt; &gt; &gt; &gt;*) (8 samples, 1.34%)</title><rect x="397.4" y="357" width="15.8" height="15.0" fill="rgb(224,145,15)" rx="2" ry="2" />
<text  x="400.40" y="367.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::RequiresTaskTiming() const (5 samples, 0.84%)</title><rect x="1065.5" y="533" width="9.9" height="15.0" fill="rgb(238,215,30)" rx="2" ry="2" />
<text  x="1068.48" y="543.5" ></text>
</g>
<g >
<title>base::internal::WeakPtrBase::~WeakPtrBase() (2 samples, 0.34%)</title><rect x="87.1" y="565" width="3.9" height="15.0" fill="rgb(226,183,5)" rx="2" ry="2" />
<text  x="90.09" y="575.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueue::GetFrontTaskEnqueueOrder(base::sequence_manager::internal::EnqueueOrder*) const (3 samples, 0.50%)</title><rect x="1114.9" y="517" width="5.9" height="15.0" fill="rgb(251,188,49)" rx="2" ry="2" />
<text  x="1117.89" y="527.5" ></text>
</g>
<g >
<title>base::debug::GlobalActivityTracker::ScopedThreadActivity::~ScopedThreadActivity() (1 samples, 0.17%)</title><rect x="1150.5" y="453" width="1.9" height="15.0" fill="rgb(216,132,26)" rx="2" ry="2" />
<text  x="1153.47" y="463.5" ></text>
</g>
<g >
<title>base::internal::WorkerThread::WakeUp() (1 samples, 0.17%)</title><rect x="571.3" y="245" width="2.0" height="15.0" fill="rgb(249,58,21)" rx="2" ry="2" />
<text  x="574.34" y="255.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() const (2 samples, 0.34%)</title><rect x="960.7" y="549" width="4.0" height="15.0" fill="rgb(217,58,41)" rx="2" ry="2" />
<text  x="963.72" y="559.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (19 samples, 3.18%)</title><rect x="585.2" y="485" width="37.5" height="15.0" fill="rgb(214,183,51)" rx="2" ry="2" />
<text  x="588.18" y="495.5" >rtc..</text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 0.17%)</title><rect x="383.6" y="421" width="1.9" height="15.0" fill="rgb(242,189,25)" rx="2" ry="2" />
<text  x="386.57" y="431.5" ></text>
</g>
<g >
<title>pthread_getspecific (1 samples, 0.17%)</title><rect x="480.4" y="245" width="2.0" height="15.0" fill="rgb(222,212,22)" rx="2" ry="2" />
<text  x="483.42" y="255.5" ></text>
</g>
<g >
<title>rtc::Thread::IsCurrent() const (1 samples, 0.17%)</title><rect x="579.2" y="501" width="2.0" height="15.0" fill="rgb(225,28,14)" rx="2" ry="2" />
<text  x="582.25" y="511.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::LazilyDeallocatedDeque&lt;base::sequence_manager::Task, &amp;(base::subtle::TimeTicksNowIgnoringOverride())&gt;::Ring::front() (1 samples, 0.17%)</title><rect x="1008.2" y="533" width="1.9" height="15.0" fill="rgb(246,156,19)" rx="2" ry="2" />
<text  x="1011.16" y="543.5" ></text>
</g>
<g >
<title>mojo::core::NodeController::SendPeerEvent(mojo::core::ports::NodeName const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::Event, std::__Cr::default_delete&lt;mojo::core::ports::Event&gt; &gt;) (3 samples, 0.50%)</title><rect x="182.0" y="197" width="5.9" height="15.0" fill="rgb(230,103,20)" rx="2" ry="2" />
<text  x="184.96" y="207.5" ></text>
</g>
<g >
<title>mojo::internal::ArraySerializer&lt;mojo::ArrayDataView&lt;signed char&gt;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const, mojo::internal::ArrayIterator&lt;mojo::ArrayTraits&lt;std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; &gt;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const, false&gt;, void&gt;::SerializeElements(mojo::internal::ArrayIterator&lt;mojo::ArrayTraits&lt;std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; &gt;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const, false&gt;*, mojo::internal::Buffer*, mojo::internal::Array_Data&lt;signed char&gt;::BufferWriter*, mojo::internal::ContainerValidateParams const*, mojo::internal::SerializationContext*) (1 samples, 0.17%)</title><rect x="318.3" y="341" width="2.0" height="15.0" fill="rgb(221,77,13)" rx="2" ry="2" />
<text  x="321.34" y="351.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="336.1" y="341" width="2.0" height="15.0" fill="rgb(251,13,8)" rx="2" ry="2" />
<text  x="339.13" y="351.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (5 samples, 0.84%)</title><rect x="130.6" y="533" width="9.9" height="15.0" fill="rgb(242,203,17)" rx="2" ry="2" />
<text  x="133.57" y="543.5" ></text>
</g>
<g >
<title>cricket::Port::GetConnection(rtc::SocketAddress const&amp;) (1 samples, 0.17%)</title><rect x="786.8" y="309" width="2.0" height="15.0" fill="rgb(253,50,13)" rx="2" ry="2" />
<text  x="789.78" y="319.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="834.2" y="229" width="2.0" height="15.0" fill="rgb(240,35,38)" rx="2" ry="2" />
<text  x="837.22" y="239.5" ></text>
</g>
<g >
<title>mach_msg (7 samples, 1.17%)</title><rect x="656.3" y="469" width="13.9" height="15.0" fill="rgb(220,22,1)" rx="2" ry="2" />
<text  x="659.33" y="479.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="834.2" y="165" width="2.0" height="15.0" fill="rgb(254,45,42)" rx="2" ry="2" />
<text  x="837.22" y="175.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (2 samples, 0.34%)</title><rect x="431.0" y="133" width="4.0" height="15.0" fill="rgb(214,128,21)" rx="2" ry="2" />
<text  x="434.01" y="143.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="1025.9" y="421" width="2.0" height="15.0" fill="rgb(245,221,25)" rx="2" ry="2" />
<text  x="1028.95" y="431.5" ></text>
</g>
<g >
<title>void sigslot::_opaque_connection::emitter&lt;cricket::BaseChannel, rtc::SentPacket const&amp;&gt;(sigslot::_opaque_connection const*, rtc::SentPacket const&amp;) (1 samples, 0.17%)</title><rect x="838.2" y="277" width="2.0" height="15.0" fill="rgb(224,171,24)" rx="2" ry="2" />
<text  x="841.17" y="287.5" ></text>
</g>
<g >
<title>non-virtual thunk to base::sequence_manager::internal::SequenceManagerImpl::TakeTask() (80 samples, 13.40%)</title><rect x="1004.2" y="597" width="158.1" height="15.0" fill="rgb(228,69,25)" rx="2" ry="2" />
<text  x="1007.20" y="607.5" >non-virtual thunk to..</text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="322.3" y="325" width="2.0" height="15.0" fill="rgb(250,79,13)" rx="2" ry="2" />
<text  x="325.29" y="335.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="120.7" y="293" width="2.0" height="15.0" fill="rgb(211,91,29)" rx="2" ry="2" />
<text  x="123.69" y="303.5" ></text>
</g>
<g >
<title>mojo::core::RequestContext::RequestContext() (1 samples, 0.17%)</title><rect x="320.3" y="277" width="2.0" height="15.0" fill="rgb(237,47,39)" rx="2" ry="2" />
<text  x="323.32" y="287.5" ></text>
</g>
<g >
<title>base::GetProgramCounter() (1 samples, 0.17%)</title><rect x="1126.8" y="453" width="1.9" height="15.0" fill="rgb(216,100,9)" rx="2" ry="2" />
<text  x="1129.75" y="463.5" ></text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&gt;::FillHole(unsigned long, base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&amp;&amp;) (1 samples, 0.17%)</title><rect x="1027.9" y="469" width="2.0" height="15.0" fill="rgb(223,165,6)" rx="2" ry="2" />
<text  x="1030.92" y="479.5" ></text>
</g>
<g >
<title>mojo::core::ports::UserMessageEvent::~UserMessageEvent() (1 samples, 0.17%)</title><rect x="856.0" y="389" width="1.9" height="15.0" fill="rgb(249,150,9)" rx="2" ry="2" />
<text  x="858.96" y="399.5" ></text>
</g>
<g >
<title>webrtc::RtpVideoStreamReceiver::ParseAndHandleEncapsulatingHeader(webrtc::RtpPacketReceived const&amp;) (30 samples, 5.03%)</title><rect x="389.5" y="405" width="59.3" height="15.0" fill="rgb(222,124,54)" rx="2" ry="2" />
<text  x="392.50" y="415.5" >webrtc..</text>
</g>
<g >
<title>rtc::CriticalSection::Leave() const (1 samples, 0.17%)</title><rect x="622.7" y="469" width="2.0" height="15.0" fill="rgb(246,169,32)" rx="2" ry="2" />
<text  x="625.73" y="479.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="1006.2" y="533" width="2.0" height="15.0" fill="rgb(205,31,40)" rx="2" ry="2" />
<text  x="1009.18" y="543.5" ></text>
</g>
<g >
<title>mojo::native::internal::NativeStruct_Data::NativeStruct_Data() (1 samples, 0.17%)</title><rect x="332.2" y="341" width="2.0" height="15.0" fill="rgb(205,224,7)" rx="2" ry="2" />
<text  x="335.18" y="351.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (2 samples, 0.34%)</title><rect x="423.1" y="325" width="4.0" height="15.0" fill="rgb(231,28,16)" rx="2" ry="2" />
<text  x="426.10" y="335.5" ></text>
</g>
<g >
<title>mojo::core::Watch::NotifyState(mojo::core::HandleSignalsState const&amp;, bool) (1 samples, 0.17%)</title><rect x="873.8" y="405" width="1.9" height="15.0" fill="rgb(254,146,23)" rx="2" ry="2" />
<text  x="876.75" y="415.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="939.0" y="533" width="2.0" height="15.0" fill="rgb(212,162,15)" rx="2" ry="2" />
<text  x="941.98" y="543.5" ></text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (13 samples, 2.18%)</title><rect x="348.0" y="421" width="25.7" height="15.0" fill="rgb(247,66,33)" rx="2" ry="2" />
<text  x="350.99" y="431.5" >(..</text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::TakeTask() (80 samples, 13.40%)</title><rect x="1004.2" y="581" width="158.1" height="15.0" fill="rgb(208,58,35)" rx="2" ry="2" />
<text  x="1007.20" y="591.5" >base::sequence_manag..</text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueueSets::OnTaskPushedToEmptyQueue(base::sequence_manager::internal::WorkQueue*) (1 samples, 0.17%)</title><rect x="1027.9" y="501" width="2.0" height="15.0" fill="rgb(235,80,54)" rx="2" ry="2" />
<text  x="1030.92" y="511.5" ></text>
</g>
<g >
<title>mach_msg (1 samples, 0.17%)</title><rect x="183.9" y="101" width="2.0" height="15.0" fill="rgb(248,183,28)" rx="2" ry="2" />
<text  x="186.94" y="111.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="108.8" y="181" width="2.0" height="15.0" fill="rgb(251,45,44)" rx="2" ry="2" />
<text  x="111.83" y="191.5" ></text>
</g>
<g >
<title>mach_msg_trap (2 samples, 0.34%)</title><rect x="476.5" y="229" width="3.9" height="15.0" fill="rgb(219,72,3)" rx="2" ry="2" />
<text  x="479.47" y="239.5" ></text>
</g>
<g >
<title>webrtc::acm2::AcmReceiver::InsertPacket(webrtc::RTPHeader const&amp;, rtc::ArrayView&lt;unsigned char const, -4711l&gt;) (8 samples, 1.34%)</title><rect x="523.9" y="389" width="15.8" height="15.0" fill="rgb(235,111,14)" rx="2" ry="2" />
<text  x="526.90" y="399.5" ></text>
</g>
<g >
<title>cricket::(anonymous namespace)::SendPacketMessageData::~SendPacketMessageData() (4 samples, 0.67%)</title><rect x="156.3" y="517" width="7.9" height="15.0" fill="rgb(229,139,7)" rx="2" ry="2" />
<text  x="159.26" y="527.5" ></text>
</g>
<g >
<title>small_free_list_add_ptr (1 samples, 0.17%)</title><rect x="436.9" y="85" width="2.0" height="15.0" fill="rgb(239,193,54)" rx="2" ry="2" />
<text  x="439.93" y="95.5" ></text>
</g>
<g >
<title>mojo::core::RequestContext::RequestContext() (3 samples, 0.50%)</title><rect x="891.5" y="453" width="6.0" height="15.0" fill="rgb(212,190,13)" rx="2" ry="2" />
<text  x="894.54" y="463.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (2 samples, 0.34%)</title><rect x="636.6" y="485" width="3.9" height="15.0" fill="rgb(250,180,15)" rx="2" ry="2" />
<text  x="639.57" y="495.5" ></text>
</g>
<g >
<title>mojo::core::MessagePipeDispatcher::ReadMessage(std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;*) (15 samples, 2.51%)</title><rect x="861.9" y="453" width="29.6" height="15.0" fill="rgb(254,119,24)" rx="2" ry="2" />
<text  x="864.89" y="463.5" >mo..</text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueue::TakeImmediateIncomingQueueTasks() (3 samples, 0.50%)</title><rect x="917.2" y="549" width="6.0" height="15.0" fill="rgb(216,178,26)" rx="2" ry="2" />
<text  x="920.24" y="559.5" ></text>
</g>
<g >
<title>mojo::core::NodeController::SendUserMessage(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (1 samples, 0.17%)</title><rect x="180.0" y="261" width="2.0" height="15.0" fill="rgb(214,82,9)" rx="2" ry="2" />
<text  x="182.98" y="271.5" ></text>
</g>
<g >
<title>base::internal::TaskSource::Transaction::~Transaction() (1 samples, 0.17%)</title><rect x="474.5" y="293" width="2.0" height="15.0" fill="rgb(207,224,14)" rx="2" ry="2" />
<text  x="477.49" y="303.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::GuardedTaskPoster::PostTask(base::sequence_manager::internal::PostedTask) (1 samples, 0.17%)</title><rect x="767.0" y="133" width="2.0" height="15.0" fill="rgb(218,157,24)" rx="2" ry="2" />
<text  x="770.02" y="143.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="527.9" y="309" width="1.9" height="15.0" fill="rgb(209,48,23)" rx="2" ry="2" />
<text  x="530.86" y="319.5" ></text>
</g>
<g >
<title>webrtc::DecoderDatabase::CheckPayloadTypes(std::__Cr::list&lt;webrtc::Packet, std::__Cr::allocator&lt;webrtc::Packet&gt; &gt; const&amp;) const (1 samples, 0.17%)</title><rect x="525.9" y="341" width="2.0" height="15.0" fill="rgb(232,178,22)" rx="2" ry="2" />
<text  x="528.88" y="351.5" ></text>
</g>
<g >
<title>free (1 samples, 0.17%)</title><rect x="288.7" y="117" width="2.0" height="15.0" fill="rgb(213,66,49)" rx="2" ry="2" />
<text  x="291.69" y="127.5" ></text>
</g>
<g >
<title>DYLD-STUB$$IPC::ParamTraits&lt;unsigned char&gt;::Write(base::Pickle*, unsigned char const&amp;) (2 samples, 0.34%)</title><rect x="233.4" y="325" width="3.9" height="15.0" fill="rgb(253,214,32)" rx="2" ry="2" />
<text  x="236.35" y="335.5" ></text>
</g>
<g >
<title>MojoDestroyMessage (1 samples, 0.17%)</title><rect x="122.7" y="469" width="1.9" height="15.0" fill="rgb(224,1,16)" rx="2" ry="2" />
<text  x="125.66" y="479.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() (2 samples, 0.34%)</title><rect x="1020.0" y="517" width="4.0" height="15.0" fill="rgb(250,56,13)" rx="2" ry="2" />
<text  x="1023.02" y="527.5" ></text>
</g>
<g >
<title>mojo::Message::CreateFromMessageHandle(mojo::ScopedHandleBase&lt;mojo::MessageHandle&gt;*) (1 samples, 0.17%)</title><rect x="901.4" y="485" width="2.0" height="15.0" fill="rgb(251,75,41)" rx="2" ry="2" />
<text  x="904.42" y="495.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkDeduplicator::WillCheckForMoreWork() (1 samples, 0.17%)</title><rect x="1000.3" y="597" width="1.9" height="15.0" fill="rgb(234,122,41)" rx="2" ry="2" />
<text  x="1003.25" y="607.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="731.4" y="341" width="2.0" height="15.0" fill="rgb(220,0,6)" rx="2" ry="2" />
<text  x="734.44" y="351.5" ></text>
</g>
<g >
<title>webrtc::SendTimeHistory::OnSentPacket(unsigned short, long long) (1 samples, 0.17%)</title><rect x="624.7" y="469" width="2.0" height="15.0" fill="rgb(206,182,21)" rx="2" ry="2" />
<text  x="627.71" y="479.5" ></text>
</g>
<g >
<title>srtp_protect_mki (7 samples, 1.17%)</title><rect x="189.9" y="453" width="13.8" height="15.0" fill="rgb(206,40,14)" rx="2" ry="2" />
<text  x="192.87" y="463.5" ></text>
</g>
<g >
<title>IPC::Message::Message(char const*, int) (1 samples, 0.17%)</title><rect x="800.6" y="357" width="2.0" height="15.0" fill="rgb(210,229,23)" rx="2" ry="2" />
<text  x="803.62" y="367.5" ></text>
</g>
<g >
<title>srtp_hmac_compute (2 samples, 0.34%)</title><rect x="98.9" y="261" width="4.0" height="15.0" fill="rgb(250,148,46)" rx="2" ry="2" />
<text  x="101.94" y="271.5" ></text>
</g>
<g >
<title>webrtc::VideoStreamEncoder::OnFrame(webrtc::VideoFrame const&amp;) (4 samples, 0.67%)</title><rect x="678.1" y="485" width="7.9" height="15.0" fill="rgb(228,134,17)" rx="2" ry="2" />
<text  x="681.07" y="495.5" ></text>
</g>
<g >
<title>rtc::FireAndForgetAsyncClosure&lt;rtc::MethodFunctor&lt;cricket::BaseChannel, void (cricket::BaseChannel::*)(rtc::SentPacket const&amp;), void, rtc::SentPacket const&amp;&gt; &gt;::~FireAndForgetAsyncClosure() (7 samples, 1.17%)</title><rect x="656.3" y="517" width="13.9" height="15.0" fill="rgb(214,186,35)" rx="2" ry="2" />
<text  x="659.33" y="527.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (2 samples, 0.34%)</title><rect x="721.6" y="421" width="3.9" height="15.0" fill="rgb(230,57,51)" rx="2" ry="2" />
<text  x="724.56" y="431.5" ></text>
</g>
<g >
<title>non-virtual thunk to cricket::BaseChannel::OnRtpPacket(webrtc::RtpPacketReceived const&amp;) (4 samples, 0.67%)</title><rect x="102.9" y="261" width="7.9" height="15.0" fill="rgb(230,178,25)" rx="2" ry="2" />
<text  x="105.90" y="271.5" ></text>
</g>
<g >
<title>bool base::internal::QueryCancellationTraits&lt;base::internal::BindState&lt;void (jingle_glue::JingleThreadWrapper::*)(int), base::WeakPtr&lt;jingle_glue::JingleThreadWrapper&gt;, int&gt; &gt;(base::internal::BindStateBase const*, base::internal::BindStateBase::CancellationQueryMode) (1 samples, 0.17%)</title><rect x="1120.8" y="517" width="2.0" height="15.0" fill="rgb(231,154,19)" rx="2" ry="2" />
<text  x="1123.82" y="527.5" ></text>
</g>
<g >
<title>cricket::DtlsTransport::OnReadPacket(rtc::PacketTransportInternal*, char const*, unsigned long, long long const&amp;, int) (9 samples, 1.51%)</title><rect x="97.0" y="341" width="17.8" height="15.0" fill="rgb(209,198,9)" rx="2" ry="2" />
<text  x="99.97" y="351.5" ></text>
</g>
<g >
<title>free_small (1 samples, 0.17%)</title><rect x="160.2" y="469" width="2.0" height="15.0" fill="rgb(250,172,44)" rx="2" ry="2" />
<text  x="163.22" y="479.5" ></text>
</g>
<g >
<title>webrtc::SrtpTransport::OnRtpPacketReceived(rtc::CopyOnWriteBuffer, long long) (8 samples, 1.34%)</title><rect x="98.9" y="309" width="15.9" height="15.0" fill="rgb(205,217,45)" rx="2" ry="2" />
<text  x="101.94" y="319.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (3 samples, 0.50%)</title><rect x="640.5" y="501" width="5.9" height="15.0" fill="rgb(214,21,31)" rx="2" ry="2" />
<text  x="643.52" y="511.5" ></text>
</g>
<g >
<title>base::WaitableEvent::TimedWaitUntil(base::TimeTicks const&amp;) (27 samples, 4.52%)</title><rect x="23.8" y="613" width="53.4" height="15.0" fill="rgb(205,121,23)" rx="2" ry="2" />
<text  x="26.84" y="623.5" >base:..</text>
</g>
<g >
<title>rtc::AsyncClosure::~AsyncClosure() (2 samples, 0.34%)</title><rect x="648.4" y="501" width="4.0" height="15.0" fill="rgb(227,217,47)" rx="2" ry="2" />
<text  x="651.43" y="511.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::AssertNoLockHeldOnCurrentThread() (1 samples, 0.17%)</title><rect x="480.4" y="261" width="2.0" height="15.0" fill="rgb(229,8,3)" rx="2" ry="2" />
<text  x="483.42" y="271.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketReceived::GetHeader(webrtc::RTPHeader*) const (1 samples, 0.17%)</title><rect x="464.6" y="437" width="2.0" height="15.0" fill="rgb(209,31,44)" rx="2" ry="2" />
<text  x="467.61" y="447.5" ></text>
</g>
<g >
<title>mojo::core::Core::WriteMessage(unsigned int, unsigned long, MojoWriteMessageOptions const*) (23 samples, 3.85%)</title><rect x="253.1" y="293" width="45.5" height="15.0" fill="rgb(247,72,13)" rx="2" ry="2" />
<text  x="256.12" y="303.5" >mojo..</text>
</g>
<g >
<title>non-virtual thunk to base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoIdleWork() (2 samples, 0.34%)</title><rect x="1178.1" y="629" width="4.0" height="15.0" fill="rgb(216,159,13)" rx="2" ry="2" />
<text  x="1181.14" y="639.5" ></text>
</g>
<g >
<title>webrtc::internal::Call::NotifyBweOfReceivedPacket(webrtc::RtpPacketReceived const&amp;, webrtc::MediaType) (15 samples, 2.51%)</title><rect x="452.7" y="453" width="29.7" height="15.0" fill="rgb(226,54,29)" rx="2" ry="2" />
<text  x="455.75" y="463.5" >we..</text>
</g>
<g >
<title>srtp_unprotect_mki (2 samples, 0.34%)</title><rect x="98.9" y="277" width="4.0" height="15.0" fill="rgb(212,225,36)" rx="2" ry="2" />
<text  x="101.94" y="287.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (1 samples, 0.17%)</title><rect x="767.0" y="165" width="2.0" height="15.0" fill="rgb(231,39,49)" rx="2" ry="2" />
<text  x="770.02" y="175.5" ></text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (1 samples, 0.17%)</title><rect x="711.7" y="469" width="2.0" height="15.0" fill="rgb(214,1,51)" rx="2" ry="2" />
<text  x="714.68" y="479.5" ></text>
</g>
<g >
<title>base::internal::Sequence::BeginTransaction() (1 samples, 0.17%)</title><rect x="682.0" y="373" width="2.0" height="15.0" fill="rgb(227,163,40)" rx="2" ry="2" />
<text  x="685.03" y="383.5" ></text>
</g>
<g >
<title>base::internal::WorkerThreadStack::Pop() (1 samples, 0.17%)</title><rect x="565.4" y="309" width="2.0" height="15.0" fill="rgb(245,120,5)" rx="2" ry="2" />
<text  x="568.41" y="319.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="907.4" y="437" width="1.9" height="15.0" fill="rgb(230,44,35)" rx="2" ry="2" />
<text  x="910.35" y="447.5" ></text>
</g>
<g >
<title>base::Lock::CheckUnheldAndMark() (1 samples, 0.17%)</title><rect x="1079.3" y="517" width="2.0" height="15.0" fill="rgb(236,56,8)" rx="2" ry="2" />
<text  x="1082.31" y="527.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="634.6" y="261" width="2.0" height="15.0" fill="rgb(216,22,45)" rx="2" ry="2" />
<text  x="637.59" y="271.5" ></text>
</g>
<g >
<title>content::WebRtcAudioDeviceImpl::PlayoutDelay(unsigned short*) const (1 samples, 0.17%)</title><rect x="541.7" y="389" width="2.0" height="15.0" fill="rgb(254,12,17)" rx="2" ry="2" />
<text  x="544.69" y="399.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="138.5" y="517" width="2.0" height="15.0" fill="rgb(227,78,49)" rx="2" ry="2" />
<text  x="141.48" y="527.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (13 samples, 2.18%)</title><rect x="348.0" y="437" width="25.7" height="15.0" fill="rgb(231,93,21)" rx="2" ry="2" />
<text  x="350.99" y="447.5" >r..</text>
</g>
<g >
<title>base::subtle::TimeTicksNowIgnoringOverride() (1 samples, 0.17%)</title><rect x="1138.6" y="501" width="2.0" height="15.0" fill="rgb(225,137,11)" rx="2" ry="2" />
<text  x="1141.61" y="511.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (1 samples, 0.17%)</title><rect x="571.3" y="389" width="2.0" height="15.0" fill="rgb(225,78,30)" rx="2" ry="2" />
<text  x="574.34" y="399.5" ></text>
</g>
<g >
<title>base::internal::CallbackBase::IsCancelled() const (3 samples, 0.50%)</title><rect x="1122.8" y="533" width="5.9" height="15.0" fill="rgb(239,14,26)" rx="2" ry="2" />
<text  x="1125.80" y="543.5" ></text>
</g>
<g >
<title>jingle_glue::JingleThreadWrapper::PostTaskInternal(rtc::Location const&amp;, int, rtc::MessageHandler*, unsigned int, rtc::MessageData*) (3 samples, 0.50%)</title><rect x="102.9" y="229" width="5.9" height="15.0" fill="rgb(207,57,43)" rx="2" ry="2" />
<text  x="105.90" y="239.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="452.7" y="421" width="2.0" height="15.0" fill="rgb(226,207,53)" rx="2" ry="2" />
<text  x="455.75" y="431.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="340.1" y="533" width="2.0" height="15.0" fill="rgb(247,74,52)" rx="2" ry="2" />
<text  x="343.08" y="543.5" ></text>
</g>
<g >
<title>base::PendingTask::PendingTask(base::PendingTask&amp;&amp;) (3 samples, 0.50%)</title><rect x="1128.7" y="533" width="6.0" height="15.0" fill="rgb(248,87,50)" rx="2" ry="2" />
<text  x="1131.73" y="543.5" ></text>
</g>
<g >
<title>mojo::core::ports::Node::PrepareToForwardUserMessage(mojo::core::ports::PortRef const&amp;, mojo::core::ports::Port::State, bool, mojo::core::ports::UserMessageEvent*, mojo::core::ports::NodeName*) (4 samples, 0.67%)</title><rect x="290.7" y="213" width="7.9" height="15.0" fill="rgb(251,127,14)" rx="2" ry="2" />
<text  x="293.67" y="223.5" ></text>
</g>
<g >
<title>_pthread_body (597 samples, 100.00%)</title><rect x="10.0" y="741" width="1180.0" height="15.0" fill="rgb(214,167,25)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >_pthread_body</text>
</g>
<g >
<title>webrtc::RTCPReceiver::IncomingPacket(unsigned char const*, unsigned long) (3 samples, 0.50%)</title><rect x="569.4" y="453" width="5.9" height="15.0" fill="rgb(208,13,11)" rx="2" ry="2" />
<text  x="572.36" y="463.5" ></text>
</g>
<g >
<title>tiny_size (1 samples, 0.17%)</title><rect x="326.2" y="229" width="2.0" height="15.0" fill="rgb(238,212,26)" rx="2" ry="2" />
<text  x="329.25" y="239.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 0.17%)</title><rect x="1065.5" y="469" width="2.0" height="15.0" fill="rgb(213,118,2)" rx="2" ry="2" />
<text  x="1068.48" y="479.5" ></text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (2 samples, 0.34%)</title><rect x="102.9" y="213" width="4.0" height="15.0" fill="rgb(220,27,19)" rx="2" ry="2" />
<text  x="105.90" y="223.5" ></text>
</g>
<g >
<title>webrtc::UlpfecReceiverImpl::AddReceivedRedPacket(webrtc::RTPHeader const&amp;, unsigned char const*, unsigned long, unsigned char) (2 samples, 0.34%)</title><rect x="389.5" y="389" width="4.0" height="15.0" fill="rgb(239,170,20)" rx="2" ry="2" />
<text  x="392.50" y="399.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::Parse(rtc::CopyOnWriteBuffer) (1 samples, 0.17%)</title><rect x="110.8" y="277" width="2.0" height="15.0" fill="rgb(228,177,21)" rx="2" ry="2" />
<text  x="113.80" y="287.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::ScopedWorkersExecutor::~ScopedWorkersExecutor() (9 samples, 1.51%)</title><rect x="601.0" y="373" width="17.8" height="15.0" fill="rgb(217,69,8)" rx="2" ry="2" />
<text  x="603.99" y="383.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::main_thread_only() (2 samples, 0.34%)</title><rect x="1024.0" y="469" width="3.9" height="15.0" fill="rgb(208,41,33)" rx="2" ry="2" />
<text  x="1026.97" y="479.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (2 samples, 0.34%)</title><rect x="703.8" y="485" width="3.9" height="15.0" fill="rgb(224,215,7)" rx="2" ry="2" />
<text  x="706.77" y="495.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.17%)</title><rect x="638.5" y="389" width="2.0" height="15.0" fill="rgb(209,169,17)" rx="2" ry="2" />
<text  x="641.54" y="399.5" ></text>
</g>
<g >
<title>base::RunLoop::Delegate::ShouldQuitWhenIdle() (1 samples, 0.17%)</title><rect x="1180.1" y="581" width="2.0" height="15.0" fill="rgb(252,221,43)" rx="2" ry="2" />
<text  x="1183.12" y="591.5" ></text>
</g>
<g >
<title>mojo::core::ports::Node::GetStatus(mojo::core::ports::PortRef const&amp;, mojo::core::ports::PortStatus*) (1 samples, 0.17%)</title><rect x="865.8" y="421" width="2.0" height="15.0" fill="rgb(251,126,39)" rx="2" ry="2" />
<text  x="868.85" y="431.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="911.3" y="565" width="2.0" height="15.0" fill="rgb(232,68,12)" rx="2" ry="2" />
<text  x="914.31" y="575.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoIdleWork() (2 samples, 0.34%)</title><rect x="1178.1" y="613" width="4.0" height="15.0" fill="rgb(233,202,47)" rx="2" ry="2" />
<text  x="1181.14" y="623.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (1 samples, 0.17%)</title><rect x="571.3" y="341" width="2.0" height="15.0" fill="rgb(219,13,0)" rx="2" ry="2" />
<text  x="574.34" y="351.5" ></text>
</g>
<g >
<title>base::subtle::TimeTicksNowIgnoringOverride() (1 samples, 0.17%)</title><rect x="925.1" y="533" width="2.0" height="15.0" fill="rgb(247,72,11)" rx="2" ry="2" />
<text  x="928.14" y="543.5" ></text>
</g>
<g >
<title>cricket::SrtpSession::UnprotectRtp(void*, int, int*) (2 samples, 0.34%)</title><rect x="98.9" y="293" width="4.0" height="15.0" fill="rgb(240,187,35)" rx="2" ry="2" />
<text  x="101.94" y="303.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="778.9" y="149" width="2.0" height="15.0" fill="rgb(209,23,30)" rx="2" ry="2" />
<text  x="781.88" y="159.5" ></text>
</g>
<g >
<title>logging::GetVlogLevelHelper(char const*, unsigned long) (1 samples, 0.17%)</title><rect x="290.7" y="197" width="1.9" height="15.0" fill="rgb(237,48,28)" rx="2" ry="2" />
<text  x="293.67" y="207.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.17%)</title><rect x="436.9" y="181" width="2.0" height="15.0" fill="rgb(238,8,33)" rx="2" ry="2" />
<text  x="439.93" y="191.5" ></text>
</g>
<g >
<title>rtc::TaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (8 samples, 1.34%)</title><rect x="466.6" y="421" width="15.8" height="15.0" fill="rgb(208,85,5)" rx="2" ry="2" />
<text  x="469.58" y="431.5" ></text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (9 samples, 1.51%)</title><rect x="601.0" y="357" width="17.8" height="15.0" fill="rgb(246,89,3)" rx="2" ry="2" />
<text  x="603.99" y="367.5" ></text>
</g>
<g >
<title>base::internal::PriorityQueue::Push(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (1 samples, 0.17%)</title><rect x="510.1" y="309" width="1.9" height="15.0" fill="rgb(225,76,24)" rx="2" ry="2" />
<text  x="513.07" y="319.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="377.6" y="357" width="2.0" height="15.0" fill="rgb(209,207,49)" rx="2" ry="2" />
<text  x="380.64" y="367.5" ></text>
</g>
<g >
<title>mojo::internal::MultiplexRouter::ProcessIncomingMessage(mojo::internal::MultiplexRouter::MessageWrapper*, mojo::internal::MultiplexRouter::ClientCallBehavior, base::SequencedTaskRunner*) (72 samples, 12.06%)</title><rect x="715.6" y="453" width="142.3" height="15.0" fill="rgb(232,11,32)" rx="2" ry="2" />
<text  x="718.63" y="463.5" >mojo::internal::Mu..</text>
</g>
<g >
<title>mojo::native::internal::NativeStruct_Data::Validate(void const*, mojo::internal::ValidationContext*) (1 samples, 0.17%)</title><rect x="852.0" y="373" width="2.0" height="15.0" fill="rgb(237,3,7)" rx="2" ry="2" />
<text  x="855.01" y="383.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::RtpPacket() (2 samples, 0.34%)</title><rect x="379.6" y="437" width="4.0" height="15.0" fill="rgb(214,41,1)" rx="2" ry="2" />
<text  x="382.61" y="447.5" ></text>
</g>
<g >
<title>DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="1148.5" y="469" width="2.0" height="15.0" fill="rgb(229,2,31)" rx="2" ry="2" />
<text  x="1151.49" y="479.5" ></text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Set(void*) (1 samples, 0.17%)</title><rect x="294.6" y="181" width="2.0" height="15.0" fill="rgb(234,92,6)" rx="2" ry="2" />
<text  x="297.62" y="191.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="776.9" y="181" width="2.0" height="15.0" fill="rgb(247,222,34)" rx="2" ry="2" />
<text  x="779.90" y="191.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="771.0" y="133" width="1.9" height="15.0" fill="rgb(214,115,39)" rx="2" ry="2" />
<text  x="773.97" y="143.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::RequiresTaskTiming() const (6 samples, 1.01%)</title><rect x="1097.1" y="549" width="11.9" height="15.0" fill="rgb(216,18,9)" rx="2" ry="2" />
<text  x="1100.10" y="559.5" ></text>
</g>
<g >
<title>mojo::Connector::ActiveDispatchTracker::ActiveDispatchTracker(base::WeakPtr&lt;mojo::Connector&gt; const&amp;) (1 samples, 0.17%)</title><rect x="711.7" y="485" width="2.0" height="15.0" fill="rgb(206,106,41)" rx="2" ry="2" />
<text  x="714.68" y="495.5" ></text>
</g>
<g >
<title>base::Pickle::Pickle(int) (1 samples, 0.17%)</title><rect x="231.4" y="341" width="2.0" height="15.0" fill="rgb(232,117,14)" rx="2" ry="2" />
<text  x="234.37" y="351.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="638.5" y="405" width="2.0" height="15.0" fill="rgb(221,174,51)" rx="2" ry="2" />
<text  x="641.54" y="415.5" ></text>
</g>
<g >
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="243.2" y="277" width="2.0" height="15.0" fill="rgb(253,140,35)" rx="2" ry="2" />
<text  x="246.23" y="287.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::WorkQueue::RemoveAllCanceledTasksFromFront() (4 samples, 0.67%)</title><rect x="1120.8" y="549" width="7.9" height="15.0" fill="rgb(236,70,43)" rx="2" ry="2" />
<text  x="1123.82" y="559.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::~RefCountedObject() (1 samples, 0.17%)</title><rect x="654.4" y="485" width="1.9" height="15.0" fill="rgb(241,135,1)" rx="2" ry="2" />
<text  x="657.36" y="495.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="106.9" y="165" width="1.9" height="15.0" fill="rgb(238,40,52)" rx="2" ry="2" />
<text  x="109.85" y="175.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::Parse(unsigned char const*, unsigned long) (1 samples, 0.17%)</title><rect x="415.2" y="357" width="2.0" height="15.0" fill="rgb(215,99,54)" rx="2" ry="2" />
<text  x="418.19" y="367.5" ></text>
</g>
<g >
<title>content::(anonymous namespace)::IpcPacketSocket::SendTo(void const*, unsigned long, rtc::SocketAddress const&amp;, rtc::PacketOptions const&amp;) (7 samples, 1.17%)</title><rect x="176.0" y="421" width="13.9" height="15.0" fill="rgb(226,26,25)" rx="2" ry="2" />
<text  x="179.03" y="431.5" ></text>
</g>
<g >
<title>mach_msg_trap (1 samples, 0.17%)</title><rect x="571.3" y="197" width="2.0" height="15.0" fill="rgb(216,63,23)" rx="2" ry="2" />
<text  x="574.34" y="207.5" ></text>
</g>
<g >
<title>content::(anonymous namespace)::IpcPacketSocket::SendTo(void const*, unsigned long, rtc::SocketAddress const&amp;, rtc::PacketOptions const&amp;) (61 samples, 10.22%)</title><rect x="217.5" y="421" width="120.6" height="15.0" fill="rgb(233,113,41)" rx="2" ry="2" />
<text  x="220.54" y="431.5" >content::(anony..</text>
</g>
<g >
<title>base::TaskToken::GetForCurrentThread() (1 samples, 0.17%)</title><rect x="982.5" y="565" width="1.9" height="15.0" fill="rgb(244,170,44)" rx="2" ry="2" />
<text  x="985.46" y="575.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::GetClock() (1 samples, 0.17%)</title><rect x="972.6" y="581" width="2.0" height="15.0" fill="rgb(229,11,19)" rx="2" ry="2" />
<text  x="975.58" y="591.5" ></text>
</g>
<g >
<title>srtp_aes_icm_openssl_encrypt (1 samples, 0.17%)</title><rect x="172.1" y="453" width="2.0" height="15.0" fill="rgb(205,176,30)" rx="2" ry="2" />
<text  x="175.08" y="463.5" ></text>
</g>
<g >
<title>mojo::Connector::OnHandleReadyInternal(unsigned int) (107 samples, 17.92%)</title><rect x="697.8" y="533" width="211.5" height="15.0" fill="rgb(245,43,49)" rx="2" ry="2" />
<text  x="700.84" y="543.5" >mojo::Connector::OnHandleRe..</text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostTask(base::sequence_manager::internal::PostedTask) (2 samples, 0.34%)</title><rect x="636.6" y="453" width="3.9" height="15.0" fill="rgb(233,191,47)" rx="2" ry="2" />
<text  x="639.57" y="463.5" ></text>
</g>
<g >
<title>webrtc::NetEqImpl::InsertPacketInternal(webrtc::RTPHeader const&amp;, rtc::ArrayView&lt;unsigned char const, -4711l&gt;, unsigned int) (7 samples, 1.17%)</title><rect x="523.9" y="357" width="13.8" height="15.0" fill="rgb(245,21,45)" rx="2" ry="2" />
<text  x="526.90" y="367.5" ></text>
</g>
<g >
<title>base::internal::PooledSequencedTaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (6 samples, 1.01%)</title><rect x="504.1" y="389" width="11.9" height="15.0" fill="rgb(222,146,34)" rx="2" ry="2" />
<text  x="507.14" y="399.5" ></text>
</g>
<g >
<title>mojo::core::NodeChannel::WriteChannelMessage(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (14 samples, 2.35%)</title><rect x="263.0" y="165" width="27.7" height="15.0" fill="rgb(242,218,31)" rx="2" ry="2" />
<text  x="266.00" y="175.5" >m..</text>
</g>
<g >
<title>base::internal::WeakReference::IsValid() const (1 samples, 0.17%)</title><rect x="686.0" y="565" width="2.0" height="15.0" fill="rgb(223,178,35)" rx="2" ry="2" />
<text  x="688.98" y="575.5" ></text>
</g>
<g >
<title>bool base::internal::QueryCancellationTraits&lt;base::internal::BindState&lt;base::internal::IgnoreResultHelper&lt;bool (mojo::Connector::*)()&gt;, base::WeakPtr&lt;mojo::Connector&gt; &gt; &gt;(base::internal::BindStateBase const*, base::internal::BindStateBase::CancellationQueryMode) (1 samples, 0.17%)</title><rect x="1124.8" y="517" width="2.0" height="15.0" fill="rgb(217,151,38)" rx="2" ry="2" />
<text  x="1127.77" y="527.5" ></text>
</g>
<g >
<title>mojo::InterfaceEndpointClient::Accept(mojo::Message*) (6 samples, 1.01%)</title><rect x="176.0" y="357" width="11.9" height="15.0" fill="rgb(237,24,44)" rx="2" ry="2" />
<text  x="179.03" y="367.5" ></text>
</g>
<g >
<title>base::internal::BindStateBase::BindStateBase(void (*)(), void (*)(base::internal::BindStateBase const*), bool (*)(base::internal::BindStateBase const*, base::internal::BindStateBase::CancellationQueryMode)) (1 samples, 0.17%)</title><rect x="765.0" y="165" width="2.0" height="15.0" fill="rgb(217,6,39)" rx="2" ry="2" />
<text  x="768.04" y="175.5" ></text>
</g>
<g >
<title>webrtc::Packet::Packet() (1 samples, 0.17%)</title><rect x="531.8" y="341" width="2.0" height="15.0" fill="rgb(237,32,23)" rx="2" ry="2" />
<text  x="534.81" y="351.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="769.0" y="165" width="2.0" height="15.0" fill="rgb(234,60,25)" rx="2" ry="2" />
<text  x="771.99" y="175.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="474.5" y="277" width="2.0" height="15.0" fill="rgb(252,225,42)" rx="2" ry="2" />
<text  x="477.49" y="287.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (5 samples, 0.84%)</title><rect x="1047.7" y="517" width="9.9" height="15.0" fill="rgb(221,101,37)" rx="2" ry="2" />
<text  x="1050.69" y="527.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (1 samples, 0.17%)</title><rect x="707.7" y="453" width="2.0" height="15.0" fill="rgb(250,55,50)" rx="2" ry="2" />
<text  x="710.72" y="463.5" ></text>
</g>
<g >
<title>set_tiny_meta_header_in_use (1 samples, 0.17%)</title><rect x="701.8" y="373" width="2.0" height="15.0" fill="rgb(214,169,22)" rx="2" ry="2" />
<text  x="704.79" y="383.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_5::__invoke(_malloc_zone_t*, void*, unsigned long) (1 samples, 0.17%)</title><rect x="245.2" y="229" width="2.0" height="15.0" fill="rgb(240,198,42)" rx="2" ry="2" />
<text  x="248.21" y="239.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="405.3" y="325" width="2.0" height="15.0" fill="rgb(223,71,43)" rx="2" ry="2" />
<text  x="408.31" y="335.5" ></text>
</g>
<g >
<title>mojo::core::ports::MessageQueue::GetNextMessage(std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;*, mojo::core::ports::MessageFilter*) (1 samples, 0.17%)</title><rect x="879.7" y="421" width="2.0" height="15.0" fill="rgb(254,5,41)" rx="2" ry="2" />
<text  x="882.68" y="431.5" ></text>
</g>
<g >
<title>rtc::TimeMillis() (1 samples, 0.17%)</title><rect x="628.7" y="485" width="1.9" height="15.0" fill="rgb(225,180,43)" rx="2" ry="2" />
<text  x="631.66" y="495.5" ></text>
</g>
<g >
<title>mojo::Message::Message(unsigned int, unsigned int, unsigned long, unsigned long, std::__Cr::vector&lt;mojo::ScopedHandleBase&lt;mojo::Handle&gt;, std::__Cr::allocator&lt;mojo::ScopedHandleBase&lt;mojo::Handle&gt; &gt; &gt;*) (8 samples, 1.34%)</title><rect x="298.6" y="357" width="15.8" height="15.0" fill="rgb(242,109,47)" rx="2" ry="2" />
<text  x="301.58" y="367.5" ></text>
</g>
<g >
<title>cricket::UDPPort::OnSentPacket(rtc::AsyncPacketSocket*, rtc::SentPacket const&amp;) (19 samples, 3.18%)</title><rect x="810.5" y="341" width="37.6" height="15.0" fill="rgb(236,171,12)" rx="2" ry="2" />
<text  x="813.50" y="351.5" >cri..</text>
</g>
<g >
<title>DYLD-STUB$$EVP_EncryptInit_ex (1 samples, 0.17%)</title><rect x="191.8" y="437" width="2.0" height="15.0" fill="rgb(243,13,25)" rx="2" ry="2" />
<text  x="194.84" y="447.5" ></text>
</g>
<g >
<title>base::internal::Invoker&lt;base::internal::BindState&lt;void (base::sequence_manager::internal::TaskQueueImpl::*)(), base::internal::UnretainedWrapper&lt;base::sequence_manager::internal::TaskQueueImpl&gt; &gt;, void ()&gt;::Run(base::internal::BindStateBase*) (2 samples, 0.34%)</title><rect x="1016.1" y="533" width="3.9" height="15.0" fill="rgb(221,18,19)" rx="2" ry="2" />
<text  x="1019.06" y="543.5" ></text>
</g>
<g >
<title>base::subtle::RefCountedThreadSafeBase::AddRef() const (1 samples, 0.17%)</title><rect x="516.0" y="405" width="2.0" height="15.0" fill="rgb(217,219,19)" rx="2" ry="2" />
<text  x="519.00" y="415.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="543.7" y="325" width="1.9" height="15.0" fill="rgb(215,215,14)" rx="2" ry="2" />
<text  x="546.67" y="335.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroup::PushTaskSourceAndWakeUpWorkersImpl(base::internal::ThreadGroup::BaseScopedWorkersExecutor*, base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (5 samples, 0.84%)</title><rect x="591.1" y="373" width="9.9" height="15.0" fill="rgb(243,122,27)" rx="2" ry="2" />
<text  x="594.11" y="383.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="106.9" y="197" width="1.9" height="15.0" fill="rgb(218,185,4)" rx="2" ry="2" />
<text  x="109.85" y="207.5" ></text>
</g>
<g >
<title>mojo::core::NodeChannel::SendChannelMessage(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (1 samples, 0.17%)</title><rect x="183.9" y="181" width="2.0" height="15.0" fill="rgb(214,13,30)" rx="2" ry="2" />
<text  x="186.94" y="191.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="978.5" y="565" width="2.0" height="15.0" fill="rgb(224,154,43)" rx="2" ry="2" />
<text  x="981.51" y="575.5" ></text>
</g>
<g >
<title>free_small (1 samples, 0.17%)</title><rect x="490.3" y="309" width="2.0" height="15.0" fill="rgb(224,114,42)" rx="2" ry="2" />
<text  x="493.30" y="319.5" ></text>
</g>
<g >
<title>__psynch_mutexwait (1 samples, 0.17%)</title><rect x="508.1" y="245" width="2.0" height="15.0" fill="rgb(237,104,44)" rx="2" ry="2" />
<text  x="511.09" y="255.5" ></text>
</g>
<g >
<title>void std::__Cr::__tree_remove&lt;std::__Cr::__tree_node_base&lt;void*&gt;*&gt;(std::__Cr::__tree_node_base&lt;void*&gt;*, std::__Cr::__tree_node_base&lt;void*&gt;*) (1 samples, 0.17%)</title><rect x="573.3" y="309" width="2.0" height="15.0" fill="rgb(238,81,24)" rx="2" ry="2" />
<text  x="576.32" y="319.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (2 samples, 0.34%)</title><rect x="699.8" y="437" width="4.0" height="15.0" fill="rgb(220,127,23)" rx="2" ry="2" />
<text  x="702.82" y="447.5" ></text>
</g>
<g >
<title>mach_msg_trap (1 samples, 0.17%)</title><rect x="567.4" y="261" width="2.0" height="15.0" fill="rgb(242,66,30)" rx="2" ry="2" />
<text  x="570.39" y="271.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroup::PushTaskSourceAndWakeUpWorkersImpl(base::internal::ThreadGroup::BaseScopedWorkersExecutor*, base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (3 samples, 0.50%)</title><rect x="561.5" y="341" width="5.9" height="15.0" fill="rgb(207,56,45)" rx="2" ry="2" />
<text  x="564.46" y="351.5" ></text>
</g>
<g >
<title>MojoAppendMessageData (1 samples, 0.17%)</title><rect x="320.3" y="325" width="2.0" height="15.0" fill="rgb(206,184,46)" rx="2" ry="2" />
<text  x="323.32" y="335.5" ></text>
</g>
<g >
<title>base::internal::CheckedLockImpl::Acquire() (1 samples, 0.17%)</title><rect x="682.0" y="357" width="2.0" height="15.0" fill="rgb(219,85,13)" rx="2" ry="2" />
<text  x="685.03" y="367.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="688.0" y="549" width="1.9" height="15.0" fill="rgb(232,14,52)" rx="2" ry="2" />
<text  x="690.96" y="559.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoSomeWork() (556 samples, 93.13%)</title><rect x="79.2" y="629" width="1098.9" height="15.0" fill="rgb(212,198,7)" rx="2" ry="2" />
<text  x="82.18" y="639.5" >base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoSomeWork()</text>
</g>
<g >
<title>webrtc::voe::(anonymous namespace)::ChannelReceive::OnReceivedPayloadData(unsigned char const*, unsigned long, webrtc::RTPHeader const&amp;) (8 samples, 1.34%)</title><rect x="523.9" y="405" width="15.8" height="15.0" fill="rgb(242,30,16)" rx="2" ry="2" />
<text  x="526.90" y="415.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (1 samples, 0.17%)</title><rect x="707.7" y="469" width="2.0" height="15.0" fill="rgb(250,12,9)" rx="2" ry="2" />
<text  x="710.72" y="479.5" ></text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::internal::PriorityQueue::TaskSourceAndSortKey&gt;::MoveHoleUpAndFillWithElement(unsigned long, base::internal::PriorityQueue::TaskSourceAndSortKey&amp;&amp;) (1 samples, 0.17%)</title><rect x="593.1" y="341" width="2.0" height="15.0" fill="rgb(247,83,24)" rx="2" ry="2" />
<text  x="596.08" y="351.5" ></text>
</g>
<g >
<title>free_tiny (2 samples, 0.34%)</title><rect x="156.3" y="485" width="3.9" height="15.0" fill="rgb(253,175,5)" rx="2" ry="2" />
<text  x="159.26" y="495.5" ></text>
</g>
<g >
<title>small_malloc_should_clear (1 samples, 0.17%)</title><rect x="438.9" y="197" width="2.0" height="15.0" fill="rgb(233,113,7)" rx="2" ry="2" />
<text  x="441.91" y="207.5" ></text>
</g>
<g >
<title>webrtc::RtpTransport::IsWritable(bool) const (1 samples, 0.17%)</title><rect x="170.1" y="501" width="2.0" height="15.0" fill="rgb(252,194,37)" rx="2" ry="2" />
<text  x="173.10" y="511.5" ></text>
</g>
<g >
<title>network::mojom::internal::IPAddress_Data::Validate(void const*, mojo::internal::ValidationContext*) (1 samples, 0.17%)</title><rect x="850.0" y="357" width="2.0" height="15.0" fill="rgb(252,71,39)" rx="2" ry="2" />
<text  x="853.03" y="367.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (2 samples, 0.34%)</title><rect x="423.1" y="277" width="4.0" height="15.0" fill="rgb(241,154,32)" rx="2" ry="2" />
<text  x="426.10" y="287.5" ></text>
</g>
<g >
<title>webrtc::RtpPacketHistory::CullAcknowledgedPackets(rtc::ArrayView&lt;unsigned short const, -4711l&gt;) (1 samples, 0.17%)</title><rect x="573.3" y="357" width="2.0" height="15.0" fill="rgb(234,83,20)" rx="2" ry="2" />
<text  x="576.32" y="367.5" ></text>
</g>
<g >
<title>mach_msg (2 samples, 0.34%)</title><rect x="427.1" y="213" width="3.9" height="15.0" fill="rgb(236,31,32)" rx="2" ry="2" />
<text  x="430.05" y="223.5" ></text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (2 samples, 0.34%)</title><rect x="431.0" y="101" width="4.0" height="15.0" fill="rgb(236,17,9)" rx="2" ry="2" />
<text  x="434.01" y="111.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_0::__invoke(_malloc_zone_t*, void const*) (1 samples, 0.17%)</title><rect x="869.8" y="389" width="2.0" height="15.0" fill="rgb(224,104,31)" rx="2" ry="2" />
<text  x="872.80" y="399.5" ></text>
</g>
<g >
<title>malloc_zone_malloc (1 samples, 0.17%)</title><rect x="108.8" y="197" width="2.0" height="15.0" fill="rgb(208,152,0)" rx="2" ry="2" />
<text  x="111.83" y="207.5" ></text>
</g>
<g >
<title>webrtc::video_coding::FrameBuffer::PropagateContinuity(std::__Cr::__map_iterator&lt;std::__Cr::__tree_iterator&lt;std::__Cr::__value_type&lt;webrtc::video_coding::VideoLayerFrameId, webrtc::video_coding::FrameBuffer::FrameInfo&gt;, std::__Cr::__tree_node&lt;std::__Cr::__value_type&lt;webrtc::video_coding::VideoLayerFrameId, webrtc::video_coding::FrameBuffer::FrameInfo&gt;, void*&gt;*, long&gt; &gt;) (1 samples, 0.17%)</title><rect x="436.9" y="229" width="2.0" height="15.0" fill="rgb(232,33,54)" rx="2" ry="2" />
<text  x="439.93" y="239.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::ScheduleWork() (1 samples, 0.17%)</title><rect x="828.3" y="165" width="2.0" height="15.0" fill="rgb(239,72,19)" rx="2" ry="2" />
<text  x="831.29" y="175.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (2 samples, 0.34%)</title><rect x="674.1" y="565" width="4.0" height="15.0" fill="rgb(247,2,13)" rx="2" ry="2" />
<text  x="677.12" y="575.5" ></text>
</g>
<g >
<title>mojo::core::NodeController::SendUserMessage(mojo::core::ports::PortRef const&amp;, std::__Cr::unique_ptr&lt;mojo::core::ports::UserMessageEvent, std::__Cr::default_delete&lt;mojo::core::ports::UserMessageEvent&gt; &gt;) (20 samples, 3.35%)</title><rect x="259.0" y="261" width="39.6" height="15.0" fill="rgb(251,166,51)" rx="2" ry="2" />
<text  x="262.05" y="271.5" >moj..</text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="108.8" y="229" width="2.0" height="15.0" fill="rgb(240,62,39)" rx="2" ry="2" />
<text  x="111.83" y="239.5" ></text>
</g>
<g >
<title>cricket::P2PTransportChannel::SendPacket(char const*, unsigned long, rtc::PacketOptions const&amp;, int) (8 samples, 1.34%)</title><rect x="174.1" y="469" width="15.8" height="15.0" fill="rgb(207,33,19)" rx="2" ry="2" />
<text  x="177.05" y="479.5" ></text>
</g>
<g >
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.17%)</title><rect x="355.9" y="261" width="2.0" height="15.0" fill="rgb(246,89,13)" rx="2" ry="2" />
<text  x="358.90" y="271.5" ></text>
</g>
<g >
<title>base::WaitableEvent::Signal() (4 samples, 0.67%)</title><rect x="363.8" y="277" width="7.9" height="15.0" fill="rgb(205,120,6)" rx="2" ry="2" />
<text  x="366.80" y="287.5" ></text>
</g>
<g >
<title>cricket::Connection::ToString() const (1 samples, 0.17%)</title><rect x="634.6" y="389" width="2.0" height="15.0" fill="rgb(252,168,8)" rx="2" ry="2" />
<text  x="637.59" y="399.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::main_thread_only() (2 samples, 0.34%)</title><rect x="1162.3" y="613" width="4.0" height="15.0" fill="rgb(221,81,16)" rx="2" ry="2" />
<text  x="1165.33" y="623.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="336.1" y="261" width="2.0" height="15.0" fill="rgb(247,140,7)" rx="2" ry="2" />
<text  x="339.13" y="271.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl::AppendData(unsigned int, unsigned int const*, unsigned int) (2 samples, 0.34%)</title><rect x="308.5" y="293" width="3.9" height="15.0" fill="rgb(237,46,46)" rx="2" ry="2" />
<text  x="311.46" y="303.5" ></text>
</g>
<g >
<title>base::ThreadCheckerImpl::CalledOnValidThread() const (5 samples, 0.84%)</title><rect x="1065.5" y="501" width="9.9" height="15.0" fill="rgb(221,163,13)" rx="2" ry="2" />
<text  x="1068.48" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.17%)</title><rect x="1071.4" y="485" width="2.0" height="15.0" fill="rgb(218,165,21)" rx="2" ry="2" />
<text  x="1074.41" y="495.5" ></text>
</g>
<g >
<title>base::GetProgramCounter() (1 samples, 0.17%)</title><rect x="140.5" y="517" width="1.9" height="15.0" fill="rgb(254,105,38)" rx="2" ry="2" />
<text  x="143.45" y="527.5" ></text>
</g>
<g >
<title>objc_msgSend (3 samples, 0.50%)</title><rect x="1184.1" y="645" width="5.9" height="15.0" fill="rgb(239,46,35)" rx="2" ry="2" />
<text  x="1187.07" y="655.5" ></text>
</g>
<g >
<title>aes_hw_ctr32_encrypt_blocks (1 samples, 0.17%)</title><rect x="199.7" y="389" width="2.0" height="15.0" fill="rgb(206,119,20)" rx="2" ry="2" />
<text  x="202.75" y="399.5" ></text>
</g>
<g >
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="265.0" y="117" width="2.0" height="15.0" fill="rgb(249,23,51)" rx="2" ry="2" />
<text  x="267.97" y="127.5" ></text>
</g>
<g >
<title>base::Thread::ThreadMain  0x644ddc (597 samples, 100.00%)</title><rect x="10.0" y="789" width="1180.0" height="15.0" fill="rgb(220,205,6)" rx="2" ry="2" />
<text  x="13.00" y="799.5" >base::Thread::ThreadMain  0x644ddc</text>
</g>
<g >
<title>webrtc::RtcEventLogImpl::Log(std::__Cr::unique_ptr&lt;webrtc::RtcEvent, std::__Cr::default_delete&lt;webrtc::RtcEvent&gt; &gt;) (4 samples, 0.67%)</title><rect x="561.5" y="469" width="7.9" height="15.0" fill="rgb(249,56,51)" rx="2" ry="2" />
<text  x="564.46" y="479.5" ></text>
</g>
<g >
<title>realloc (1 samples, 0.17%)</title><rect x="245.2" y="261" width="2.0" height="15.0" fill="rgb(246,206,15)" rx="2" ry="2" />
<text  x="248.21" y="271.5" ></text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_1::__invoke(_malloc_zone_t*, unsigned long) (1 samples, 0.17%)</title><rect x="543.7" y="277" width="1.9" height="15.0" fill="rgb(229,205,35)" rx="2" ry="2" />
<text  x="546.67" y="287.5" ></text>
</g>
<g >
<title>rtc::RefCountedObject&lt;rtc::BufferT&lt;unsigned char, false&gt; &gt;::Release() const (1 samples, 0.17%)</title><rect x="490.3" y="341" width="2.0" height="15.0" fill="rgb(205,33,3)" rx="2" ry="2" />
<text  x="493.30" y="351.5" ></text>
</g>
<g >
<title>webrtc::TransportPacketsFeedback::TransportPacketsFeedback(webrtc::TransportPacketsFeedback const&amp;) (1 samples, 0.17%)</title><rect x="500.2" y="405" width="2.0" height="15.0" fill="rgb(251,33,46)" rx="2" ry="2" />
<text  x="503.18" y="415.5" ></text>
</g>
<g >
<title>rtc::ScopedMessageData&lt;rtc::AsyncClosure&gt;::~ScopedMessageData() (17 samples, 2.85%)</title><rect x="640.5" y="533" width="33.6" height="15.0" fill="rgb(213,55,25)" rx="2" ry="2" />
<text  x="643.52" y="543.5" >rt..</text>
</g>
<g >
<title>void base::internal::ThreadGroupImpl::ScopedWorkersExecutor::WorkerContainer::ForEachWorker&lt;base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)&gt;(base::internal::ThreadGroupImpl::ScopedWorkersExecutor::FlushImpl()::'lambda'(base::internal::WorkerThread*)) (4 samples, 0.67%)</title><rect x="363.8" y="309" width="7.9" height="15.0" fill="rgb(236,53,24)" rx="2" ry="2" />
<text  x="366.80" y="319.5" ></text>
</g>
<g >
<title>&lt;Unknown Address&gt; (2 samples, 0.34%)</title><rect x="1006.2" y="549" width="3.9" height="15.0" fill="rgb(212,138,53)" rx="2" ry="2" />
<text  x="1009.18" y="559.5" ></text>
</g>
<g >
<title>mojo::core::HandleTable::GetDispatcher(unsigned int) const (1 samples, 0.17%)</title><rect x="253.1" y="277" width="2.0" height="15.0" fill="rgb(213,164,46)" rx="2" ry="2" />
<text  x="256.12" y="287.5" ></text>
</g>
<g >
<title>base::SequenceCheckerImpl::CalledOnValidSequence() const (2 samples, 0.34%)</title><rect x="691.9" y="533" width="4.0" height="15.0" fill="rgb(221,3,30)" rx="2" ry="2" />
<text  x="694.91" y="543.5" ></text>
</g>
<g >
<title>tiny_malloc_should_clear (2 samples, 0.34%)</title><rect x="796.7" y="261" width="3.9" height="15.0" fill="rgb(205,97,2)" rx="2" ry="2" />
<text  x="799.67" y="271.5" ></text>
</g>
<g >
<title>base::ScopedDeferTaskPosting::ScopedDeferTaskPosting() (1 samples, 0.17%)</title><rect x="822.4" y="197" width="1.9" height="15.0" fill="rgb(224,200,30)" rx="2" ry="2" />
<text  x="825.36" y="207.5" ></text>
</g>
<g >
<title>content::P2PSocketClientImpl::Send(net::IPEndPoint const&amp;, std::__Cr::vector&lt;signed char, std::__Cr::allocator&lt;signed char&gt; &gt; const&amp;, rtc::PacketOptions const&amp;) (59 samples, 9.88%)</title><rect x="221.5" y="405" width="116.6" height="15.0" fill="rgb(208,21,37)" rx="2" ry="2" />
<text  x="224.49" y="415.5" >content::P2PSo..</text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (7 samples, 1.17%)</title><rect x="468.6" y="325" width="13.8" height="15.0" fill="rgb(215,71,2)" rx="2" ry="2" />
<text  x="471.56" y="335.5" ></text>
</g>
<g >
<title>mojo::core::Core::AppendMessageData(unsigned long, unsigned int, unsigned int const*, unsigned int, MojoAppendMessageDataOptions const*, void**, unsigned int*) (1 samples, 0.17%)</title><rect x="320.3" y="293" width="2.0" height="15.0" fill="rgb(209,33,21)" rx="2" ry="2" />
<text  x="323.32" y="303.5" ></text>
</g>
<g >
<title>base::internal::CallbackBase::IsCancelled() const (1 samples, 0.17%)</title><rect x="1033.9" y="501" width="1.9" height="15.0" fill="rgb(252,141,11)" rx="2" ry="2" />
<text  x="1036.85" y="511.5" ></text>
</g>
<g >
<title>mojo::internal::MessageDispatchContext::current() (1 samples, 0.17%)</title><rect x="794.7" y="357" width="2.0" height="15.0" fill="rgb(244,100,10)" rx="2" ry="2" />
<text  x="797.69" y="367.5" ></text>
</g>
<g >
<title>MojoAppendMessageData (6 samples, 1.01%)</title><rect x="300.6" y="341" width="11.8" height="15.0" fill="rgb(245,63,34)" rx="2" ry="2" />
<text  x="303.55" y="351.5" ></text>
</g>
<g >
<title>scoped_refptr&lt;base::internal::BindStateBase&gt; base::AdoptRef&lt;base::internal::BindStateBase&gt;(base::internal::BindStateBase*) (1 samples, 0.17%)</title><rect x="743.3" y="213" width="2.0" height="15.0" fill="rgb(225,69,16)" rx="2" ry="2" />
<text  x="746.30" y="223.5" ></text>
</g>
<g >
<title>base::Lock::AssertAcquired() const (1 samples, 0.17%)</title><rect x="1172.2" y="581" width="2.0" height="15.0" fill="rgb(205,134,40)" rx="2" ry="2" />
<text  x="1175.21" y="591.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::SequenceManagerImpl::main_thread_only() (1 samples, 0.17%)</title><rect x="1160.4" y="565" width="1.9" height="15.0" fill="rgb(218,197,7)" rx="2" ry="2" />
<text  x="1163.35" y="575.5" ></text>
</g>
<g >
<title>base::internal::LockImpl::Lock() (1 samples, 0.17%)</title><rect x="1075.4" y="517" width="1.9" height="15.0" fill="rgb(242,73,9)" rx="2" ry="2" />
<text  x="1078.36" y="527.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.17%)</title><rect x="771.0" y="165" width="1.9" height="15.0" fill="rgb(209,4,19)" rx="2" ry="2" />
<text  x="773.97" y="175.5" ></text>
</g>
<g >
<title>tiny_free_list_add_ptr (1 samples, 0.17%)</title><rect x="120.7" y="197" width="2.0" height="15.0" fill="rgb(230,171,36)" rx="2" ry="2" />
<text  x="123.69" y="207.5" ></text>
</g>
<g >
<title>base::PlatformThread::CurrentRef() (1 samples, 0.17%)</title><rect x="954.8" y="517" width="2.0" height="15.0" fill="rgb(229,125,53)" rx="2" ry="2" />
<text  x="957.79" y="527.5" ></text>
</g>
<g >
<title>webrtc::SdpAudioFormat::~SdpAudioFormat() (1 samples, 0.17%)</title><rect x="537.7" y="373" width="2.0" height="15.0" fill="rgb(215,60,15)" rx="2" ry="2" />
<text  x="540.74" y="383.5" ></text>
</g>
<g >
<title>webrtc::video_coding::RtpFrameObject::RtpFrameObject(webrtc::video_coding::PacketBuffer*, unsigned short, unsigned short, unsigned long, int, long long, long long, webrtc::RtpPacketInfos) (2 samples, 0.34%)</title><rect x="440.9" y="293" width="3.9" height="15.0" fill="rgb(241,219,9)" rx="2" ry="2" />
<text  x="443.89" y="303.5" ></text>
</g>
<g >
<title>mojo::core::UserMessageImpl* mojo::core::ports::UserMessageEvent::GetMessage&lt;mojo::core::UserMessageImpl&gt;() (1 samples, 0.17%)</title><rect x="185.9" y="165" width="2.0" height="15.0" fill="rgb(214,147,19)" rx="2" ry="2" />
<text  x="188.91" y="175.5" ></text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::MaybeReportIpcTaskQueuedFromAnyThreadLocked(base::sequence_manager::Task*, char const*) (1 samples, 0.17%)</title><rect x="104.9" y="133" width="2.0" height="15.0" fill="rgb(250,30,24)" rx="2" ry="2" />
<text  x="107.87" y="143.5" ></text>
</g>
<g >
<title>network::mojom::P2PSocketClientRequestValidator::Accept(mojo::Message*) (3 samples, 0.50%)</title><rect x="848.1" y="405" width="5.9" height="15.0" fill="rgb(245,37,22)" rx="2" ry="2" />
<text  x="851.06" y="415.5" ></text>
</g>
<g >
<title>mach_msg (9 samples, 1.51%)</title><rect x="601.0" y="309" width="17.8" height="15.0" fill="rgb(248,35,53)" rx="2" ry="2" />
<text  x="603.99" y="319.5" ></text>
</g>
<g >
<title>free_tiny (1 samples, 0.17%)</title><rect x="328.2" y="245" width="2.0" height="15.0" fill="rgb(206,72,6)" rx="2" ry="2" />
<text  x="331.22" y="255.5" ></text>
</g>
<g >
<title>(anonymous namespace)::WebrtcTaskQueue::PostTask(std::__Cr::unique_ptr&lt;webrtc::QueuedTask, std::__Cr::default_delete&lt;webrtc::QueuedTask&gt; &gt;) (1 samples, 0.17%)</title><rect x="571.3" y="373" width="2.0" height="15.0" fill="rgb(210,170,45)" rx="2" ry="2" />
<text  x="574.34" y="383.5" ></text>
</g>
<g >
<title>mojo::core::WatcherSet::NotifyState(mojo::core::HandleSignalsState const&amp;) (4 samples, 0.67%)</title><rect x="867.8" y="437" width="7.9" height="15.0" fill="rgb(222,118,25)" rx="2" ry="2" />
<text  x="870.82" y="447.5" ></text>
</g>
<g >
<title>mojo::core::RequestContext::~RequestContext() (1 samples, 0.17%)</title><rect x="897.5" y="453" width="1.9" height="15.0" fill="rgb(241,161,49)" rx="2" ry="2" />
<text  x="900.47" y="463.5" ></text>
</g>
<g >
<title>webrtc::UlpfecReceiverImpl::ProcessReceivedFec() (28 samples, 4.69%)</title><rect x="393.5" y="389" width="55.3" height="15.0" fill="rgb(250,14,38)" rx="2" ry="2" />
<text  x="396.45" y="399.5" >webrt..</text>
</g>
<g >
<title>tiny_malloc_should_clear (1 samples, 0.17%)</title><rect x="108.8" y="133" width="2.0" height="15.0" fill="rgb(210,188,18)" rx="2" ry="2" />
<text  x="111.83" y="143.5" ></text>
</g>
<g >
<title>mach_msg_trap (2 samples, 0.34%)</title><rect x="512.0" y="245" width="4.0" height="15.0" fill="rgb(234,13,38)" rx="2" ry="2" />
<text  x="515.04" y="255.5" ></text>
</g>
<g >
<title>webrtc::RtpPacket::~RtpPacket() (1 samples, 0.17%)</title><rect x="490.3" y="357" width="2.0" height="15.0" fill="rgb(224,217,27)" rx="2" ry="2" />
<text  x="493.30" y="367.5" ></text>
</g>
<g >
<title>mojo::core::(anonymous namespace)::ChannelMac::Write(std::__Cr::unique_ptr&lt;mojo::core::Channel::Message, std::__Cr::default_delete&lt;mojo::core::Channel::Message&gt; &gt;) (13 samples, 2.18%)</title><rect x="265.0" y="149" width="25.7" height="15.0" fill="rgb(220,50,39)" rx="2" ry="2" />
<text  x="267.97" y="159.5" >m..</text>
</g>
<g >
<title>base::internal::IntrusiveHeap&lt;base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&gt;::MoveHoleUpAndFillWithElement(unsigned long, base::sequence_manager::internal::WorkQueueSets::OldestTaskEnqueueOrder&amp;&amp;) (1 samples, 0.17%)</title><rect x="921.2" y="517" width="2.0" height="15.0" fill="rgb(243,67,20)" rx="2" ry="2" />
<text  x="924.19" y="527.5" ></text>
</g>
<g >
<title>webrtc::RtpTransportControllerSend::OnTransportFeedback(webrtc::rtcp::TransportFeedback const&amp;) (8 samples, 1.34%)</title><rect x="486.3" y="421" width="15.9" height="15.0" fill="rgb(243,134,28)" rx="2" ry="2" />
<text  x="489.35" y="431.5" ></text>
</g>
<g >
<title>IPC::ParamTraits&lt;net::IPAddress&gt;::Write(base::Pickle*, net::IPAddress const&amp;) (5 samples, 0.84%)</title><rect x="237.3" y="325" width="9.9" height="15.0" fill="rgb(236,15,11)" rx="2" ry="2" />
<text  x="240.30" y="335.5" ></text>
</g>
<g >
<title>base::internal::ThreadGroupImpl::PushTaskSourceAndWakeUpWorkers(base::internal::BasicTransactionWithTaskSource&lt;base::internal::RegisteredTaskSource&gt;) (8 samples, 1.34%)</title><rect x="355.9" y="341" width="15.8" height="15.0" fill="rgb(214,37,15)" rx="2" ry="2" />
<text  x="358.90" y="351.5" ></text>
</g>
<g >
<title>tiny_free_no_lock (1 samples, 0.17%)</title><rect x="152.3" y="533" width="2.0" height="15.0" fill="rgb(223,189,42)" rx="2" ry="2" />
<text  x="155.31" y="543.5" ></text>
</g>
<g >
<title>base::debug::ScopedLockAcquireActivity::ScopedLockAcquireActivity(void const*, base::internal::LockImpl const*) (1 samples, 0.17%)</title><rect x="915.3" y="549" width="1.9" height="15.0" fill="rgb(222,133,33)" rx="2" ry="2" />
<text  x="918.26" y="559.5" ></text>
</g>
</g>
</svg>
