<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>cc::TaskGraphWorkQueue::DependencyMismatch(cc::TaskGraph const*) (1 samples, 5.56%)</title><rect x="731.1" y="165" width="65.6" height="15.0" fill="rgb(231,229,35)" rx="2" ry="2" />
<text  x="734.11" y="175.5" >cc::Tas..</text>
</g>
<g >
<title>mach_msg_trap (1 samples, 5.56%)</title><rect x="468.9" y="37" width="65.5" height="15.0" fill="rgb(238,76,14)" rx="2" ry="2" />
<text  x="471.89" y="47.5" >mach_ms..</text>
</g>
<g >
<title>thread_start (18 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(217,112,33)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >thread_start</text>
</g>
<g >
<title>base::internal::BindState&lt;void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), scoped_refptr&lt;media::GpuMemoryBufferVideoFramePool::PoolImpl&gt;, scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*&gt;::BindState&lt;void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), media::GpuMemoryBufferVideoFramePool::PoolImpl*, scoped_refptr&lt;media::VideoFrame&gt;&amp;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*&amp;&gt;(std::__Cr::integral_constant&lt;bool, false&gt;, void (*)(), void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*&amp;&amp;)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), media::GpuMemoryBufferVideoFramePool::PoolImpl*&amp;&amp;, scoped_refptr&lt;media::VideoFrame&gt;&amp;&amp;&amp;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*&amp;&amp;&amp;) (1 samples, 5.56%)</title><rect x="862.2" y="213" width="65.6" height="15.0" fill="rgb(250,154,19)" rx="2" ry="2" />
<text  x="865.22" y="223.5" >base::i..</text>
</g>
<g >
<title>base::internal::BindState&lt;void (*)(int, int, int, media::VideoFrame const*, unsigned char*, int, unsigned char*, int, base::OnceCallback&lt;void ()&gt;), int, int, int, base::internal::UnretainedWrapper&lt;media::VideoFrame&gt;, unsigned char*, int, unsigned char*, int, base::RepeatingCallback&lt;void ()&gt; &gt;::Destroy(base::internal::BindStateBase const*) (1 samples, 5.56%)</title><rect x="141.1" y="245" width="65.6" height="15.0" fill="rgb(237,18,33)" rx="2" ry="2" />
<text  x="144.11" y="255.5" >base::i..</text>
</g>
<g >
<title>&lt;Unknown Address&gt; (1 samples, 5.56%)</title><rect x="665.6" y="197" width="65.5" height="15.0" fill="rgb(221,26,16)" rx="2" ry="2" />
<text  x="668.56" y="207.5" >&lt;Unknow..</text>
</g>
<g >
<title>media::GpuMemoryBufferVideoFramePool::PoolImpl::CopyVideoFrameToGpuMemoryBuffers(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*) (9 samples, 50.00%)</title><rect x="600.0" y="229" width="590.0" height="15.0" fill="rgb(227,60,48)" rx="2" ry="2" />
<text  x="603.00" y="239.5" >media::GpuMemoryBufferVideoFramePool::PoolImpl::CopyVideoFrameToGpuMemoryBuffers(..</text>
</g>
<g >
<title>_pthread_cond_wait (2 samples, 11.11%)</title><rect x="10.0" y="261" width="131.1" height="15.0" fill="rgb(205,63,34)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >_pthread_cond_wait</text>
</g>
<g >
<title>base::WaitableEvent::Signal() (1 samples, 5.56%)</title><rect x="468.9" y="69" width="65.5" height="15.0" fill="rgb(254,182,52)" rx="2" ry="2" />
<text  x="471.89" y="79.5" >base::W..</text>
</g>
<g >
<title>IOConnectCallMethod (4 samples, 22.22%)</title><rect x="927.8" y="181" width="262.2" height="15.0" fill="rgb(230,30,25)" rx="2" ry="2" />
<text  x="930.78" y="191.5" >IOConnectCallMethod</text>
</g>
<g >
<title>std::__Cr::pair&lt;std::__Cr::__hash_iterator&lt;std::__Cr::__hash_node&lt;std::__Cr::__hash_value_type&lt;cc::Task const*, unsigned long&gt;, void*&gt;*&gt;, bool&gt; std::__Cr::__hash_table&lt;std::__Cr::__hash_value_type&lt;cc::Task const*, unsigned long&gt;, std::__Cr::__unordered_map_hasher&lt;cc::Task const*, std::__Cr::__hash_value_type&lt;cc::Task const*, unsigned long&gt;, std::__Cr::hash&lt;cc::Task const*&gt;, true&gt;, std::__Cr::__unordered_map_equal&lt;cc::Task const*, std::__Cr::__hash_value_type&lt;cc::Task const*, unsigned long&gt;, std::__Cr::equal_to&lt;cc::Task const*&gt;, true&gt;, std::__Cr::allocator&lt;std::__Cr::__hash_value_type&lt;cc::Task const*, unsigned long&gt; &gt; &gt;::__emplace_unique_key_args&lt;cc::Task const*, std::__Cr::piecewise_construct_t const&amp;, std::__Cr::tuple&lt;cc::Task const*&amp;&amp;&gt;, std::__Cr::tuple&lt;&gt; &gt;(cc::Task const* const&amp;, std::__Cr::piecewise_construct_t const&amp;&amp;&amp;, std::__Cr::tuple&lt;cc::Task const*&amp;&amp;&gt;&amp;&amp;, std::__Cr::tuple&lt;&gt;&amp;&amp;) (1 samples, 5.56%)</title><rect x="731.1" y="149" width="65.6" height="15.0" fill="rgb(229,63,8)" rx="2" ry="2" />
<text  x="734.11" y="159.5" >std::__..</text>
</g>
<g >
<title>all (18 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(210,85,12)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>CopyPlane (2 samples, 11.11%)</title><rect x="206.7" y="197" width="131.1" height="15.0" fill="rgb(205,103,31)" rx="2" ry="2" />
<text  x="209.67" y="207.5" >CopyPlane</text>
</g>
<g >
<title>io_connect_method (4 samples, 22.22%)</title><rect x="927.8" y="165" width="262.2" height="15.0" fill="rgb(214,164,20)" rx="2" ry="2" />
<text  x="930.78" y="175.5" >io_connect_method</text>
</g>
<g >
<title>IOConnectCallMethod (1 samples, 5.56%)</title><rect x="534.4" y="117" width="65.6" height="15.0" fill="rgb(220,156,18)" rx="2" ry="2" />
<text  x="537.44" y="127.5" >IOConne..</text>
</g>
<g >
<title>content::CategorizedWorkerPool::RunTaskInCategoryWithLockAcquired(cc::TaskCategory) (16 samples, 88.89%)</title><rect x="141.1" y="277" width="1048.9" height="15.0" fill="rgb(206,51,7)" rx="2" ry="2" />
<text  x="144.11" y="287.5" >content::CategorizedWorkerPool::RunTaskInCategoryWithLockAcquired(cc::TaskCategory)</text>
</g>
<g >
<title>base::(anonymous namespace)::ThreadFunc(void*) (18 samples, 100.00%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(241,162,18)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >base::(anonymous namespace)::ThreadFunc(void*)</text>
</g>
<g >
<title>base::  0x644a09 (18 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(235,11,40)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >base::  0x644a09</text>
</g>
<g >
<title>media::(anonymous namespace)::CopyRowsToNV12Buffer(int, int, int, media::VideoFrame const*, unsigned char*, int, unsigned char*, int, base::OnceCallback&lt;void ()&gt;) (6 samples, 33.33%)</title><rect x="206.7" y="229" width="393.3" height="15.0" fill="rgb(224,82,15)" rx="2" ry="2" />
<text  x="209.67" y="239.5" >media::(anonymous namespace)::CopyRowsToNV12Buffer(in..</text>
</g>
<g >
<title>IOSurfaceClientUnlock (1 samples, 5.56%)</title><rect x="534.4" y="133" width="65.6" height="15.0" fill="rgb(245,105,39)" rx="2" ry="2" />
<text  x="537.44" y="143.5" >IOSurfa..</text>
</g>
<g >
<title>base::ConditionVariable::Signal() (1 samples, 5.56%)</title><rect x="796.7" y="149" width="65.5" height="15.0" fill="rgb(248,16,32)" rx="2" ry="2" />
<text  x="799.67" y="159.5" >base::C..</text>
</g>
<g >
<title>content::CategorizedWorkerPool::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (2 samples, 11.11%)</title><rect x="731.1" y="197" width="131.1" height="15.0" fill="rgb(223,195,23)" rx="2" ry="2" />
<text  x="734.11" y="207.5" >content::Categor..</text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostTask(base::sequence_manager::internal::PostedTask) (1 samples, 5.56%)</title><rect x="468.9" y="101" width="65.5" height="15.0" fill="rgb(243,28,3)" rx="2" ry="2" />
<text  x="471.89" y="111.5" >base::s..</text>
</g>
<g >
<title>mach_msg_trap (4 samples, 22.22%)</title><rect x="927.8" y="133" width="262.2" height="15.0" fill="rgb(224,147,15)" rx="2" ry="2" />
<text  x="930.78" y="143.5" >mach_msg_trap</text>
</g>
<g >
<title>mach_msg_trap (1 samples, 5.56%)</title><rect x="534.4" y="69" width="65.6" height="15.0" fill="rgb(222,111,40)" rx="2" ry="2" />
<text  x="537.44" y="79.5" >mach_ms..</text>
</g>
<g >
<title>void base::internal::FunctorTraits&lt;void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), void&gt;::Invoke&lt;void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), scoped_refptr&lt;media::GpuMemoryBufferVideoFramePool::PoolImpl&gt;, scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*&gt;(void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), scoped_refptr&lt;media::GpuMemoryBufferVideoFramePool::PoolImpl&gt;&amp;&amp;, scoped_refptr&lt;media::VideoFrame&gt;&amp;&amp;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*&amp;&amp;) (9 samples, 50.00%)</title><rect x="600.0" y="245" width="590.0" height="15.0" fill="rgb(221,61,47)" rx="2" ry="2" />
<text  x="603.00" y="255.5" >void base::internal::FunctorTraits&lt;void (media::GpuMemoryBufferVideoFramePool::Po..</text>
</g>
<g >
<title>content::CategorizedWorkerPool::SignalHasReadyToRunTasksWithLockAcquired() (1 samples, 5.56%)</title><rect x="796.7" y="165" width="65.5" height="15.0" fill="rgb(222,177,20)" rx="2" ry="2" />
<text  x="799.67" y="175.5" >content..</text>
</g>
<g >
<title>base::(anonymous namespace)::BarrierInfo::Run() (2 samples, 11.11%)</title><rect x="468.9" y="197" width="131.1" height="15.0" fill="rgb(221,92,50)" rx="2" ry="2" />
<text  x="471.89" y="207.5" >base::(anonymous..</text>
</g>
<g >
<title>MergeUVPlane (2 samples, 11.11%)</title><rect x="337.8" y="197" width="131.1" height="15.0" fill="rgb(208,211,2)" rx="2" ry="2" />
<text  x="340.78" y="207.5" >MergeUVPlane</text>
</g>
<g >
<title>IOSurfaceClientLock (4 samples, 22.22%)</title><rect x="927.8" y="197" width="262.2" height="15.0" fill="rgb(245,187,26)" rx="2" ry="2" />
<text  x="930.78" y="207.5" >IOSurfaceClientLock</text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (4 samples, 22.22%)</title><rect x="600.0" y="213" width="262.2" height="15.0" fill="rgb(214,90,27)" rx="2" ry="2" />
<text  x="603.00" y="223.5" >base::TaskRunner::PostTask(base::Lo..</text>
</g>
<g >
<title>_pthread_body (18 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(240,145,45)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >_pthread_body</text>
</g>
<g >
<title>base::allocator::MallocZoneFunctionsToReplaceDefault()::$_9::__invoke(_malloc_zone_t*, void*, unsigned long) (1 samples, 5.56%)</title><rect x="665.6" y="181" width="65.5" height="15.0" fill="rgb(232,73,54)" rx="2" ry="2" />
<text  x="668.56" y="191.5" >base::a..</text>
</g>
<g >
<title>I420ToNV12 (4 samples, 22.22%)</title><rect x="206.7" y="213" width="262.2" height="15.0" fill="rgb(231,62,1)" rx="2" ry="2" />
<text  x="209.67" y="223.5" >I420ToNV12</text>
</g>
<g >
<title>__psynch_cvwait (2 samples, 11.11%)</title><rect x="10.0" y="245" width="131.1" height="15.0" fill="rgb(216,226,0)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >__psynch_cvwait</text>
</g>
<g >
<title>base::internal::CallbackBase::~CallbackBase() (1 samples, 5.56%)</title><rect x="141.1" y="229" width="65.6" height="15.0" fill="rgb(236,148,24)" rx="2" ry="2" />
<text  x="144.11" y="239.5" >base::i..</text>
</g>
<g >
<title>CopyRow_ERMS (2 samples, 11.11%)</title><rect x="206.7" y="181" width="131.1" height="15.0" fill="rgb(247,189,30)" rx="2" ry="2" />
<text  x="209.67" y="191.5" >CopyRow_ERMS</text>
</g>
<g >
<title>mach_msg (1 samples, 5.56%)</title><rect x="468.9" y="53" width="65.5" height="15.0" fill="rgb(228,122,19)" rx="2" ry="2" />
<text  x="471.89" y="63.5" >mach_msg</text>
</g>
<g >
<title>content::CategorizedWorkerPool::Run(std::__Cr::vector&lt;cc::TaskCategory, std::__Cr::allocator&lt;cc::TaskCategory&gt; &gt; const&amp;, base::ConditionVariable*) (18 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(231,119,40)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >content::CategorizedWorkerPool::Run(std::__Cr::vector&lt;cc::TaskCategory, std::__Cr::allocator&lt;cc::TaskCategory&gt; &gt; const&amp;, base::ConditionVariable*)</text>
</g>
<g >
<title>mach_msg (1 samples, 5.56%)</title><rect x="534.4" y="85" width="65.6" height="15.0" fill="rgb(240,26,39)" rx="2" ry="2" />
<text  x="537.44" y="95.5" >mach_msg</text>
</g>
<g >
<title>io_connect_method (1 samples, 5.56%)</title><rect x="534.4" y="101" width="65.6" height="15.0" fill="rgb(252,57,22)" rx="2" ry="2" />
<text  x="537.44" y="111.5" >io_conn..</text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::GuardedTaskPoster::PostTask(base::sequence_manager::internal::PostedTask) (1 samples, 5.56%)</title><rect x="468.9" y="117" width="65.5" height="15.0" fill="rgb(226,138,6)" rx="2" ry="2" />
<text  x="471.89" y="127.5" >base::s..</text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::PostImmediateTaskImpl(base::sequence_manager::internal::PostedTask, base::sequence_manager::internal::TaskQueueImpl::CurrentThread) (1 samples, 5.56%)</title><rect x="468.9" y="85" width="65.5" height="15.0" fill="rgb(217,192,40)" rx="2" ry="2" />
<text  x="471.89" y="95.5" >base::s..</text>
</g>
<g >
<title>pthread_cond_signal (1 samples, 5.56%)</title><rect x="796.7" y="133" width="65.5" height="15.0" fill="rgb(251,90,43)" rx="2" ry="2" />
<text  x="799.67" y="143.5" >pthread..</text>
</g>
<g >
<title>_pthread_start (18 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(212,133,3)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >_pthread_start</text>
</g>
<g >
<title>base::ConditionVariable::Wait() (2 samples, 11.11%)</title><rect x="10.0" y="277" width="131.1" height="15.0" fill="rgb(247,14,50)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >base::ConditionV..</text>
</g>
<g >
<title>gpu::GpuMemoryBufferImplIOSurface::Map() (4 samples, 22.22%)</title><rect x="927.8" y="213" width="262.2" height="15.0" fill="rgb(247,104,34)" rx="2" ry="2" />
<text  x="930.78" y="223.5" >gpu::GpuMemoryBufferImplIOSurface::..</text>
</g>
<g >
<title>gpu::GpuMemoryBufferImplIOSurface::Unmap() (1 samples, 5.56%)</title><rect x="534.4" y="149" width="65.6" height="15.0" fill="rgb(209,3,20)" rx="2" ry="2" />
<text  x="537.44" y="159.5" >gpu::Gp..</text>
</g>
<g >
<title>base::sequence_manager::internal::TaskQueueImpl::TaskRunner::PostDelayedTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;, base::TimeDelta) (1 samples, 5.56%)</title><rect x="468.9" y="133" width="65.5" height="15.0" fill="rgb(252,99,8)" rx="2" ry="2" />
<text  x="471.89" y="143.5" >base::s..</text>
</g>
<g >
<title>base::TaskRunner::PostTask(base::Location const&amp;, base::OnceCallback&lt;void ()&gt;) (1 samples, 5.56%)</title><rect x="468.9" y="149" width="65.5" height="15.0" fill="rgb(246,85,17)" rx="2" ry="2" />
<text  x="471.89" y="159.5" >base::T..</text>
</g>
<g >
<title>base::internal::Invoker&lt;base::internal::BindState&lt;void (*)(int, int, int, media::VideoFrame const*, unsigned char*, int, unsigned char*, int, base::OnceCallback&lt;void ()&gt;), int, int, int, base::internal::UnretainedWrapper&lt;media::VideoFrame&gt;, unsigned char*, int, unsigned char*, int, base::RepeatingCallback&lt;void ()&gt; &gt;, void ()&gt;::RunOnce(base::internal::BindStateBase*) (6 samples, 33.33%)</title><rect x="206.7" y="245" width="393.3" height="15.0" fill="rgb(250,114,25)" rx="2" ry="2" />
<text  x="209.67" y="255.5" >base::internal::Invoker&lt;base::internal::BindState&lt;voi..</text>
</g>
<g >
<title>MergeUVRow_AVX2 (2 samples, 11.11%)</title><rect x="337.8" y="181" width="131.1" height="15.0" fill="rgb(224,155,21)" rx="2" ry="2" />
<text  x="340.78" y="191.5" >MergeUVRow_AVX2</text>
</g>
<g >
<title>media::GpuMemoryBufferVideoFramePool::PoolImpl::OnCopiesDone(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*) (2 samples, 11.11%)</title><rect x="468.9" y="165" width="131.1" height="15.0" fill="rgb(247,133,9)" rx="2" ry="2" />
<text  x="471.89" y="175.5" >media::GpuMemory..</text>
</g>
<g >
<title>base::ScopedClosureRunner::~ScopedClosureRunner() (2 samples, 11.11%)</title><rect x="468.9" y="213" width="131.1" height="15.0" fill="rgb(238,223,48)" rx="2" ry="2" />
<text  x="471.89" y="223.5" >base::ScopedClos..</text>
</g>
<g >
<title>__psynch_cvsignal (1 samples, 5.56%)</title><rect x="796.7" y="117" width="65.5" height="15.0" fill="rgb(224,161,28)" rx="2" ry="2" />
<text  x="799.67" y="127.5" >__psync..</text>
</g>
<g >
<title>base::subtle::RefCountedThreadSafeBase::AddRef() const (1 samples, 5.56%)</title><rect x="862.2" y="197" width="65.6" height="15.0" fill="rgb(247,136,37)" rx="2" ry="2" />
<text  x="865.22" y="207.5" >base::s..</text>
</g>
<g >
<title>content::CategorizedWorkerPool::ScheduleTasksWithLockAcquired(cc::NamespaceToken, cc::TaskGraph*) (2 samples, 11.11%)</title><rect x="731.1" y="181" width="131.1" height="15.0" fill="rgb(236,10,1)" rx="2" ry="2" />
<text  x="734.11" y="191.5" >content::Categor..</text>
</g>
<g >
<title>content::CategorizedWorkerPool::ClosureTask::RunOnWorkerThread() (16 samples, 88.89%)</title><rect x="141.1" y="261" width="1048.9" height="15.0" fill="rgb(212,65,53)" rx="2" ry="2" />
<text  x="144.11" y="271.5" >content::CategorizedWorkerPool::ClosureTask::RunOnWorkerThread()</text>
</g>
<g >
<title>mach_msg (4 samples, 22.22%)</title><rect x="927.8" y="149" width="262.2" height="15.0" fill="rgb(230,150,15)" rx="2" ry="2" />
<text  x="930.78" y="159.5" >mach_msg</text>
</g>
<g >
<title>void base::internal::FunctorTraits&lt;void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), void&gt;::Invoke&lt;void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), scoped_refptr&lt;media::GpuMemoryBufferVideoFramePool::PoolImpl&gt;, scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*&gt;(void (media::GpuMemoryBufferVideoFramePool::PoolImpl::*)(scoped_refptr&lt;media::VideoFrame&gt;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*), scoped_refptr&lt;media::GpuMemoryBufferVideoFramePool::PoolImpl&gt;&amp;&amp;, scoped_refptr&lt;media::VideoFrame&gt;&amp;&amp;, media::GpuMemoryBufferVideoFramePool::PoolImpl::FrameResources*&amp;&amp;) (2 samples, 11.11%)</title><rect x="468.9" y="181" width="131.1" height="15.0" fill="rgb(253,56,5)" rx="2" ry="2" />
<text  x="471.89" y="191.5" >void base::inter..</text>
</g>
</g>
</svg>
