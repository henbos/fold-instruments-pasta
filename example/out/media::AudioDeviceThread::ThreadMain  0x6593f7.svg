<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>media::SincResampler::Convolve_SSE(float const*, float const*, float const*, double) (7 samples, 10.94%)</title><rect x="1024.1" y="85" width="129.0" height="15.0" fill="rgb(210,205,15)" rx="2" ry="2" />
<text  x="1027.06" y="95.5" >media::SincResam..</text>
</g>
<g >
<title>base::TimeDelta::InSecondsF() const (3 samples, 4.69%)</title><rect x="729.1" y="101" width="55.3" height="15.0" fill="rgb(215,5,6)" rx="2" ry="2" />
<text  x="732.06" y="111.5" >base:..</text>
</g>
<g >
<title>write (8 samples, 12.50%)</title><rect x="65.3" y="117" width="147.5" height="15.0" fill="rgb(216,89,52)" rx="2" ry="2" />
<text  x="68.31" y="127.5" >write</text>
</g>
<g >
<title>fcntl (9 samples, 14.06%)</title><rect x="212.8" y="149" width="166.0" height="15.0" fill="rgb(222,153,7)" rx="2" ry="2" />
<text  x="215.81" y="159.5" >fcntl</text>
</g>
<g >
<title>media::AudioDeviceThread::ThreadMain() (64 samples, 100.00%)</title><rect x="10.0" y="181" width="1180.0" height="15.0" fill="rgb(249,83,2)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >media::AudioDeviceThread::ThreadMain()</text>
</g>
<g >
<title>all (64 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(226,23,25)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>base::(anonymous namespace)::ThreadFunc(void*) (64 samples, 100.00%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(238,12,23)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >base::(anonymous namespace)::ThreadFunc(void*)</text>
</g>
<g >
<title>read (14 samples, 21.88%)</title><rect x="397.2" y="133" width="258.1" height="15.0" fill="rgb(221,205,9)" rx="2" ry="2" />
<text  x="400.19" y="143.5" >read</text>
</g>
<g >
<title>media::SincResampler::SetRatio(double) (1 samples, 1.56%)</title><rect x="1153.1" y="101" width="18.5" height="15.0" fill="rgb(247,77,22)" rx="2" ry="2" />
<text  x="1156.12" y="111.5" ></text>
</g>
<g >
<title>base::CancelableSyncSocket::Send(void const*, unsigned long) (17 samples, 26.56%)</title><rect x="65.3" y="165" width="313.5" height="15.0" fill="rgb(234,14,35)" rx="2" ry="2" />
<text  x="68.31" y="175.5" >base::CancelableSyncSocket::Send(void cons..</text>
</g>
<g >
<title>media::AudioDeviceThread::ThreadMain  0x6593f7 (64 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(247,125,47)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >media::AudioDeviceThread::ThreadMain  0x6593f7</text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 1.56%)</title><rect x="1171.6" y="133" width="18.4" height="15.0" fill="rgb(253,168,27)" rx="2" ry="2" />
<text  x="1174.56" y="143.5" ></text>
</g>
<g >
<title>media::MultiChannelResampler::SetRatio(double) (1 samples, 1.56%)</title><rect x="1153.1" y="117" width="18.5" height="15.0" fill="rgb(227,152,21)" rx="2" ry="2" />
<text  x="1156.12" y="127.5" ></text>
</g>
<g >
<title>media::SincResampler::Resample(int, float*) (19 samples, 29.69%)</title><rect x="802.8" y="101" width="350.3" height="15.0" fill="rgb(234,104,40)" rx="2" ry="2" />
<text  x="805.81" y="111.5" >media::SincResampler::Resample(int, float*)</text>
</g>
<g >
<title>media::ClockSmoother::Smooth(base::TimeTicks, base::TimeDelta) (3 samples, 4.69%)</title><rect x="729.1" y="117" width="55.3" height="15.0" fill="rgb(244,142,11)" rx="2" ry="2" />
<text  x="732.06" y="127.5" >media..</text>
</g>
<g >
<title>base::circular_deque&lt;media::AudioShifter::AudioQueueEntry&gt;::pop_front() (1 samples, 1.56%)</title><rect x="987.2" y="53" width="18.4" height="15.0" fill="rgb(230,152,30)" rx="2" ry="2" />
<text  x="990.19" y="63.5" ></text>
</g>
<g >
<title>read (1 samples, 1.56%)</title><rect x="673.8" y="149" width="18.4" height="15.0" fill="rgb(219,109,30)" rx="2" ry="2" />
<text  x="676.75" y="159.5" ></text>
</g>
<g >
<title>__fcntl (9 samples, 14.06%)</title><rect x="212.8" y="133" width="166.0" height="15.0" fill="rgb(247,50,18)" rx="2" ry="2" />
<text  x="215.81" y="143.5" >__fcntl</text>
</g>
<g >
<title>media::AudioShifter::Pull(media::AudioBus*, base::TimeTicks) (24 samples, 37.50%)</title><rect x="729.1" y="133" width="442.5" height="15.0" fill="rgb(207,161,24)" rx="2" ry="2" />
<text  x="732.06" y="143.5" >media::AudioShifter::Pull(media::AudioBus*, base::TimeTicks)</text>
</g>
<g >
<title>media::MultiChannelResampler::Resample(int, media::AudioBus*) (20 samples, 31.25%)</title><rect x="784.4" y="117" width="368.7" height="15.0" fill="rgb(240,107,45)" rx="2" ry="2" />
<text  x="787.38" y="127.5" >media::MultiChannelResampler::Resample(int, media:..</text>
</g>
<g >
<title>media::AudioOutputDeviceThreadCallback::Process(unsigned int) (27 samples, 42.19%)</title><rect x="692.2" y="165" width="497.8" height="15.0" fill="rgb(237,64,30)" rx="2" ry="2" />
<text  x="695.19" y="175.5" >media::AudioOutputDeviceThreadCallback::Process(unsigned int)</text>
</g>
<g >
<title>base::(anonymous namespace)::SendHelper(int, void const*, unsigned long) (8 samples, 12.50%)</title><rect x="65.3" y="149" width="147.5" height="15.0" fill="rgb(238,101,28)" rx="2" ry="2" />
<text  x="68.31" y="159.5" >base::(anonymous n..</text>
</g>
<g >
<title>_platform_memmove$VARIANT$Haswell (1 samples, 1.56%)</title><rect x="1005.6" y="37" width="18.5" height="15.0" fill="rgb(206,8,27)" rx="2" ry="2" />
<text  x="1008.62" y="47.5" ></text>
</g>
<g >
<title>base::WriteFileDescriptor(int, char const*, int) (8 samples, 12.50%)</title><rect x="65.3" y="133" width="147.5" height="15.0" fill="rgb(214,111,27)" rx="2" ry="2" />
<text  x="68.31" y="143.5" >base::WriteFileDes..</text>
</g>
<g >
<title>_pthread_start (64 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(236,195,7)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >_pthread_start</text>
</g>
<g >
<title>base::internal::UncheckedScopedBlockingCall::~UncheckedScopedBlockingCall() (1 samples, 1.56%)</title><rect x="655.3" y="133" width="18.5" height="15.0" fill="rgb(235,181,34)" rx="2" ry="2" />
<text  x="658.31" y="143.5" ></text>
</g>
<g >
<title>media::AudioShifter::ResamplerCallback(int, media::AudioBus*) (3 samples, 4.69%)</title><rect x="968.8" y="69" width="55.3" height="15.0" fill="rgb(229,140,39)" rx="2" ry="2" />
<text  x="971.75" y="79.5" >media..</text>
</g>
<g >
<title>blink::TrackAudioRenderer::Render(base::TimeDelta, base::TimeTicks, int, media::AudioBus*) (25 samples, 39.06%)</title><rect x="729.1" y="149" width="460.9" height="15.0" fill="rgb(208,175,27)" rx="2" ry="2" />
<text  x="732.06" y="159.5" >blink::TrackAudioRenderer::Render(base::TimeDelta, base::TimeTi..</text>
</g>
<g >
<title>media::AudioBus::~AudioBus() (1 samples, 1.56%)</title><rect x="987.2" y="37" width="18.4" height="15.0" fill="rgb(247,168,0)" rx="2" ry="2" />
<text  x="990.19" y="47.5" ></text>
</g>
<g >
<title>thread_start (64 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(207,211,11)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >thread_start</text>
</g>
<g >
<title>base::internal::Invoker&lt;base::internal::BindState&lt;void (media::AudioShifter::*)(int, media::AudioBus*), base::internal::UnretainedWrapper&lt;media::AudioShifter&gt; &gt;, void (int, media::AudioBus*)&gt;::Run(base::internal::BindStateBase*, int, media::AudioBus*) (1 samples, 1.56%)</title><rect x="950.3" y="69" width="18.5" height="15.0" fill="rgb(238,29,3)" rx="2" ry="2" />
<text  x="953.31" y="79.5" ></text>
</g>
<g >
<title>media::MultiChannelResampler::ProvideInput(int, int, float*) (5 samples, 7.81%)</title><rect x="931.9" y="85" width="92.2" height="15.0" fill="rgb(214,47,51)" rx="2" ry="2" />
<text  x="934.88" y="95.5" >media::Mult..</text>
</g>
<g >
<title>_pthread_body (64 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(253,124,1)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >_pthread_body</text>
</g>
<g >
<title>base::ThreadLocalStorage::Slot::Get() const (1 samples, 1.56%)</title><rect x="655.3" y="117" width="18.5" height="15.0" fill="rgb(223,9,52)" rx="2" ry="2" />
<text  x="658.31" y="127.5" ></text>
</g>
<g >
<title>base::SyncSocket::Receive(void*, unsigned long) (17 samples, 26.56%)</title><rect x="378.8" y="165" width="313.4" height="15.0" fill="rgb(206,218,11)" rx="2" ry="2" />
<text  x="381.75" y="175.5" >base::SyncSocket::Receive(void*, unsigned ..</text>
</g>
<g >
<title>base::ReadFromFD(int, char*, unsigned long) (15 samples, 23.44%)</title><rect x="378.8" y="149" width="276.5" height="15.0" fill="rgb(216,182,1)" rx="2" ry="2" />
<text  x="381.75" y="159.5" >base::ReadFromFD(int, char*, unsigned..</text>
</g>
<g >
<title>base::ScopedBlockingCall::~ScopedBlockingCall() (1 samples, 1.56%)</title><rect x="655.3" y="149" width="18.5" height="15.0" fill="rgb(225,219,43)" rx="2" ry="2" />
<text  x="658.31" y="159.5" ></text>
</g>
<g >
<title>media::AudioBus::CopyPartialFramesTo(int, int, int, media::AudioBus*) const (1 samples, 1.56%)</title><rect x="1005.6" y="53" width="18.5" height="15.0" fill="rgb(237,31,4)" rx="2" ry="2" />
<text  x="1008.62" y="63.5" ></text>
</g>
</g>
</svg>
